var search_data = {"index":{"searchIndex":["actionmailer","base","collector","deliverymethods","classmethods","mail","logsubscriber","mailhelper","noninferrablemailererror","railtie","activesupport","testcase","behavior","classmethods","testhelper","activemodel","attributemethods","classmethods","callbacks","conversion","dirty","errors","forbiddenattributeserror","lint","tests","missingattributeerror","model","name","naming","securepassword","classmethods","instancemethodsonactivation","serialization","serializers","json","xml","strictvalidationfailed","translation","validations","callbacks","classmethods","classmethods","helpermethods","validator","activerecord","activerecorderror","adapternotfound","adapternotspecified","aggregations","classmethods","associationrelation","associationtypemismatch","associations","classmethods","collectionproxy","attributeassignment","attributeassignmenterror","attributemethods","beforetypecast","classmethods","dirty","activesupport","primarykey","classmethods","query","read","classmethods","serialization","classmethods","timezoneconversion","classmethods","write","classmethods","autosaveassociation","classmethods","base","batches","calculations","callbacks","classmethods","configurationerror","connectionadapters","abstractadapter","schemacreation","abstractmysqladapter","schemacreation","column","format","columndumper","connectionhandler","connectionmanagement","connectionpool","queue","reaper","databaselimits","databasestatements","mysql2adapter","mysqladapter","fields","boolean","date","datetime","decimal","float","identity","integer","time","type","statementpool","postgresqladapter","columndefinition","columnmethods","databasestatements","oid","array","bit","boolean","bytea","cidr","date","decimal","float","hstore","identity","integer","json","money","point","range","time","timestamp","type","typemap","vector","quoting","referentialintegrity","schemacreation","schemastatements","statementpool","table","tabledefinition","utils","postgresqlcolumn","arrayparser","cast","querycache","quoting","sqlite3adapter","explainprettyprinter","statementpool","version","schemacache","schemastatements","statementpool","table","tabledefinition","transactionstate","connectionhandling","connectionnotestablished","connectiontimeouterror","core","classmethods","countercache","classmethods","dangerousattributeerror","delegation","classmethods","threadsafe","dynamicmatchers","findby","findbybang","finder","method","explain","explainsubscriber","activesupport","findermethods","fixtureset","immutablerelation","inheritance","classmethods","integration","invalidforeignkey","irreversiblemigration","locking","optimistic","classmethods","pessimistic","logsubscriber","migration","checkpending","commandrecorder","straightreversions","migrationproxy","modelschema","classmethods","multiparameterassignmenterrors","nestedattributes","classmethods","toomanyrecords","persistence","classmethods","preparedstatementinvalid","querycache","classmethods","querymethods","wherechain","querying","railtie","actiondispatch","activesupport","rails","readonlyrecord","readonlyattributes","classmethods","recordinvalid","recordnotdestroyed","recordnotfound","recordnotsaved","recordnotunique","reflection","classmethods","macroreflection","relation","result","rollback","sqlcounter","sanitization","classmethods","schema","schemamigration","scoping","classmethods","default","classmethods","named","classmethods","serialization","serializationtypemismatch","spawnmethods","staleobjecterror","statementcache","statementinvalid","store","classmethods","tasks","databasetasks","testfixtures","classmethods","throwresult","timestamp","transactionisolationerror","transactions","classmethods","translation","unknownattributeerror","unknownprimarykey","validations","classmethods","wrappeddatabaseexception","activesupport","mysql","field","result","stmt","time","!~()","<=>()","<=>()","<=>()","==()","==()","==()","==()","===()","===()","=~()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","_attr_readonly()","_store_accessors_module()","abstract_class?()","accept()","accepts_nested_attributes_for()","active?()","active?()","active?()","active?()","active?()","active_connection?()","active_connections?()","adapter_name()","adapter_name()","add()","add()","add()","add_belongs_to()","add_column()","add_column()","add_column_position!()","add_column_sql()","add_delivery_method()","add_index()","add_index_length()","add_index_options()","add_index_sort_order()","add_index_sql()","add_on_blank()","add_on_empty()","add_reference()","add_timestamps()","add_timestamps_sql()","add_to_transaction()","add_transaction_record()","added?()","after_commit()","after_rollback()","after_teardown()","after_validation()","alias_attribute()","alias_type()","alias_type()","all()","all()","allowed_index_name_length()","allowed_index_name_length()","announce()","any()","any?()","any?()","any_waiting?()","apply_join_dependency()","arel()","arel_engine()","arel_table()","array_to_string()","as_json()","as_json()","assert_emails()","assert_no_emails()","assign_attributes()","assume_migrated_upto_version()","attachments()","attachments()","attr_readonly()","attribute_for_inspect()","attribute_method?()","attribute_method?()","attribute_method?()","attribute_method_affix()","attribute_method_prefix()","attribute_method_suffix()","attribute_missing()","attribute_names()","attribute_names()","attribute_present?()","attributes()","attributes=()","attributes_before_type_cast()","attributes_hash()","authenticate()","average()","base_class()","basename()","becomes()","becomes!()","before_setup()","before_validation()","begin_db_transaction()","begin_db_transaction()","begin_db_transaction()","begin_isolated_db_transaction()","begin_isolated_db_transaction()","begin_isolated_db_transaction()","belongs_to()","belongs_to()","belongs_to()","bind()","blank?()","blank?()","block_format()","body()","body()","build()","build()","build_arel()","cache()","cache()","cache_attribute?()","cache_attributes()","cache_fixtures()","cache_for_connection()","cache_key()","cached_attributes()","cached_fixtures()","calculate()","call()","call()","call()","call()","case_insensitive_comparison()","case_insensitive_comparison()","case_sensitive_equality_operator()","case_sensitive_modifier()","case_sensitive_modifier()","change()","change_column()","change_column()","change_column_default()","change_column_default()","change_column_default()","change_column_null()","change_column_null()","change_column_null()","change_column_null()","change_column_sql()","change_default()","change_table()","change_table()","changed()","changed?()","changed_attributes()","changed_for_autosave?()","changes()","charset()","charset()","charset_current()","check_pending!()","checkin()","checkout()","cidr()","cidr_to_string()","class_name()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear!()","clear_active_connections!()","clear_all_connections!()","clear_cache!()","clear_cache!()","clear_cache!()","clear_cache!()","clear_log()","clear_query_cache()","clear_reloadable_connections!()","clear_reloadable_connections!()","clear_table_cache!()","clear_validators!()","client_encoding()","client_min_messages()","client_min_messages=()","clone()","close()","collation()","collation()","collation()","collation_current()","column()","column()","column()","column_defaults()","column_defaults()","column_exists?()","column_exists?()","column_for_attribute()","column_name_length()","column_names()","column_spec()","columns()","columns()","columns()","columns()","columns()","columns_for_remove()","columns_hash()","columns_hash()","columns_per_multicolumn_index()","columns_per_table()","commit_db_transaction()","commit_db_transaction()","committed?()","composed_of()","compute_type()","concat()","connected?()","connected?()","connected?()","connection()","connection()","connection()","connection()","connection_config()","connection_handler()","connection_handler()","connection_handler=()","connection_id()","connection_id=()","connection_pool()","connection_pool_list()","connection_pools()","construct_join_dependency_for_association_find()","construct_limited_ids_condition()","construct_relation_for_association_calculations()","construct_relation_for_association_find()","content_columns()","controller_path()","copy()","count()","count()","count()","count_by_sql()","create()","create()","create()","create()","create()","create()","create!()","create!()","create!()","create_all()","create_current()","create_database()","create_database()","create_database_url()","create_fixtures()","create_join_table()","create_reflection()","create_savepoint()","create_savepoint()","create_savepoint()","create_savepoint()","create_schema()","create_table()","create_table()","create_with()","ctype()","current_config()","current_database()","current_database()","current_savepoint_name()","current_schema()","custom()","dangerous_attribute_method?()","daterange()","decrement()","decrement!()","decrement_counter()","decrement_open_transactions()","default()","default_i18n_subject()","default_options=()","default_primary_key_type()","default_scope()","default_scopes?()","default_sequence_name()","define()","define()","define_attribute_method()","define_attribute_methods()","define_method_attribute()","define_method_attribute()","define_method_attribute=()","define_method_attribute=()","define_model_callbacks()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete_all()","delete_all()","delete_sql()","deliver()","descends_from_active_record?()","destroy()","destroy()","destroy()","destroy!()","destroy_all()","destroy_all()","destroyed?()","destroyed_by_association()","destroyed_by_association=()","determine_default_mailer()","dirties_query_cache()","disable_ddl_transaction!()","disable_extension()","disable_extension()","disable_query_cache!()","disable_referential_integrity()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","distinct()","distinct()","distinct()","down()","drop()","drop_all()","drop_current()","drop_database_url()","drop_join_table()","drop_schema()","drop_table()","drop_table()","dup()","each()","each()","each()","each()","each()","each()","each()","eager_load()","eager_loading?()","empty?()","empty?()","empty?()","empty?()","empty_insert_statement_value()","empty_insert_statement_value()","emulate_booleans()","enable_extension()","enable_extension()","enable_query_cache!()","encode_with()","encoding()","encoding()","enlist_fixture_connections()","eql?()","eql?()","error_number()","errors()","escape_bytea()","establish_connection()","establish_connection()","except()","exec_delete()","exec_delete()","exec_delete()","exec_delete()","exec_delete()","exec_insert()","exec_insert()","exec_insert()","exec_migration()","exec_query()","exec_query()","exec_query()","exec_query()","exec_query()","exec_update()","exec_update()","exec_update()","exec_update()","exec_update()","exec_without_stmt()","execute()","execute()","execute()","execute()","execute()","execute_and_free()","exists?()","expand_hash_conditions_for_aggregates()","expire()","explain()","explain()","explain()","explain()","extending()","extension_enabled?()","extensions()","extensions()","extract_bounds()","extract_schema_and_table()","extract_value_from_default()","fetch()","find()","find()","find_by()","find_by!()","find_by_sql()","find_each()","find_first()","find_in_batches()","find_last()","find_one()","find_or_create_by()","find_or_create_by!()","find_or_initialize_by()","find_some()","find_take()","find_type()","find_with_associations()","find_with_ids()","finder()","finder()","finder()","first()","first()","first!()","fixture_is_cached?()","fixtures()","format_paragraph()","freeze()","from()","from_json()","from_xml()","frozen?()","full_message()","full_messages()","full_messages_for()","generate_message()","generated_feature_methods()","get()","group()","has_and_belongs_to_many()","has_attribute?()","has_key?()","has_many()","has_one()","has_secure_password()","hash()","having()","headers()","hstore()","hstore_to_string()","human()","human_attribute_name()","i18n_scope()","id()","id=()","id?()","id_before_type_cast()","identify()","identity()","ids()","in_clause_length()","include?()","include?()","includes()","increment()","increment!()","increment_counter()","increment_open_transactions()","index()","index()","index_algorithms()","index_algorithms()","index_algorithms()","index_exists?()","index_exists?()","index_name()","index_name_exists?()","index_name_for_remove()","index_name_length()","index_name_length()","indexes()","indexes_per_table()","inet()","infinity()","infinity?()","inheritance_column()","inheritance_column=()","init_with()","initialize_copy()","initialize_copy()","initialize_generated_modules()","initialize_schema_migrations_table()","initialize_schema_migrations_table()","initialize_test_deliveries()","insert()","insert()","insert_fixture()","insert_sql()","insert_sql()","insert_sql()","inspect()","inspect()","inspect()","instance_method_already_implemented?()","instantiate()","instantiate_all_loaded_fixtures()","instantiate_fixtures()","int4range()","int8range()","invalid?()","inverse_of()","joined_includes_values()","joins()","joins_per_query()","json()","json_to_string()","key?()","key?()","key?()","key?()","key?()","keys()","kind()","kind()","klass()","last()","last()","last()","last!()","last_inserted_id()","last_inserted_id()","last_inserted_id()","last_inserted_id()","lease()","length()","length()","length()","length()","length()","limit()","limited_update_conditions()","limited_update_conditions()","load()","load_seed()","load_target()","loaded?()","lock()","lock!()","locking_column()","locking_column=()","locking_enabled?()","log()","logger()","logger()","lookup_ancestors()","ltree()","macaddr()","mail()","mailer()","mailer_class()","mailer_name()","mailer_name()","many?()","many?()","mark_for_destruction()","marked_for_destruction?()","marshal_dump()","marshal_load()","match()","maximum()","merge()","message()","method_missing()","method_missing()","method_missing()","migrate()","migrate()","migration_keys()","migration_keys()","migrations_paths()","minimum()","model_name()","mtime()","native_database_types()","native_database_types()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_record?()","next_key()","next_migration_number()","none()","not()","num_waiting()","numrange()","odd?()","offset()","only()","open_transactions()","options_include_default?()","order()","outside_transaction?()","param_key()","password=()","password_confirmation=()","pattern()","persisted?()","persisted?()","pk_and_sequence_for()","pluck()","plural()","point_to_string()","poll()","populate_with_current_scope_attributes()","postgresql_version()","prefetch_primary_key?()","prefix()","prefix()","prefix()","preload()","prepare_column_options()","prepare_column_options()","pretty_print()","previous_changes()","primary_key()","primary_key()","primary_key()","primary_key()","primary_key()","primary_key=()","primary_keys()","proxy_association()","proxy_association()","purge()","query_attribute()","quote()","quote()","quote()","quote_column_name()","quote_string()","quote_string()","quote_table_name()","quote_table_name()","quote_table_name_for_assignment()","quote_table_name_for_assignment()","quote_table_name_for_assignment()","quoted_columns_for_index()","quoted_columns_for_index()","quoted_date()","quoted_false()","quoted_false()","quoted_id()","quoted_locking_column()","quoted_primary_key()","quoted_table_name()","quoted_true()","quoted_true()","range_to_string()","raw_connection()","raw_write_attribute()","read_attribute()","read_attribute_before_type_cast()","read_store_attribute()","readonly()","readonly!()","readonly?()","readonly_attributes()","reap()","receive()","receive()","reconnect!()","reconnect!()","reconnect!()","reconnect!()","record()","recreate_database()","references()","references()","references()","reflect_on_aggregation()","reflect_on_all_aggregations()","reflect_on_all_associations()","reflect_on_all_autosave_associations()","reflect_on_association()","register_interceptor()","register_interceptors()","register_observer()","register_observers()","register_task()","register_type()","register_type()","registered_type?()","release_connection()","release_savepoint()","release_savepoint()","release_savepoint()","release_savepoint()","reload()","reload()","reload()","remove()","remove()","remove_belongs_to()","remove_belongs_to()","remove_column()","remove_column()","remove_column_sql()","remove_columns()","remove_columns_sql()","remove_connection()","remove_connection()","remove_index()","remove_index()","remove_index_sql()","remove_reference()","remove_references()","remove_timestamps()","remove_timestamps()","remove_timestamps_sql()","rename()","rename_column()","rename_column()","rename_column_indexes()","rename_column_sql()","rename_index()","rename_index()","rename_index()","rename_table()","rename_table()","rename_table()","rename_table()","rename_table_indexes()","render_bind()","reorder()","replace()","require_fixture_classes()","requires_reloading?()","requires_reloading?()","reset()","reset!()","reset!()","reset!()","reset!()","reset_cache()","reset_column_information()","reset_counters()","reset_locking_column()","reset_runtime()","reset_sequence!()","respond_to?()","respond_to?()","respond_to_without_attributes?()","result()","retrieve_connection()","retrieve_connection_pool()","reverse_order()","reversible()","revert()","revert()","reverting?()","rollback_active_record_state!()","rollback_db_transaction()","rollback_db_transaction()","rollback_to_savepoint()","rollback_to_savepoint()","rollback_to_savepoint()","rollback_to_savepoint()","rolledback?()","route_key()","run()","run()","run_in_transaction?()","runtime()","runtime=()","sanitize_conditions()","sanitize_limit()","sanitize_sql()","sanitize_sql_array()","sanitize_sql_for_assignment()","sanitize_sql_for_conditions()","sanitize_sql_hash()","sanitize_sql_hash_for_assignment()","sanitize_sql_hash_for_conditions()","save()","save()","save!()","save!()","say()","say_with_time()","schema_cache=()","schema_creation()","schema_creation()","schema_creation()","schema_exists?()","schema_names()","schema_search_path()","schema_search_path=()","scope()","scope()","scope_for_create()","scoping()","scoping()","select()","select()","select()","select()","select_all()","select_all()","select_one()","select_rows()","select_rows()","select_rows()","select_rows()","select_rows()","select_value()","select_values()","sequence_name()","sequence_name=()","serial_sequence()","serializable_hash()","serializable_hash()","serialize()","serialized_attributes()","serialized_attributes()","session_auth=()","set()","set_content_type()","set_expected_mail()","set_fixture_class()","set_name_cache()","set_standard_conforming_strings()","set_state()","setup_fixture_accessors()","setup_fixtures()","show_variable()","signature()","singular()","singular_route_key()","size()","size()","size()","size()","size()","slice()","sql()","sql_for_insert()","sql_for_insert()","sql_query_length()","sqlite_version()","sti_name()","store()","store_accessor()","strict_mode?()","string_to_array()","string_to_bit()","string_to_cidr()","string_to_hstore()","string_to_json()","string_to_point()","string_to_time()","structure_dump()","structure_load()","subquery_for()","subquery_for()","substitute_at()","substitute_at()","suffix()","suffix()","sum()","supports_add_column?()","supports_bulk_alter?()","supports_count_distinct?()","supports_ddl_transactions?()","supports_ddl_transactions?()","supports_ddl_transactions?()","supports_explain?()","supports_explain?()","supports_explain?()","supports_explain?()","supports_extensions?()","supports_extensions?()","supports_index_sort_order?()","supports_index_sort_order?()","supports_index_sort_order?()","supports_index_sort_order?()","supports_insert_with_returning?()","supports_migrations?()","supports_migrations?()","supports_migrations?()","supports_partial_index?()","supports_partial_index?()","supports_primary_key?()","supports_primary_key?()","supports_ranges?()","supports_savepoints?()","supports_savepoints?()","supports_savepoints?()","supports_savepoints?()","supports_statement_cache?()","supports_statement_cache?()","supports_statement_cache?()","supports_statement_cache?()","supports_transaction_isolation?()","supports_transaction_isolation?()","supports_transaction_isolation?()","suppress_messages()","symbolized_base_class()","symbolized_sti_name()","table_alias_for()","table_alias_length()","table_alias_length()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_name()","table_name()","table_name=()","table_name_length()","table_rows()","table_structure()","tables()","tables()","take()","take!()","target()","teardown_fixtures()","test_errors_aref()","test_model_naming()","test_persisted?()","test_to_key()","test_to_param()","test_to_partial_path()","tests()","timestamps()","timestamps()","to_a()","to_a()","to_ary()","to_date()","to_hash()","to_hash()","to_integer()","to_key()","to_key()","to_model()","to_param()","to_param()","to_partial_path()","to_s()","to_sql()","to_sql()","to_str()","to_xml()","to_xml()","to_xml()","toggle()","toggle!()","touch()","transaction()","transaction()","transaction()","transaction_isolation_levels()","transaction_joinable=()","transaction_open?()","translate_exception()","translate_exception()","translate_exception()","translate_exception()","try_to_load_dependency()","tsrange()","tstzrange()","tsvector()","type()","type()","type()","type()","type()","type()","type()","type()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast_config_to_boolean()","type_cast_config_to_integer()","type_cast_for_write()","type_cast_for_write()","type_to_sql()","type_to_sql()","uncached()","uncached()","uncountable?()","undefine_attribute_methods()","unescape_bytea()","uniq()","uniq()","uniq_value()","unprepared_statement()","unprepared_visitor()","unscope()","unscoped()","up()","update()","update()","update()","update!()","update_all()","update_attribute()","update_attributes()","update_attributes!()","update_column()","update_columns()","update_counters()","update_counters()","update_sql()","update_sql()","use_insert_returning?()","uses_transaction()","uses_transaction?()","using_limitable_reflections?()","uuid()","valid?()","valid?()","valid?()","valid_alter_table_options()","valid_type?()","valid_type?()","valid_type?()","validate()","validate()","validates()","validates!()","validates_absence_of()","validates_acceptance_of()","validates_associated()","validates_confirmation_of()","validates_each()","validates_exclusion_of()","validates_format_of()","validates_inclusion_of()","validates_length_of()","validates_numericality_of()","validates_presence_of()","validates_presence_of()","validates_size_of()","validates_uniqueness_of()","validates_with()","validates_with()","validators()","validators_on()","values()","values()","verify!()","version()","version()","version()","version()","where()","where_values_hash()","with_connection()","with_lock()","with_transaction_returning_status()","without_prepared_statement?()","write()","write_attribute()","write_store_attribute()","xml()","changelog","readme","changelog","readme","changelog","readme"],"longSearchIndex":["actionmailer","actionmailer::base","actionmailer::collector","actionmailer::deliverymethods","actionmailer::deliverymethods::classmethods","actionmailer::deliverymethods::mail","actionmailer::logsubscriber","actionmailer::mailhelper","actionmailer::noninferrablemailererror","actionmailer::railtie","actionmailer::railtie::activesupport","actionmailer::testcase","actionmailer::testcase::behavior","actionmailer::testcase::behavior::classmethods","actionmailer::testhelper","activemodel","activemodel::attributemethods","activemodel::attributemethods::classmethods","activemodel::callbacks","activemodel::conversion","activemodel::dirty","activemodel::errors","activemodel::forbiddenattributeserror","activemodel::lint","activemodel::lint::tests","activemodel::missingattributeerror","activemodel::model","activemodel::name","activemodel::naming","activemodel::securepassword","activemodel::securepassword::classmethods","activemodel::securepassword::instancemethodsonactivation","activemodel::serialization","activemodel::serializers","activemodel::serializers::json","activemodel::serializers::xml","activemodel::strictvalidationfailed","activemodel::translation","activemodel::validations","activemodel::validations::callbacks","activemodel::validations::callbacks::classmethods","activemodel::validations::classmethods","activemodel::validations::helpermethods","activemodel::validator","activerecord","activerecord::activerecorderror","activerecord::adapternotfound","activerecord::adapternotspecified","activerecord::aggregations","activerecord::aggregations::classmethods","activerecord::associationrelation","activerecord::associationtypemismatch","activerecord::associations","activerecord::associations::classmethods","activerecord::associations::collectionproxy","activerecord::attributeassignment","activerecord::attributeassignmenterror","activerecord::attributemethods","activerecord::attributemethods::beforetypecast","activerecord::attributemethods::classmethods","activerecord::attributemethods::dirty","activerecord::attributemethods::dirty::activesupport","activerecord::attributemethods::primarykey","activerecord::attributemethods::primarykey::classmethods","activerecord::attributemethods::query","activerecord::attributemethods::read","activerecord::attributemethods::read::classmethods","activerecord::attributemethods::serialization","activerecord::attributemethods::serialization::classmethods","activerecord::attributemethods::timezoneconversion","activerecord::attributemethods::timezoneconversion::classmethods","activerecord::attributemethods::write","activerecord::attributemethods::write::classmethods","activerecord::autosaveassociation","activerecord::autosaveassociation::classmethods","activerecord::base","activerecord::batches","activerecord::calculations","activerecord::callbacks","activerecord::callbacks::classmethods","activerecord::configurationerror","activerecord::connectionadapters","activerecord::connectionadapters::abstractadapter","activerecord::connectionadapters::abstractadapter::schemacreation","activerecord::connectionadapters::abstractmysqladapter","activerecord::connectionadapters::abstractmysqladapter::schemacreation","activerecord::connectionadapters::column","activerecord::connectionadapters::column::format","activerecord::connectionadapters::columndumper","activerecord::connectionadapters::connectionhandler","activerecord::connectionadapters::connectionmanagement","activerecord::connectionadapters::connectionpool","activerecord::connectionadapters::connectionpool::queue","activerecord::connectionadapters::connectionpool::reaper","activerecord::connectionadapters::databaselimits","activerecord::connectionadapters::databasestatements","activerecord::connectionadapters::mysql2adapter","activerecord::connectionadapters::mysqladapter","activerecord::connectionadapters::mysqladapter::fields","activerecord::connectionadapters::mysqladapter::fields::boolean","activerecord::connectionadapters::mysqladapter::fields::date","activerecord::connectionadapters::mysqladapter::fields::datetime","activerecord::connectionadapters::mysqladapter::fields::decimal","activerecord::connectionadapters::mysqladapter::fields::float","activerecord::connectionadapters::mysqladapter::fields::identity","activerecord::connectionadapters::mysqladapter::fields::integer","activerecord::connectionadapters::mysqladapter::fields::time","activerecord::connectionadapters::mysqladapter::fields::type","activerecord::connectionadapters::mysqladapter::statementpool","activerecord::connectionadapters::postgresqladapter","activerecord::connectionadapters::postgresqladapter::columndefinition","activerecord::connectionadapters::postgresqladapter::columnmethods","activerecord::connectionadapters::postgresqladapter::databasestatements","activerecord::connectionadapters::postgresqladapter::oid","activerecord::connectionadapters::postgresqladapter::oid::array","activerecord::connectionadapters::postgresqladapter::oid::bit","activerecord::connectionadapters::postgresqladapter::oid::boolean","activerecord::connectionadapters::postgresqladapter::oid::bytea","activerecord::connectionadapters::postgresqladapter::oid::cidr","activerecord::connectionadapters::postgresqladapter::oid::date","activerecord::connectionadapters::postgresqladapter::oid::decimal","activerecord::connectionadapters::postgresqladapter::oid::float","activerecord::connectionadapters::postgresqladapter::oid::hstore","activerecord::connectionadapters::postgresqladapter::oid::identity","activerecord::connectionadapters::postgresqladapter::oid::integer","activerecord::connectionadapters::postgresqladapter::oid::json","activerecord::connectionadapters::postgresqladapter::oid::money","activerecord::connectionadapters::postgresqladapter::oid::point","activerecord::connectionadapters::postgresqladapter::oid::range","activerecord::connectionadapters::postgresqladapter::oid::time","activerecord::connectionadapters::postgresqladapter::oid::timestamp","activerecord::connectionadapters::postgresqladapter::oid::type","activerecord::connectionadapters::postgresqladapter::oid::typemap","activerecord::connectionadapters::postgresqladapter::oid::vector","activerecord::connectionadapters::postgresqladapter::quoting","activerecord::connectionadapters::postgresqladapter::referentialintegrity","activerecord::connectionadapters::postgresqladapter::schemacreation","activerecord::connectionadapters::postgresqladapter::schemastatements","activerecord::connectionadapters::postgresqladapter::statementpool","activerecord::connectionadapters::postgresqladapter::table","activerecord::connectionadapters::postgresqladapter::tabledefinition","activerecord::connectionadapters::postgresqladapter::utils","activerecord::connectionadapters::postgresqlcolumn","activerecord::connectionadapters::postgresqlcolumn::arrayparser","activerecord::connectionadapters::postgresqlcolumn::cast","activerecord::connectionadapters::querycache","activerecord::connectionadapters::quoting","activerecord::connectionadapters::sqlite3adapter","activerecord::connectionadapters::sqlite3adapter::explainprettyprinter","activerecord::connectionadapters::sqlite3adapter::statementpool","activerecord::connectionadapters::sqlite3adapter::version","activerecord::connectionadapters::schemacache","activerecord::connectionadapters::schemastatements","activerecord::connectionadapters::statementpool","activerecord::connectionadapters::table","activerecord::connectionadapters::tabledefinition","activerecord::connectionadapters::transactionstate","activerecord::connectionhandling","activerecord::connectionnotestablished","activerecord::connectiontimeouterror","activerecord::core","activerecord::core::classmethods","activerecord::countercache","activerecord::countercache::classmethods","activerecord::dangerousattributeerror","activerecord::delegation","activerecord::delegation::classmethods","activerecord::delegation::classmethods::threadsafe","activerecord::dynamicmatchers","activerecord::dynamicmatchers::findby","activerecord::dynamicmatchers::findbybang","activerecord::dynamicmatchers::finder","activerecord::dynamicmatchers::method","activerecord::explain","activerecord::explainsubscriber","activerecord::explainsubscriber::activesupport","activerecord::findermethods","activerecord::fixtureset","activerecord::immutablerelation","activerecord::inheritance","activerecord::inheritance::classmethods","activerecord::integration","activerecord::invalidforeignkey","activerecord::irreversiblemigration","activerecord::locking","activerecord::locking::optimistic","activerecord::locking::optimistic::classmethods","activerecord::locking::pessimistic","activerecord::logsubscriber","activerecord::migration","activerecord::migration::checkpending","activerecord::migration::commandrecorder","activerecord::migration::commandrecorder::straightreversions","activerecord::migrationproxy","activerecord::modelschema","activerecord::modelschema::classmethods","activerecord::multiparameterassignmenterrors","activerecord::nestedattributes","activerecord::nestedattributes::classmethods","activerecord::nestedattributes::toomanyrecords","activerecord::persistence","activerecord::persistence::classmethods","activerecord::preparedstatementinvalid","activerecord::querycache","activerecord::querycache::classmethods","activerecord::querymethods","activerecord::querymethods::wherechain","activerecord::querying","activerecord::railtie","activerecord::railtie::actiondispatch","activerecord::railtie::activesupport","activerecord::railtie::rails","activerecord::readonlyrecord","activerecord::readonlyattributes","activerecord::readonlyattributes::classmethods","activerecord::recordinvalid","activerecord::recordnotdestroyed","activerecord::recordnotfound","activerecord::recordnotsaved","activerecord::recordnotunique","activerecord::reflection","activerecord::reflection::classmethods","activerecord::reflection::macroreflection","activerecord::relation","activerecord::result","activerecord::rollback","activerecord::sqlcounter","activerecord::sanitization","activerecord::sanitization::classmethods","activerecord::schema","activerecord::schemamigration","activerecord::scoping","activerecord::scoping::classmethods","activerecord::scoping::default","activerecord::scoping::default::classmethods","activerecord::scoping::named","activerecord::scoping::named::classmethods","activerecord::serialization","activerecord::serializationtypemismatch","activerecord::spawnmethods","activerecord::staleobjecterror","activerecord::statementcache","activerecord::statementinvalid","activerecord::store","activerecord::store::classmethods","activerecord::tasks","activerecord::tasks::databasetasks","activerecord::testfixtures","activerecord::testfixtures::classmethods","activerecord::throwresult","activerecord::timestamp","activerecord::transactionisolationerror","activerecord::transactions","activerecord::transactions::classmethods","activerecord::translation","activerecord::unknownattributeerror","activerecord::unknownprimarykey","activerecord::validations","activerecord::validations::classmethods","activerecord::wrappeddatabaseexception","activesupport","mysql","mysql::field","mysql::result","mysql::stmt","mysql::time","activemodel::name#!~()","activemodel::name#<=>()","activerecord::connectionadapters::sqlite3adapter::version#<=>()","activerecord::core#<=>()","activemodel::name#==()","activerecord::core#==()","activerecord::reflection::macroreflection#==()","activerecord::relation#==()","activemodel::name#===()","activerecord::core::classmethods#===()","activemodel::name#=~()","activemodel::errors#[]()","activerecord::attributemethods#[]()","activerecord::connectionadapters::mysqladapter::statementpool#[]()","activerecord::connectionadapters::postgresqladapter::oid::typemap#[]()","activerecord::connectionadapters::postgresqladapter::statementpool#[]()","activerecord::connectionadapters::sqlite3adapter::statementpool#[]()","activerecord::connectionadapters::statementpool#[]()","activerecord::connectionadapters::tabledefinition#[]()","activerecord::fixtureset#[]()","activerecord::result#[]()","activemodel::errors#[]=()","activerecord::attributemethods#[]=()","activerecord::connectionadapters::mysqladapter::statementpool#[]=()","activerecord::connectionadapters::postgresqladapter::oid::typemap#[]=()","activerecord::connectionadapters::postgresqladapter::statementpool#[]=()","activerecord::connectionadapters::sqlite3adapter::statementpool#[]=()","activerecord::connectionadapters::statementpool#[]=()","activerecord::fixtureset#[]=()","activerecord::readonlyattributes#_attr_readonly()","activerecord::store::classmethods#_store_accessors_module()","activerecord::inheritance::classmethods#abstract_class?()","activerecord::connectionadapters::abstractadapter::schemacreation#accept()","activerecord::nestedattributes::classmethods#accepts_nested_attributes_for()","activerecord::connectionadapters::abstractadapter#active?()","activerecord::connectionadapters::mysql2adapter#active?()","activerecord::connectionadapters::mysqladapter#active?()","activerecord::connectionadapters::postgresqladapter#active?()","activerecord::connectionadapters::sqlite3adapter#active?()","activerecord::connectionadapters::connectionpool#active_connection?()","activerecord::connectionadapters::connectionhandler#active_connections?()","activerecord::connectionadapters::abstractadapter#adapter_name()","activerecord::connectionadapters::postgresqladapter#adapter_name()","activemodel::errors#add()","activerecord::connectionadapters::connectionpool::queue#add()","activerecord::connectionadapters::schemacache#add()","activerecord::connectionadapters::schemastatements#add_belongs_to()","activerecord::connectionadapters::postgresqladapter::schemastatements#add_column()","activerecord::connectionadapters::schemastatements#add_column()","activerecord::connectionadapters::abstractmysqladapter#add_column_position!()","activerecord::connectionadapters::abstractmysqladapter#add_column_sql()","actionmailer::deliverymethods::classmethods#add_delivery_method()","activerecord::connectionadapters::schemastatements#add_index()","activerecord::connectionadapters::abstractmysqladapter#add_index_length()","activerecord::connectionadapters::schemastatements#add_index_options()","activerecord::connectionadapters::schemastatements#add_index_sort_order()","activerecord::connectionadapters::abstractmysqladapter#add_index_sql()","activemodel::errors#add_on_blank()","activemodel::errors#add_on_empty()","activerecord::connectionadapters::schemastatements#add_reference()","activerecord::connectionadapters::schemastatements#add_timestamps()","activerecord::connectionadapters::abstractmysqladapter#add_timestamps_sql()","activerecord::transactions#add_to_transaction()","activerecord::connectionadapters::databasestatements#add_transaction_record()","activemodel::errors#added?()","activerecord::transactions::classmethods#after_commit()","activerecord::transactions::classmethods#after_rollback()","activerecord::testfixtures#after_teardown()","activemodel::validations::callbacks::classmethods#after_validation()","activemodel::attributemethods::classmethods#alias_attribute()","activerecord::connectionadapters::mysqladapter::fields::alias_type()","activerecord::connectionadapters::postgresqladapter::oid::alias_type()","actionmailer::collector#all()","activerecord::scoping::named::classmethods#all()","activerecord::connectionadapters::databaselimits#allowed_index_name_length()","activerecord::connectionadapters::sqlite3adapter#allowed_index_name_length()","activerecord::migration#announce()","actionmailer::collector#any()","activerecord::associations::collectionproxy#any?()","activerecord::relation#any?()","activerecord::connectionadapters::connectionpool::queue#any_waiting?()","activerecord::findermethods#apply_join_dependency()","activerecord::querymethods#arel()","activerecord::core::classmethods#arel_engine()","activerecord::core::classmethods#arel_table()","activerecord::connectionadapters::postgresqlcolumn::cast#array_to_string()","activemodel::errors#as_json()","activemodel::serializers::json#as_json()","actionmailer::testhelper#assert_emails()","actionmailer::testhelper#assert_no_emails()","activerecord::attributeassignment#assign_attributes()","activerecord::connectionadapters::schemastatements#assume_migrated_upto_version()","actionmailer::base#attachments()","actionmailer::mailhelper#attachments()","activerecord::readonlyattributes::classmethods#attr_readonly()","activerecord::attributemethods#attribute_for_inspect()","activemodel::validations::classmethods#attribute_method?()","activerecord::attributemethods::classmethods#attribute_method?()","activerecord::attributemethods::primarykey#attribute_method?()","activemodel::attributemethods::classmethods#attribute_method_affix()","activemodel::attributemethods::classmethods#attribute_method_prefix()","activemodel::attributemethods::classmethods#attribute_method_suffix()","activemodel::attributemethods#attribute_missing()","activerecord::attributemethods#attribute_names()","activerecord::attributemethods::classmethods#attribute_names()","activerecord::attributemethods#attribute_present?()","activerecord::attributemethods#attributes()","activerecord::attributeassignment#attributes=()","activerecord::attributemethods::beforetypecast#attributes_before_type_cast()","activerecord::dynamicmatchers::finder#attributes_hash()","activemodel::securepassword::instancemethodsonactivation#authenticate()","activerecord::calculations#average()","activerecord::inheritance::classmethods#base_class()","activerecord::migrationproxy#basename()","activerecord::persistence#becomes()","activerecord::persistence#becomes!()","activerecord::testfixtures#before_setup()","activemodel::validations::callbacks::classmethods#before_validation()","activerecord::connectionadapters::abstractmysqladapter#begin_db_transaction()","activerecord::connectionadapters::databasestatements#begin_db_transaction()","activerecord::connectionadapters::postgresqladapter::databasestatements#begin_db_transaction()","activerecord::connectionadapters::abstractmysqladapter#begin_isolated_db_transaction()","activerecord::connectionadapters::databasestatements#begin_isolated_db_transaction()","activerecord::connectionadapters::postgresqladapter::databasestatements#begin_isolated_db_transaction()","activerecord::associations::classmethods#belongs_to()","activerecord::connectionadapters::table#belongs_to()","activerecord::connectionadapters::tabledefinition#belongs_to()","activerecord::querymethods#bind()","activemodel::errors#blank?()","activerecord::relation#blank?()","actionmailer::mailhelper#block_format()","activerecord::dynamicmatchers::finder#body()","activerecord::dynamicmatchers::method#body()","activerecord::associations::collectionproxy#build()","activerecord::relation#build()","activerecord::querymethods#build_arel()","activerecord::connectionadapters::querycache#cache()","activerecord::querycache::classmethods#cache()","activerecord::attributemethods::read::classmethods#cache_attribute?()","activerecord::attributemethods::read::classmethods#cache_attributes()","activerecord::fixtureset::cache_fixtures()","activerecord::fixtureset::cache_for_connection()","activerecord::integration#cache_key()","activerecord::attributemethods::read::classmethods#cached_attributes()","activerecord::fixtureset::cached_fixtures()","activerecord::calculations#calculate()","activerecord::connectionadapters::connectionmanagement#call()","activerecord::migration::checkpending#call()","activerecord::querycache#call()","activerecord::sqlcounter#call()","activerecord::connectionadapters::abstractadapter#case_insensitive_comparison()","activerecord::connectionadapters::abstractmysqladapter#case_insensitive_comparison()","activerecord::connectionadapters::databasestatements#case_sensitive_equality_operator()","activerecord::connectionadapters::abstractadapter#case_sensitive_modifier()","activerecord::connectionadapters::abstractmysqladapter#case_sensitive_modifier()","activerecord::connectionadapters::table#change()","activerecord::connectionadapters::postgresqladapter::schemastatements#change_column()","activerecord::connectionadapters::schemastatements#change_column()","activerecord::connectionadapters::abstractmysqladapter#change_column_default()","activerecord::connectionadapters::postgresqladapter::schemastatements#change_column_default()","activerecord::connectionadapters::schemastatements#change_column_default()","activerecord::connectionadapters::abstractmysqladapter#change_column_null()","activerecord::connectionadapters::postgresqladapter::schemastatements#change_column_null()","activerecord::connectionadapters::sqlite3adapter#change_column_null()","activerecord::connectionadapters::schemastatements#change_column_null()","activerecord::connectionadapters::abstractmysqladapter#change_column_sql()","activerecord::connectionadapters::table#change_default()","activerecord::connectionadapters::schemastatements#change_table()","activerecord::migration::commandrecorder#change_table()","activemodel::dirty#changed()","activemodel::dirty#changed?()","activemodel::dirty#changed_attributes()","activerecord::autosaveassociation#changed_for_autosave?()","activemodel::dirty#changes()","activerecord::connectionadapters::abstractmysqladapter#charset()","activerecord::tasks::databasetasks#charset()","activerecord::tasks::databasetasks#charset_current()","activerecord::migration::check_pending!()","activerecord::connectionadapters::connectionpool#checkin()","activerecord::connectionadapters::connectionpool#checkout()","activerecord::connectionadapters::postgresqladapter::columnmethods#cidr()","activerecord::connectionadapters::postgresqlcolumn::cast#cidr_to_string()","activerecord::reflection::macroreflection#class_name()","activemodel::errors#clear()","activerecord::connectionadapters::connectionpool::queue#clear()","activerecord::connectionadapters::mysqladapter::statementpool#clear()","activerecord::connectionadapters::postgresqladapter::oid::typemap#clear()","activerecord::connectionadapters::postgresqladapter::statementpool#clear()","activerecord::connectionadapters::sqlite3adapter::statementpool#clear()","activerecord::connectionadapters::statementpool#clear()","activerecord::connectionadapters::schemacache#clear!()","activerecord::connectionadapters::connectionhandler#clear_active_connections!()","activerecord::connectionadapters::connectionhandler#clear_all_connections!()","activerecord::connectionadapters::abstractadapter#clear_cache!()","activerecord::connectionadapters::mysqladapter#clear_cache!()","activerecord::connectionadapters::postgresqladapter#clear_cache!()","activerecord::connectionadapters::sqlite3adapter#clear_cache!()","activerecord::sqlcounter::clear_log()","activerecord::connectionadapters::querycache#clear_query_cache()","activerecord::connectionadapters::connectionhandler#clear_reloadable_connections!()","activerecord::connectionadapters::connectionpool#clear_reloadable_connections!()","activerecord::connectionadapters::schemacache#clear_table_cache!()","activemodel::validations::classmethods#clear_validators!()","activerecord::connectionadapters::mysqladapter#client_encoding()","activerecord::connectionadapters::postgresqladapter::schemastatements#client_min_messages()","activerecord::connectionadapters::postgresqladapter::schemastatements#client_min_messages=()","activerecord::core#clone()","activerecord::connectionadapters::abstractadapter#close()","activerecord::connectionadapters::abstractmysqladapter#collation()","activerecord::connectionadapters::postgresqladapter::schemastatements#collation()","activerecord::tasks::databasetasks#collation()","activerecord::tasks::databasetasks#collation_current()","activerecord::connectionadapters::postgresqladapter::tabledefinition#column()","activerecord::connectionadapters::table#column()","activerecord::connectionadapters::tabledefinition#column()","activerecord::locking::optimistic::classmethods#column_defaults()","activerecord::modelschema::classmethods#column_defaults()","activerecord::connectionadapters::schemastatements#column_exists?()","activerecord::connectionadapters::table#column_exists?()","activerecord::attributemethods#column_for_attribute()","activerecord::connectionadapters::databaselimits#column_name_length()","activerecord::modelschema::classmethods#column_names()","activerecord::connectionadapters::columndumper#column_spec()","activerecord::connectionadapters::postgresqladapter::schemastatements#columns()","activerecord::connectionadapters::schemacache#columns()","activerecord::connectionadapters::schemastatements#columns()","activerecord::connectionadapters::tabledefinition#columns()","activerecord::modelschema::classmethods#columns()","activerecord::connectionadapters::schemastatements#columns_for_remove()","activerecord::connectionadapters::schemacache#columns_hash()","activerecord::modelschema::classmethods#columns_hash()","activerecord::connectionadapters::databaselimits#columns_per_multicolumn_index()","activerecord::connectionadapters::databaselimits#columns_per_table()","activerecord::connectionadapters::databasestatements#commit_db_transaction()","activerecord::connectionadapters::postgresqladapter::databasestatements#commit_db_transaction()","activerecord::connectionadapters::transactionstate#committed?()","activerecord::aggregations::classmethods#composed_of()","activerecord::inheritance::classmethods#compute_type()","activerecord::associations::collectionproxy#concat()","activerecord::connectionadapters::connectionhandler#connected?()","activerecord::connectionadapters::connectionpool#connected?()","activerecord::connectionhandling#connected?()","activerecord::connectionadapters::connectionpool#connection()","activerecord::connectionhandling#connection()","activerecord::core#connection()","activerecord::migration#connection()","activerecord::connectionhandling#connection_config()","activerecord::core#connection_handler()","activerecord::core::connection_handler()","activerecord::core::connection_handler=()","activerecord::connectionhandling#connection_id()","activerecord::connectionhandling#connection_id=()","activerecord::connectionhandling#connection_pool()","activerecord::connectionadapters::connectionhandler#connection_pool_list()","activerecord::connectionadapters::connectionhandler#connection_pools()","activerecord::findermethods#construct_join_dependency_for_association_find()","activerecord::findermethods#construct_limited_ids_condition()","activerecord::findermethods#construct_relation_for_association_calculations()","activerecord::findermethods#construct_relation_for_association_find()","activerecord::modelschema::classmethods#content_columns()","actionmailer::base::controller_path()","activerecord::migration#copy()","activemodel::errors#count()","activerecord::associations::collectionproxy#count()","activerecord::calculations#count()","activerecord::querying#count_by_sql()","activerecord::associations::collectionproxy#create()","activerecord::connectionadapters::mysql2adapter#create()","activerecord::connectionadapters::postgresqladapter::databasestatements#create()","activerecord::persistence::classmethods#create()","activerecord::relation#create()","activerecord::tasks::databasetasks#create()","activerecord::associations::collectionproxy#create!()","activerecord::relation#create!()","activerecord::validations::classmethods#create!()","activerecord::tasks::databasetasks#create_all()","activerecord::tasks::databasetasks#create_current()","activerecord::connectionadapters::abstractmysqladapter#create_database()","activerecord::connectionadapters::postgresqladapter::schemastatements#create_database()","activerecord::tasks::databasetasks#create_database_url()","activerecord::fixtureset::create_fixtures()","activerecord::connectionadapters::schemastatements#create_join_table()","activerecord::reflection::classmethods#create_reflection()","activerecord::connectionadapters::abstractadapter#create_savepoint()","activerecord::connectionadapters::abstractmysqladapter#create_savepoint()","activerecord::connectionadapters::postgresqladapter::databasestatements#create_savepoint()","activerecord::connectionadapters::sqlite3adapter#create_savepoint()","activerecord::connectionadapters::postgresqladapter::schemastatements#create_schema()","activerecord::connectionadapters::schemastatements#create_table()","activerecord::schemamigration::create_table()","activerecord::querymethods#create_with()","activerecord::connectionadapters::postgresqladapter::schemastatements#ctype()","activerecord::tasks::databasetasks#current_config()","activerecord::connectionadapters::abstractmysqladapter#current_database()","activerecord::connectionadapters::postgresqladapter::schemastatements#current_database()","activerecord::connectionadapters::abstractadapter#current_savepoint_name()","activerecord::connectionadapters::postgresqladapter::schemastatements#current_schema()","actionmailer::collector#custom()","activerecord::attributemethods::primarykey::classmethods#dangerous_attribute_method?()","activerecord::connectionadapters::postgresqladapter::columnmethods#daterange()","activerecord::persistence#decrement()","activerecord::persistence#decrement!()","activerecord::countercache::classmethods#decrement_counter()","activerecord::connectionadapters::abstractadapter#decrement_open_transactions()","actionmailer::base::default()","actionmailer::base#default_i18n_subject()","actionmailer::base::default_options=()","activerecord::connectionadapters::sqlite3adapter#default_primary_key_type()","activerecord::scoping::default::classmethods#default_scope()","activerecord::scoping::default::default_scopes?()","activerecord::connectionadapters::databasestatements#default_sequence_name()","activerecord::dynamicmatchers::method#define()","activerecord::schema::define()","activemodel::attributemethods::classmethods#define_attribute_method()","activemodel::attributemethods::classmethods#define_attribute_methods()","activerecord::attributemethods::primarykey::classmethods#define_method_attribute()","activerecord::attributemethods::read::classmethods#define_method_attribute()","activerecord::attributemethods::timezoneconversion::classmethods#define_method_attribute=()","activerecord::attributemethods::write::classmethods#define_method_attribute=()","activemodel::callbacks#define_model_callbacks()","activemodel::errors#delete()","activerecord::associations::collectionproxy#delete()","activerecord::connectionadapters::connectionpool::queue#delete()","activerecord::connectionadapters::databasestatements#delete()","activerecord::connectionadapters::mysqladapter::statementpool#delete()","activerecord::connectionadapters::postgresqladapter::statementpool#delete()","activerecord::connectionadapters::statementpool#delete()","activerecord::persistence#delete()","activerecord::relation#delete()","activerecord::associations::collectionproxy#delete_all()","activerecord::relation#delete_all()","activerecord::connectionadapters::databasestatements#delete_sql()","actionmailer::logsubscriber#deliver()","activerecord::inheritance::classmethods#descends_from_active_record?()","activerecord::associations::collectionproxy#destroy()","activerecord::persistence#destroy()","activerecord::relation#destroy()","activerecord::persistence#destroy!()","activerecord::associations::collectionproxy#destroy_all()","activerecord::relation#destroy_all()","activerecord::persistence#destroyed?()","activerecord::autosaveassociation#destroyed_by_association()","activerecord::autosaveassociation#destroyed_by_association=()","actionmailer::testcase::behavior::classmethods#determine_default_mailer()","activerecord::connectionadapters::querycache::dirties_query_cache()","activerecord::migration::disable_ddl_transaction!()","activerecord::connectionadapters::abstractadapter#disable_extension()","activerecord::connectionadapters::postgresqladapter#disable_extension()","activerecord::connectionadapters::querycache#disable_query_cache!()","activerecord::connectionadapters::abstractadapter#disable_referential_integrity()","activerecord::connectionadapters::abstractadapter#disconnect!()","activerecord::connectionadapters::connectionpool#disconnect!()","activerecord::connectionadapters::mysql2adapter#disconnect!()","activerecord::connectionadapters::mysqladapter#disconnect!()","activerecord::connectionadapters::postgresqladapter#disconnect!()","activerecord::connectionadapters::sqlite3adapter#disconnect!()","activerecord::associations::collectionproxy#distinct()","activerecord::connectionadapters::schemastatements#distinct()","activerecord::querymethods#distinct()","activerecord::migration#down()","activerecord::tasks::databasetasks#drop()","activerecord::tasks::databasetasks#drop_all()","activerecord::tasks::databasetasks#drop_current()","activerecord::tasks::databasetasks#drop_database_url()","activerecord::connectionadapters::schemastatements#drop_join_table()","activerecord::connectionadapters::postgresqladapter::schemastatements#drop_schema()","activerecord::connectionadapters::schemastatements#drop_table()","activerecord::schemamigration::drop_table()","activerecord::core#dup()","activemodel::errors#each()","activerecord::connectionadapters::mysqladapter::statementpool#each()","activerecord::connectionadapters::postgresqladapter::statementpool#each()","activerecord::connectionadapters::sqlite3adapter::statementpool#each()","activerecord::connectionadapters::statementpool#each()","activerecord::fixtureset#each()","activerecord::result#each()","activerecord::querymethods#eager_load()","activerecord::relation#eager_loading?()","activemodel::errors#empty?()","activerecord::associations::collectionproxy#empty?()","activerecord::relation#empty?()","activerecord::result#empty?()","activerecord::connectionadapters::abstractmysqladapter#empty_insert_statement_value()","activerecord::connectionadapters::databasestatements#empty_insert_statement_value()","activerecord::connectionadapters::abstractmysqladapter::emulate_booleans()","activerecord::connectionadapters::abstractadapter#enable_extension()","activerecord::connectionadapters::postgresqladapter#enable_extension()","activerecord::connectionadapters::querycache#enable_query_cache!()","activerecord::core#encode_with()","activerecord::connectionadapters::postgresqladapter::schemastatements#encoding()","activerecord::connectionadapters::sqlite3adapter#encoding()","activerecord::testfixtures#enlist_fixture_connections()","activemodel::name#eql?()","activerecord::core#eql?()","activerecord::connectionadapters::mysql2adapter#error_number()","activemodel::validations#errors()","activerecord::connectionadapters::postgresqladapter::quoting#escape_bytea()","activerecord::connectionadapters::connectionhandler#establish_connection()","activerecord::connectionhandling#establish_connection()","activerecord::spawnmethods#except()","activerecord::connectionadapters::databasestatements#exec_delete()","activerecord::connectionadapters::mysql2adapter#exec_delete()","activerecord::connectionadapters::mysqladapter#exec_delete()","activerecord::connectionadapters::postgresqladapter::databasestatements#exec_delete()","activerecord::connectionadapters::sqlite3adapter#exec_delete()","activerecord::connectionadapters::databasestatements#exec_insert()","activerecord::connectionadapters::mysql2adapter#exec_insert()","activerecord::connectionadapters::postgresqladapter::databasestatements#exec_insert()","activerecord::migration#exec_migration()","activerecord::connectionadapters::databasestatements#exec_query()","activerecord::connectionadapters::mysql2adapter#exec_query()","activerecord::connectionadapters::mysqladapter#exec_query()","activerecord::connectionadapters::postgresqladapter::databasestatements#exec_query()","activerecord::connectionadapters::sqlite3adapter#exec_query()","activerecord::connectionadapters::databasestatements#exec_update()","activerecord::connectionadapters::mysql2adapter#exec_update()","activerecord::connectionadapters::mysqladapter#exec_update()","activerecord::connectionadapters::postgresqladapter::databasestatements#exec_update()","activerecord::connectionadapters::sqlite3adapter#exec_update()","activerecord::connectionadapters::mysql2adapter#exec_without_stmt()","activerecord::connectionadapters::abstractmysqladapter#execute()","activerecord::connectionadapters::databasestatements#execute()","activerecord::connectionadapters::mysql2adapter#execute()","activerecord::connectionadapters::postgresqladapter::databasestatements#execute()","activerecord::statementcache#execute()","activerecord::connectionadapters::mysqladapter#execute_and_free()","activerecord::findermethods#exists?()","activerecord::sanitization::classmethods#expand_hash_conditions_for_aggregates()","activerecord::connectionadapters::abstractadapter#expire()","activerecord::connectionadapters::mysql2adapter#explain()","activerecord::connectionadapters::postgresqladapter::databasestatements#explain()","activerecord::connectionadapters::sqlite3adapter#explain()","activerecord::relation#explain()","activerecord::querymethods#extending()","activerecord::connectionadapters::postgresqladapter#extension_enabled?()","activerecord::connectionadapters::abstractadapter#extensions()","activerecord::connectionadapters::postgresqladapter#extensions()","activerecord::connectionadapters::postgresqladapter::oid::range#extract_bounds()","activerecord::connectionadapters::postgresqladapter::utils#extract_schema_and_table()","activerecord::connectionadapters::postgresqlcolumn::extract_value_from_default()","activerecord::connectionadapters::postgresqladapter::oid::typemap#fetch()","activerecord::associations::collectionproxy#find()","activerecord::findermethods#find()","activerecord::findermethods#find_by()","activerecord::findermethods#find_by!()","activerecord::querying#find_by_sql()","activerecord::batches#find_each()","activerecord::findermethods#find_first()","activerecord::batches#find_in_batches()","activerecord::findermethods#find_last()","activerecord::findermethods#find_one()","activerecord::relation#find_or_create_by()","activerecord::relation#find_or_create_by!()","activerecord::relation#find_or_initialize_by()","activerecord::findermethods#find_some()","activerecord::findermethods#find_take()","activerecord::connectionadapters::mysqladapter::fields::find_type()","activerecord::findermethods#find_with_associations()","activerecord::findermethods#find_with_ids()","activerecord::dynamicmatchers::findby#finder()","activerecord::dynamicmatchers::findbybang#finder()","activerecord::dynamicmatchers::finder#finder()","activerecord::associations::collectionproxy#first()","activerecord::findermethods#first()","activerecord::findermethods#first!()","activerecord::fixtureset::fixture_is_cached?()","activerecord::testfixtures::classmethods#fixtures()","actionmailer::mailhelper#format_paragraph()","activerecord::core#freeze()","activerecord::querymethods#from()","activemodel::serializers::json#from_json()","activemodel::serializers::xml#from_xml()","activerecord::core#frozen?()","activemodel::errors#full_message()","activemodel::errors#full_messages()","activemodel::errors#full_messages_for()","activemodel::errors#generate_message()","activerecord::core::classmethods#generated_feature_methods()","activemodel::errors#get()","activerecord::querymethods#group()","activerecord::associations::classmethods#has_and_belongs_to_many()","activerecord::attributemethods#has_attribute?()","activemodel::errors#has_key?()","activerecord::associations::classmethods#has_many()","activerecord::associations::classmethods#has_one()","activemodel::securepassword::classmethods#has_secure_password()","activerecord::core#hash()","activerecord::querymethods#having()","actionmailer::base#headers()","activerecord::connectionadapters::postgresqladapter::columnmethods#hstore()","activerecord::connectionadapters::postgresqlcolumn::cast#hstore_to_string()","activemodel::name#human()","activemodel::translation#human_attribute_name()","activemodel::translation#i18n_scope()","activerecord::attributemethods::primarykey#id()","activerecord::attributemethods::primarykey#id=()","activerecord::attributemethods::primarykey#id?()","activerecord::attributemethods::primarykey#id_before_type_cast()","activerecord::fixtureset::identify()","activerecord::logsubscriber#identity()","activerecord::calculations#ids()","activerecord::connectionadapters::databaselimits#in_clause_length()","activemodel::errors#include?()","activerecord::associations::collectionproxy#include?()","activerecord::querymethods#includes()","activerecord::persistence#increment()","activerecord::persistence#increment!()","activerecord::countercache::classmethods#increment_counter()","activerecord::connectionadapters::abstractadapter#increment_open_transactions()","activerecord::connectionadapters::table#index()","activerecord::connectionadapters::tabledefinition#index()","activerecord::connectionadapters::abstractadapter#index_algorithms()","activerecord::connectionadapters::abstractmysqladapter#index_algorithms()","activerecord::connectionadapters::postgresqladapter#index_algorithms()","activerecord::connectionadapters::schemastatements#index_exists?()","activerecord::connectionadapters::table#index_exists?()","activerecord::schemamigration::index_name()","activerecord::connectionadapters::schemastatements#index_name_exists?()","activerecord::connectionadapters::schemastatements#index_name_for_remove()","activerecord::connectionadapters::databaselimits#index_name_length()","activerecord::connectionadapters::postgresqladapter::schemastatements#index_name_length()","activerecord::connectionadapters::postgresqladapter::schemastatements#indexes()","activerecord::connectionadapters::databaselimits#indexes_per_table()","activerecord::connectionadapters::postgresqladapter::columnmethods#inet()","activerecord::connectionadapters::postgresqladapter::oid::range#infinity()","activerecord::connectionadapters::postgresqladapter::oid::range#infinity?()","activerecord::modelschema::classmethods#inheritance_column()","activerecord::modelschema::classmethods#inheritance_column=()","activerecord::core#init_with()","activerecord::relation#initialize_copy()","activerecord::result#initialize_copy()","activerecord::core::classmethods#initialize_generated_modules()","activerecord::connectionadapters::mysql2adapter#initialize_schema_migrations_table()","activerecord::connectionadapters::schemastatements#initialize_schema_migrations_table()","actionmailer::testcase::behavior#initialize_test_deliveries()","activerecord::connectionadapters::databasestatements#insert()","activerecord::relation#insert()","activerecord::connectionadapters::databasestatements#insert_fixture()","activerecord::connectionadapters::databasestatements#insert_sql()","activerecord::connectionadapters::mysql2adapter#insert_sql()","activerecord::connectionadapters::postgresqladapter::databasestatements#insert_sql()","activerecord::core#inspect()","activerecord::core::classmethods#inspect()","activerecord::relation#inspect()","activerecord::attributemethods::classmethods#instance_method_already_implemented?()","activerecord::persistence::classmethods#instantiate()","activerecord::fixtureset::instantiate_all_loaded_fixtures()","activerecord::fixtureset::instantiate_fixtures()","activerecord::connectionadapters::postgresqladapter::columnmethods#int4range()","activerecord::connectionadapters::postgresqladapter::columnmethods#int8range()","activemodel::validations#invalid?()","activerecord::migration::commandrecorder#inverse_of()","activerecord::relation#joined_includes_values()","activerecord::querymethods#joins()","activerecord::connectionadapters::databaselimits#joins_per_query()","activerecord::connectionadapters::postgresqladapter::columnmethods#json()","activerecord::connectionadapters::postgresqlcolumn::cast#json_to_string()","activerecord::connectionadapters::mysqladapter::statementpool#key?()","activerecord::connectionadapters::postgresqladapter::oid::typemap#key?()","activerecord::connectionadapters::postgresqladapter::statementpool#key?()","activerecord::connectionadapters::sqlite3adapter::statementpool#key?()","activerecord::connectionadapters::statementpool#key?()","activemodel::errors#keys()","activemodel::validator::kind()","activemodel::validator#kind()","activerecord::reflection::macroreflection#klass()","activerecord::associations::collectionproxy#last()","activerecord::findermethods#last()","activerecord::result#last()","activerecord::findermethods#last!()","activerecord::connectionadapters::databasestatements#last_inserted_id()","activerecord::connectionadapters::mysql2adapter#last_inserted_id()","activerecord::connectionadapters::mysqladapter#last_inserted_id()","activerecord::connectionadapters::sqlite3adapter#last_inserted_id()","activerecord::connectionadapters::abstractadapter#lease()","activerecord::associations::collectionproxy#length()","activerecord::connectionadapters::mysqladapter::statementpool#length()","activerecord::connectionadapters::postgresqladapter::statementpool#length()","activerecord::connectionadapters::sqlite3adapter::statementpool#length()","activerecord::connectionadapters::statementpool#length()","activerecord::querymethods#limit()","activerecord::connectionadapters::abstractmysqladapter#limited_update_conditions()","activerecord::connectionadapters::databasestatements#limited_update_conditions()","activerecord::relation#load()","activerecord::tasks::databasetasks#load_seed()","activerecord::associations::collectionproxy#load_target()","activerecord::associations::collectionproxy#loaded?()","activerecord::querymethods#lock()","activerecord::locking::pessimistic#lock!()","activerecord::locking::optimistic::classmethods#locking_column()","activerecord::locking::optimistic::classmethods#locking_column=()","activerecord::locking::optimistic::classmethods#locking_enabled?()","activerecord::connectionadapters::abstractadapter#log()","actionmailer::logsubscriber#logger()","activerecord::logsubscriber#logger()","activemodel::translation#lookup_ancestors()","activerecord::connectionadapters::postgresqladapter::columnmethods#ltree()","activerecord::connectionadapters::postgresqladapter::columnmethods#macaddr()","actionmailer::base#mail()","actionmailer::mailhelper#mailer()","actionmailer::testcase::behavior::classmethods#mailer_class()","actionmailer::base::mailer_name()","actionmailer::base#mailer_name()","activerecord::associations::collectionproxy#many?()","activerecord::relation#many?()","activerecord::autosaveassociation#mark_for_destruction()","activerecord::autosaveassociation#marked_for_destruction?()","activerecord::connectionadapters::schemacache#marshal_dump()","activerecord::connectionadapters::schemacache#marshal_load()","activerecord::dynamicmatchers::method::match()","activerecord::calculations#maximum()","activerecord::spawnmethods#merge()","actionmailer::mailhelper#message()","actionmailer::base::method_missing()","activemodel::attributemethods#method_missing()","activerecord::migration#method_missing()","activerecord::migration::migrate()","activerecord::migration#migrate()","activerecord::connectionadapters::columndumper#migration_keys()","activerecord::connectionadapters::postgresqladapter#migration_keys()","activerecord::schema#migrations_paths()","activerecord::calculations#minimum()","activemodel::naming#model_name()","activerecord::migrationproxy#mtime()","activerecord::connectionadapters::abstractmysqladapter#native_database_types()","activerecord::connectionadapters::schemastatements#native_database_types()","actionmailer::base::new()","actionmailer::collector::new()","actionmailer::noninferrablemailererror::new()","activemodel::errors::new()","activemodel::model::new()","activemodel::name::new()","activemodel::validator::new()","activerecord::associationrelation::new()","activerecord::associations::collectionproxy#new()","activerecord::attributeassignmenterror::new()","activerecord::connectionadapters::abstractadapter::schemacreation::new()","activerecord::connectionadapters::abstractmysqladapter::new()","activerecord::connectionadapters::connectionhandler::new()","activerecord::connectionadapters::connectionmanagement::new()","activerecord::connectionadapters::connectionpool::new()","activerecord::connectionadapters::connectionpool::queue::new()","activerecord::connectionadapters::connectionpool::reaper::new()","activerecord::connectionadapters::databasestatements::new()","activerecord::connectionadapters::mysql2adapter::new()","activerecord::connectionadapters::mysqladapter::new()","activerecord::connectionadapters::mysqladapter::statementpool::new()","activerecord::connectionadapters::postgresqladapter::new()","activerecord::connectionadapters::postgresqladapter::oid::array::new()","activerecord::connectionadapters::postgresqladapter::oid::range::new()","activerecord::connectionadapters::postgresqladapter::oid::typemap::new()","activerecord::connectionadapters::postgresqladapter::oid::vector::new()","activerecord::connectionadapters::postgresqladapter::statementpool::new()","activerecord::connectionadapters::sqlite3adapter::new()","activerecord::connectionadapters::sqlite3adapter::statementpool::new()","activerecord::connectionadapters::sqlite3adapter::version::new()","activerecord::connectionadapters::schemacache::new()","activerecord::connectionadapters::statementpool::new()","activerecord::connectionadapters::table::new()","activerecord::connectionadapters::tabledefinition::new()","activerecord::connectionadapters::transactionstate::new()","activerecord::core::new()","activerecord::dynamicmatchers::method::new()","activerecord::fixtureset::new()","activerecord::inheritance::classmethods#new()","activerecord::logsubscriber::new()","activerecord::migration::new()","activerecord::migration::checkpending::new()","activerecord::migration::commandrecorder::new()","activerecord::migrationproxy::new()","activerecord::multiparameterassignmenterrors::new()","activerecord::querycache::new()","activerecord::querymethods::wherechain::new()","activerecord::reflection::macroreflection::new()","activerecord::relation::new()","activerecord::relation#new()","activerecord::result::new()","activerecord::sqlcounter::new()","activerecord::staleobjecterror::new()","activerecord::statementcache::new()","activerecord::statementinvalid::new()","activerecord::unknownprimarykey::new()","activerecord::persistence#new_record?()","activerecord::connectionadapters::postgresqladapter::statementpool#next_key()","activerecord::migration#next_migration_number()","activerecord::querymethods#none()","activerecord::querymethods::wherechain#not()","activerecord::connectionadapters::connectionpool::queue#num_waiting()","activerecord::connectionadapters::postgresqladapter::columnmethods#numrange()","activerecord::logsubscriber#odd?()","activerecord::querymethods#offset()","activerecord::spawnmethods#only()","activerecord::connectionadapters::abstractadapter#open_transactions()","activerecord::connectionadapters::schemastatements#options_include_default?()","activerecord::querymethods#order()","activerecord::connectionadapters::postgresqladapter::databasestatements#outside_transaction?()","activemodel::naming::param_key()","activemodel::securepassword::instancemethodsonactivation#password=()","activemodel::securepassword::instancemethodsonactivation#password_confirmation=()","activerecord::dynamicmatchers::method::pattern()","activemodel::model#persisted?()","activerecord::persistence#persisted?()","activerecord::connectionadapters::abstractmysqladapter#pk_and_sequence_for()","activerecord::calculations#pluck()","activemodel::naming::plural()","activerecord::connectionadapters::postgresqlcolumn::cast#point_to_string()","activerecord::connectionadapters::connectionpool::queue#poll()","activerecord::scoping#populate_with_current_scope_attributes()","activerecord::connectionadapters::postgresqladapter#postgresql_version()","activerecord::connectionadapters::abstractadapter#prefetch_primary_key?()","activerecord::dynamicmatchers::findby::prefix()","activerecord::dynamicmatchers::findbybang::prefix()","activerecord::dynamicmatchers::method::prefix()","activerecord::querymethods#preload()","activerecord::connectionadapters::columndumper#prepare_column_options()","activerecord::connectionadapters::postgresqladapter#prepare_column_options()","activerecord::relation#pretty_print()","activemodel::dirty#previous_changes()","activerecord::attributemethods::primarykey::classmethods#primary_key()","activerecord::connectionadapters::abstractmysqladapter#primary_key()","activerecord::connectionadapters::postgresqladapter::schemastatements#primary_key()","activerecord::connectionadapters::postgresqladapter::tabledefinition#primary_key()","activerecord::connectionadapters::tabledefinition#primary_key()","activerecord::attributemethods::primarykey::classmethods#primary_key=()","activerecord::connectionadapters::schemacache#primary_keys()","activerecord::associationrelation#proxy_association()","activerecord::associations::collectionproxy#proxy_association()","activerecord::tasks::databasetasks#purge()","activerecord::attributemethods::query#query_attribute()","activerecord::connectionadapters::abstractmysqladapter#quote()","activerecord::connectionadapters::quoting#quote()","activerecord::connectionadapters::sqlite3adapter#quote()","activerecord::connectionadapters::quoting#quote_column_name()","activerecord::connectionadapters::mysql2adapter#quote_string()","activerecord::connectionadapters::quoting#quote_string()","activerecord::connectionadapters::postgresqladapter::quoting#quote_table_name()","activerecord::connectionadapters::quoting#quote_table_name()","activerecord::connectionadapters::postgresqladapter::quoting#quote_table_name_for_assignment()","activerecord::connectionadapters::quoting#quote_table_name_for_assignment()","activerecord::connectionadapters::sqlite3adapter#quote_table_name_for_assignment()","activerecord::connectionadapters::abstractmysqladapter#quoted_columns_for_index()","activerecord::connectionadapters::schemastatements#quoted_columns_for_index()","activerecord::connectionadapters::quoting#quoted_date()","activerecord::connectionadapters::abstractmysqladapter#quoted_false()","activerecord::connectionadapters::quoting#quoted_false()","activerecord::sanitization#quoted_id()","activerecord::locking::optimistic::classmethods#quoted_locking_column()","activerecord::attributemethods::primarykey::classmethods#quoted_primary_key()","activerecord::modelschema::classmethods#quoted_table_name()","activerecord::connectionadapters::abstractmysqladapter#quoted_true()","activerecord::connectionadapters::quoting#quoted_true()","activerecord::connectionadapters::postgresqlcolumn::cast#range_to_string()","activerecord::connectionadapters::abstractadapter#raw_connection()","activerecord::attributemethods::write#raw_write_attribute()","activerecord::attributemethods::read#read_attribute()","activerecord::attributemethods::beforetypecast#read_attribute_before_type_cast()","activerecord::store#read_store_attribute()","activerecord::querymethods#readonly()","activerecord::core#readonly!()","activerecord::core#readonly?()","activerecord::readonlyattributes::classmethods#readonly_attributes()","activerecord::connectionadapters::connectionpool#reap()","actionmailer::base::receive()","actionmailer::logsubscriber#receive()","activerecord::connectionadapters::abstractadapter#reconnect!()","activerecord::connectionadapters::mysql2adapter#reconnect!()","activerecord::connectionadapters::mysqladapter#reconnect!()","activerecord::connectionadapters::postgresqladapter#reconnect!()","activerecord::migration::commandrecorder#record()","activerecord::connectionadapters::abstractmysqladapter#recreate_database()","activerecord::connectionadapters::table#references()","activerecord::connectionadapters::tabledefinition#references()","activerecord::querymethods#references()","activerecord::reflection::classmethods#reflect_on_aggregation()","activerecord::reflection::classmethods#reflect_on_all_aggregations()","activerecord::reflection::classmethods#reflect_on_all_associations()","activerecord::reflection::classmethods#reflect_on_all_autosave_associations()","activerecord::reflection::classmethods#reflect_on_association()","actionmailer::base::register_interceptor()","actionmailer::base::register_interceptors()","actionmailer::base::register_observer()","actionmailer::base::register_observers()","activerecord::tasks::databasetasks#register_task()","activerecord::connectionadapters::mysqladapter::fields::register_type()","activerecord::connectionadapters::postgresqladapter::oid::register_type()","activerecord::connectionadapters::postgresqladapter::oid::registered_type?()","activerecord::connectionadapters::connectionpool#release_connection()","activerecord::connectionadapters::abstractadapter#release_savepoint()","activerecord::connectionadapters::abstractmysqladapter#release_savepoint()","activerecord::connectionadapters::postgresqladapter::databasestatements#release_savepoint()","activerecord::connectionadapters::sqlite3adapter#release_savepoint()","activerecord::autosaveassociation#reload()","activerecord::persistence#reload()","activerecord::relation#reload()","activerecord::connectionadapters::connectionpool#remove()","activerecord::connectionadapters::table#remove()","activerecord::connectionadapters::schemastatements#remove_belongs_to()","activerecord::connectionadapters::table#remove_belongs_to()","activerecord::connectionadapters::schemastatements#remove_column()","activerecord::connectionadapters::tabledefinition#remove_column()","activerecord::connectionadapters::abstractmysqladapter#remove_column_sql()","activerecord::connectionadapters::schemastatements#remove_columns()","activerecord::connectionadapters::abstractmysqladapter#remove_columns_sql()","activerecord::connectionadapters::connectionhandler#remove_connection()","activerecord::connectionhandling#remove_connection()","activerecord::connectionadapters::schemastatements#remove_index()","activerecord::connectionadapters::table#remove_index()","activerecord::connectionadapters::abstractmysqladapter#remove_index_sql()","activerecord::connectionadapters::schemastatements#remove_reference()","activerecord::connectionadapters::table#remove_references()","activerecord::connectionadapters::schemastatements#remove_timestamps()","activerecord::connectionadapters::table#remove_timestamps()","activerecord::connectionadapters::abstractmysqladapter#remove_timestamps_sql()","activerecord::connectionadapters::table#rename()","activerecord::connectionadapters::postgresqladapter::schemastatements#rename_column()","activerecord::connectionadapters::schemastatements#rename_column()","activerecord::connectionadapters::schemastatements#rename_column_indexes()","activerecord::connectionadapters::abstractmysqladapter#rename_column_sql()","activerecord::connectionadapters::postgresqladapter::schemastatements#rename_index()","activerecord::connectionadapters::schemastatements#rename_index()","activerecord::connectionadapters::table#rename_index()","activerecord::connectionadapters::abstractmysqladapter#rename_table()","activerecord::connectionadapters::postgresqladapter::schemastatements#rename_table()","activerecord::connectionadapters::sqlite3adapter#rename_table()","activerecord::connectionadapters::schemastatements#rename_table()","activerecord::connectionadapters::schemastatements#rename_table_indexes()","activerecord::logsubscriber#render_bind()","activerecord::querymethods#reorder()","activerecord::associations::collectionproxy#replace()","activerecord::testfixtures::classmethods#require_fixture_classes()","activerecord::connectionadapters::abstractadapter#requires_reloading?()","activerecord::connectionadapters::sqlite3adapter#requires_reloading?()","activerecord::relation#reset()","activerecord::connectionadapters::abstractadapter#reset!()","activerecord::connectionadapters::mysql2adapter#reset!()","activerecord::connectionadapters::mysqladapter#reset!()","activerecord::connectionadapters::postgresqladapter#reset!()","activerecord::fixtureset::reset_cache()","activerecord::modelschema::classmethods#reset_column_information()","activerecord::countercache::classmethods#reset_counters()","activerecord::locking::optimistic::classmethods#reset_locking_column()","activerecord::logsubscriber::reset_runtime()","activerecord::connectionadapters::databasestatements#reset_sequence!()","activemodel::attributemethods#respond_to?()","activerecord::attributemethods#respond_to?()","activemodel::attributemethods#respond_to_without_attributes?()","activerecord::dynamicmatchers::finder#result()","activerecord::connectionhandling#retrieve_connection()","activerecord::connectionadapters::connectionhandler#retrieve_connection_pool()","activerecord::querymethods#reverse_order()","activerecord::migration#reversible()","activerecord::migration#revert()","activerecord::migration::commandrecorder#revert()","activerecord::migration#reverting?()","activerecord::transactions#rollback_active_record_state!()","activerecord::connectionadapters::databasestatements#rollback_db_transaction()","activerecord::connectionadapters::postgresqladapter::databasestatements#rollback_db_transaction()","activerecord::connectionadapters::abstractadapter#rollback_to_savepoint()","activerecord::connectionadapters::abstractmysqladapter#rollback_to_savepoint()","activerecord::connectionadapters::postgresqladapter::databasestatements#rollback_to_savepoint()","activerecord::connectionadapters::sqlite3adapter#rollback_to_savepoint()","activerecord::connectionadapters::transactionstate#rolledback?()","activemodel::naming::route_key()","activerecord::connectionadapters::connectionpool::reaper#run()","activerecord::migration#run()","activerecord::testfixtures#run_in_transaction?()","activerecord::logsubscriber::runtime()","activerecord::logsubscriber::runtime=()","activerecord::sanitization::classmethods#sanitize_conditions()","activerecord::connectionadapters::databasestatements#sanitize_limit()","activerecord::sanitization::classmethods#sanitize_sql()","activerecord::sanitization::classmethods#sanitize_sql_array()","activerecord::sanitization::classmethods#sanitize_sql_for_assignment()","activerecord::sanitization::classmethods#sanitize_sql_for_conditions()","activerecord::sanitization::classmethods#sanitize_sql_hash()","activerecord::sanitization::classmethods#sanitize_sql_hash_for_assignment()","activerecord::sanitization::classmethods#sanitize_sql_hash_for_conditions()","activerecord::persistence#save()","activerecord::validations#save()","activerecord::persistence#save!()","activerecord::validations#save!()","activerecord::migration#say()","activerecord::migration#say_with_time()","activerecord::connectionadapters::abstractadapter#schema_cache=()","activerecord::connectionadapters::abstractadapter#schema_creation()","activerecord::connectionadapters::abstractmysqladapter#schema_creation()","activerecord::connectionadapters::postgresqladapter#schema_creation()","activerecord::connectionadapters::postgresqladapter::schemastatements#schema_exists?()","activerecord::connectionadapters::postgresqladapter::schemastatements#schema_names()","activerecord::connectionadapters::postgresqladapter::schemastatements#schema_search_path()","activerecord::connectionadapters::postgresqladapter::schemastatements#schema_search_path=()","activerecord::associations::collectionproxy#scope()","activerecord::scoping::named::classmethods#scope()","activerecord::relation#scope_for_create()","activerecord::associations::collectionproxy#scoping()","activerecord::relation#scoping()","activerecord::associations::collectionproxy#select()","activerecord::connectionadapters::databasestatements#select()","activerecord::connectionadapters::mysql2adapter#select()","activerecord::querymethods#select()","activerecord::connectionadapters::databasestatements#select_all()","activerecord::connectionadapters::querycache#select_all()","activerecord::connectionadapters::databasestatements#select_one()","activerecord::connectionadapters::databasestatements#select_rows()","activerecord::connectionadapters::mysql2adapter#select_rows()","activerecord::connectionadapters::mysqladapter#select_rows()","activerecord::connectionadapters::postgresqladapter::databasestatements#select_rows()","activerecord::connectionadapters::sqlite3adapter#select_rows()","activerecord::connectionadapters::databasestatements#select_value()","activerecord::connectionadapters::databasestatements#select_values()","activerecord::modelschema::classmethods#sequence_name()","activerecord::modelschema::classmethods#sequence_name=()","activerecord::connectionadapters::postgresqladapter::schemastatements#serial_sequence()","activemodel::serialization#serializable_hash()","activerecord::serialization#serializable_hash()","activerecord::attributemethods::serialization::classmethods#serialize()","activerecord::attributemethods::serialization#serialized_attributes()","activerecord::attributemethods::serialization::classmethods#serialized_attributes()","activerecord::connectionadapters::postgresqladapter#session_auth=()","activemodel::errors#set()","actionmailer::base#set_content_type()","actionmailer::testcase::behavior#set_expected_mail()","activerecord::testfixtures::classmethods#set_fixture_class()","activerecord::attributemethods::classmethods::set_name_cache()","activerecord::connectionadapters::postgresqladapter#set_standard_conforming_strings()","activerecord::connectionadapters::transactionstate#set_state()","activerecord::testfixtures::classmethods#setup_fixture_accessors()","activerecord::testfixtures#setup_fixtures()","activerecord::connectionadapters::abstractmysqladapter#show_variable()","activerecord::dynamicmatchers::finder#signature()","activemodel::naming::singular()","activemodel::naming::singular_route_key()","activemodel::errors#size()","activerecord::associations::collectionproxy#size()","activerecord::connectionadapters::schemacache#size()","activerecord::fixtureset#size()","activerecord::relation#size()","activerecord::core#slice()","activerecord::logsubscriber#sql()","activerecord::connectionadapters::databasestatements#sql_for_insert()","activerecord::connectionadapters::postgresqladapter::databasestatements#sql_for_insert()","activerecord::connectionadapters::databaselimits#sql_query_length()","activerecord::connectionadapters::sqlite3adapter#sqlite_version()","activerecord::inheritance::classmethods#sti_name()","activerecord::store::classmethods#store()","activerecord::store::classmethods#store_accessor()","activerecord::connectionadapters::abstractmysqladapter#strict_mode?()","activerecord::connectionadapters::postgresqlcolumn::cast#string_to_array()","activerecord::connectionadapters::postgresqlcolumn::cast#string_to_bit()","activerecord::connectionadapters::postgresqlcolumn::cast#string_to_cidr()","activerecord::connectionadapters::postgresqlcolumn::cast#string_to_hstore()","activerecord::connectionadapters::postgresqlcolumn::cast#string_to_json()","activerecord::connectionadapters::postgresqlcolumn::cast#string_to_point()","activerecord::connectionadapters::postgresqlcolumn::cast#string_to_time()","activerecord::tasks::databasetasks#structure_dump()","activerecord::tasks::databasetasks#structure_load()","activerecord::connectionadapters::abstractmysqladapter#subquery_for()","activerecord::connectionadapters::databasestatements#subquery_for()","activerecord::connectionadapters::abstractadapter#substitute_at()","activerecord::connectionadapters::postgresqladapter::databasestatements#substitute_at()","activerecord::dynamicmatchers::findbybang::suffix()","activerecord::dynamicmatchers::method::suffix()","activerecord::calculations#sum()","activerecord::connectionadapters::sqlite3adapter#supports_add_column?()","activerecord::connectionadapters::abstractadapter#supports_bulk_alter?()","activerecord::connectionadapters::abstractadapter#supports_count_distinct?()","activerecord::connectionadapters::abstractadapter#supports_ddl_transactions?()","activerecord::connectionadapters::postgresqladapter#supports_ddl_transactions?()","activerecord::connectionadapters::sqlite3adapter#supports_ddl_transactions?()","activerecord::connectionadapters::abstractadapter#supports_explain?()","activerecord::connectionadapters::mysql2adapter#supports_explain?()","activerecord::connectionadapters::postgresqladapter#supports_explain?()","activerecord::connectionadapters::sqlite3adapter#supports_explain?()","activerecord::connectionadapters::abstractadapter#supports_extensions?()","activerecord::connectionadapters::postgresqladapter#supports_extensions?()","activerecord::connectionadapters::abstractadapter#supports_index_sort_order?()","activerecord::connectionadapters::abstractmysqladapter#supports_index_sort_order?()","activerecord::connectionadapters::postgresqladapter#supports_index_sort_order?()","activerecord::connectionadapters::sqlite3adapter#supports_index_sort_order?()","activerecord::connectionadapters::postgresqladapter#supports_insert_with_returning?()","activerecord::connectionadapters::abstractadapter#supports_migrations?()","activerecord::connectionadapters::abstractmysqladapter#supports_migrations?()","activerecord::connectionadapters::postgresqladapter#supports_migrations?()","activerecord::connectionadapters::abstractadapter#supports_partial_index?()","activerecord::connectionadapters::postgresqladapter#supports_partial_index?()","activerecord::connectionadapters::abstractadapter#supports_primary_key?()","activerecord::connectionadapters::abstractmysqladapter#supports_primary_key?()","activerecord::connectionadapters::postgresqladapter#supports_ranges?()","activerecord::connectionadapters::abstractadapter#supports_savepoints?()","activerecord::connectionadapters::abstractmysqladapter#supports_savepoints?()","activerecord::connectionadapters::postgresqladapter#supports_savepoints?()","activerecord::connectionadapters::sqlite3adapter#supports_savepoints?()","activerecord::connectionadapters::databasestatements#supports_statement_cache?()","activerecord::connectionadapters::mysqladapter#supports_statement_cache?()","activerecord::connectionadapters::postgresqladapter#supports_statement_cache?()","activerecord::connectionadapters::sqlite3adapter#supports_statement_cache?()","activerecord::connectionadapters::abstractadapter#supports_transaction_isolation?()","activerecord::connectionadapters::abstractmysqladapter#supports_transaction_isolation?()","activerecord::connectionadapters::postgresqladapter#supports_transaction_isolation?()","activerecord::migration#suppress_messages()","activerecord::inheritance::classmethods#symbolized_base_class()","activerecord::inheritance::classmethods#symbolized_sti_name()","activerecord::connectionadapters::schemastatements#table_alias_for()","activerecord::connectionadapters::databaselimits#table_alias_length()","activerecord::connectionadapters::postgresqladapter#table_alias_length()","activerecord::connectionadapters::abstractmysqladapter#table_exists?()","activerecord::connectionadapters::postgresqladapter::schemastatements#table_exists?()","activerecord::connectionadapters::sqlite3adapter#table_exists?()","activerecord::connectionadapters::schemacache#table_exists?()","activerecord::connectionadapters::schemastatements#table_exists?()","activerecord::modelschema::classmethods#table_exists?()","activerecord::modelschema::classmethods#table_name()","activerecord::schemamigration::table_name()","activerecord::modelschema::classmethods#table_name=()","activerecord::connectionadapters::databaselimits#table_name_length()","activerecord::fixtureset#table_rows()","activerecord::connectionadapters::sqlite3adapter#table_structure()","activerecord::connectionadapters::postgresqladapter::schemastatements#tables()","activerecord::connectionadapters::schemacache#tables()","activerecord::findermethods#take()","activerecord::findermethods#take!()","activerecord::associations::collectionproxy#target()","activerecord::testfixtures#teardown_fixtures()","activemodel::lint::tests#test_errors_aref()","activemodel::lint::tests#test_model_naming()","activemodel::lint::tests#test_persisted?()","activemodel::lint::tests#test_to_key()","activemodel::lint::tests#test_to_param()","activemodel::lint::tests#test_to_partial_path()","actionmailer::testcase::behavior::classmethods#tests()","activerecord::connectionadapters::table#timestamps()","activerecord::connectionadapters::tabledefinition#timestamps()","activemodel::errors#to_a()","activerecord::relation#to_a()","activerecord::result#to_ary()","mysql::time#to_date()","activemodel::errors#to_hash()","activerecord::result#to_hash()","activerecord::connectionadapters::postgresqladapter::oid::range#to_integer()","activemodel::conversion#to_key()","activerecord::attributemethods::primarykey#to_key()","activemodel::conversion#to_model()","activemodel::conversion#to_param()","activerecord::integration#to_param()","activemodel::conversion#to_partial_path()","activemodel::name#to_s()","activerecord::connectionadapters::databasestatements#to_sql()","activerecord::relation#to_sql()","activemodel::name#to_str()","activemodel::errors#to_xml()","activemodel::serializers::xml#to_xml()","activerecord::serialization#to_xml()","activerecord::persistence#toggle()","activerecord::persistence#toggle!()","activerecord::persistence#touch()","activerecord::connectionadapters::databasestatements#transaction()","activerecord::transactions#transaction()","activerecord::transactions::classmethods#transaction()","activerecord::connectionadapters::databasestatements#transaction_isolation_levels()","activerecord::connectionadapters::abstractadapter#transaction_joinable=()","activerecord::connectionadapters::databasestatements#transaction_open?()","activerecord::connectionadapters::abstractadapter#translate_exception()","activerecord::connectionadapters::abstractmysqladapter#translate_exception()","activerecord::connectionadapters::postgresqladapter#translate_exception()","activerecord::connectionadapters::sqlite3adapter#translate_exception()","activerecord::testfixtures::classmethods#try_to_load_dependency()","activerecord::connectionadapters::postgresqladapter::columnmethods#tsrange()","activerecord::connectionadapters::postgresqladapter::columnmethods#tstzrange()","activerecord::connectionadapters::postgresqladapter::columnmethods#tsvector()","activerecord::connectionadapters::mysqladapter::fields::date#type()","activerecord::connectionadapters::mysqladapter::fields::datetime#type()","activerecord::connectionadapters::mysqladapter::fields::float#type()","activerecord::connectionadapters::mysqladapter::fields::time#type()","activerecord::connectionadapters::mysqladapter::fields::type#type()","activerecord::connectionadapters::postgresqladapter::oid::date#type()","activerecord::connectionadapters::postgresqladapter::oid::timestamp#type()","activerecord::connectionadapters::postgresqladapter::oid::type#type()","activerecord::calculations#type_cast()","activerecord::connectionadapters::mysqladapter#type_cast()","activerecord::connectionadapters::mysqladapter::fields::boolean#type_cast()","activerecord::connectionadapters::mysqladapter::fields::date#type_cast()","activerecord::connectionadapters::mysqladapter::fields::datetime#type_cast()","activerecord::connectionadapters::mysqladapter::fields::decimal#type_cast()","activerecord::connectionadapters::mysqladapter::fields::float#type_cast()","activerecord::connectionadapters::mysqladapter::fields::identity#type_cast()","activerecord::connectionadapters::mysqladapter::fields::integer#type_cast()","activerecord::connectionadapters::mysqladapter::fields::time#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::array#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::bit#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::boolean#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::bytea#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::cidr#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::date#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::decimal#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::float#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::hstore#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::identity#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::integer#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::json#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::money#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::point#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::range#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::time#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::timestamp#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::vector#type_cast()","activerecord::connectionadapters::postgresqladapter::quoting#type_cast()","activerecord::connectionadapters::postgresqlcolumn#type_cast()","activerecord::connectionadapters::quoting#type_cast()","activerecord::connectionadapters::abstractadapter::type_cast_config_to_boolean()","activerecord::connectionadapters::abstractadapter::type_cast_config_to_integer()","activerecord::connectionadapters::mysqladapter::fields::type#type_cast_for_write()","activerecord::connectionadapters::postgresqladapter::oid::type#type_cast_for_write()","activerecord::connectionadapters::abstractmysqladapter#type_to_sql()","activerecord::connectionadapters::postgresqladapter::schemastatements#type_to_sql()","activerecord::connectionadapters::querycache#uncached()","activerecord::querycache::classmethods#uncached()","activemodel::naming::uncountable?()","activemodel::attributemethods::classmethods#undefine_attribute_methods()","activerecord::connectionadapters::postgresqladapter::quoting#unescape_bytea()","activerecord::associations::collectionproxy#uniq()","activerecord::querymethods#uniq()","activerecord::relation#uniq_value()","activerecord::connectionadapters::abstractadapter#unprepared_statement()","activerecord::connectionadapters::abstractadapter#unprepared_visitor()","activerecord::querymethods#unscope()","activerecord::scoping::default::classmethods#unscoped()","activerecord::migration#up()","activerecord::connectionadapters::databasestatements#update()","activerecord::persistence#update()","activerecord::relation#update()","activerecord::persistence#update!()","activerecord::relation#update_all()","activerecord::persistence#update_attribute()","activerecord::persistence#update_attributes()","activerecord::persistence#update_attributes!()","activerecord::persistence#update_column()","activerecord::persistence#update_columns()","activerecord::countercache::classmethods#update_counters()","activerecord::locking::optimistic::classmethods#update_counters()","activerecord::connectionadapters::databasestatements#update_sql()","activerecord::connectionadapters::postgresqladapter::databasestatements#update_sql()","activerecord::connectionadapters::postgresqladapter#use_insert_returning?()","activerecord::testfixtures::classmethods#uses_transaction()","activerecord::testfixtures::classmethods#uses_transaction?()","activerecord::findermethods#using_limitable_reflections?()","activerecord::connectionadapters::postgresqladapter::columnmethods#uuid()","activemodel::validations#valid?()","activerecord::dynamicmatchers::method#valid?()","activerecord::validations#valid?()","activerecord::connectionadapters::sqlite3adapter#valid_alter_table_options()","activerecord::connectionadapters::abstractadapter#valid_type?()","activerecord::connectionadapters::abstractmysqladapter#valid_type?()","activerecord::connectionadapters::postgresqladapter#valid_type?()","activemodel::validations::classmethods#validate()","activemodel::validator#validate()","activemodel::validations::classmethods#validates()","activemodel::validations::classmethods#validates!()","activemodel::validations::helpermethods#validates_absence_of()","activemodel::validations::helpermethods#validates_acceptance_of()","activerecord::validations::classmethods#validates_associated()","activemodel::validations::helpermethods#validates_confirmation_of()","activemodel::validations::classmethods#validates_each()","activemodel::validations::helpermethods#validates_exclusion_of()","activemodel::validations::helpermethods#validates_format_of()","activemodel::validations::helpermethods#validates_inclusion_of()","activemodel::validations::helpermethods#validates_length_of()","activemodel::validations::helpermethods#validates_numericality_of()","activemodel::validations::helpermethods#validates_presence_of()","activerecord::validations::classmethods#validates_presence_of()","activemodel::validations::helpermethods#validates_size_of()","activerecord::validations::classmethods#validates_uniqueness_of()","activemodel::validations#validates_with()","activemodel::validations::classmethods#validates_with()","activemodel::validations::classmethods#validators()","activemodel::validations::classmethods#validators_on()","activemodel::errors#values()","activerecord::relation#values()","activerecord::connectionadapters::abstractadapter#verify!()","actionmailer::version()","activemodel::version()","activerecord::version()","activerecord::schemamigration#version()","activerecord::querymethods#where()","activerecord::relation#where_values_hash()","activerecord::connectionadapters::connectionpool#with_connection()","activerecord::locking::pessimistic#with_lock()","activerecord::transactions#with_transaction_returning_status()","activerecord::connectionadapters::abstractadapter#without_prepared_statement?()","activerecord::migration#write()","activerecord::attributemethods::write#write_attribute()","activerecord::store#write_store_attribute()","activerecord::connectionadapters::postgresqladapter::columnmethods#xml()","","","","","",""],"info":[["ActionMailer","","classes/ActionMailer.html","",""],["ActionMailer::Base","","classes/ActionMailer/Base.html","","<p>Action Mailer allows you to send email from your application using a mailer\nmodel and views.\n<p>Mailer Models …\n"],["ActionMailer::Collector","","classes/ActionMailer/Collector.html","",""],["ActionMailer::DeliveryMethods","","classes/ActionMailer/DeliveryMethods.html","","<p>This module handles everything related to mail delivery, from registering\nnew delivery methods to configuring …\n"],["ActionMailer::DeliveryMethods::ClassMethods","","classes/ActionMailer/DeliveryMethods/ClassMethods.html","",""],["ActionMailer::DeliveryMethods::Mail","","classes/ActionMailer/DeliveryMethods/Mail.html","",""],["ActionMailer::LogSubscriber","","classes/ActionMailer/LogSubscriber.html","",""],["ActionMailer::MailHelper","","classes/ActionMailer/MailHelper.html","",""],["ActionMailer::NonInferrableMailerError","","classes/ActionMailer/NonInferrableMailerError.html","",""],["ActionMailer::Railtie","","classes/ActionMailer/Railtie.html","",""],["ActionMailer::Railtie::ActiveSupport","","classes/ActionMailer/Railtie/ActiveSupport.html","",""],["ActionMailer::TestCase","","classes/ActionMailer/TestCase.html","",""],["ActionMailer::TestCase::Behavior","","classes/ActionMailer/TestCase/Behavior.html","",""],["ActionMailer::TestCase::Behavior::ClassMethods","","classes/ActionMailer/TestCase/Behavior/ClassMethods.html","",""],["ActionMailer::TestHelper","","classes/ActionMailer/TestHelper.html","",""],["ActiveModel","","classes/ActiveModel.html","",""],["ActiveModel::AttributeMethods","","classes/ActiveModel/AttributeMethods.html","","<p>Active Model Attribute Methods\n<p><code>ActiveModel::AttributeMethods</code> provides a way to add prefixes\nand suffixes ...\n"],["ActiveModel::AttributeMethods::ClassMethods","","classes/ActiveModel/AttributeMethods/ClassMethods.html","",""],["ActiveModel::Callbacks","","classes/ActiveModel/Callbacks.html","","<p>Active Model Callbacks\n<p>Provides an interface for any class to have Active Record like callbacks.\n<p>Like the …\n"],["ActiveModel::Conversion","","classes/ActiveModel/Conversion.html","","<p>Active Model Conversion\n<p>Handles default conversions: to_model, to_key, to_param, and\nto_partial_path. …\n"],["ActiveModel::Dirty","","classes/ActiveModel/Dirty.html","","<p>Active Model Dirty\n<p>Provides a way to track changes in your object in the same way as Active\nRecord does. …\n"],["ActiveModel::Errors","","classes/ActiveModel/Errors.html","","<p>Active Model Errors\n<p>Provides a modified <code>Hash</code> that you can include in your object\nfor handling error messages …\n"],["ActiveModel::ForbiddenAttributesError","","classes/ActiveModel/ForbiddenAttributesError.html","","<p>Raised when forbidden attributes are used for mass assignment.\n\n<pre><code>class Person &lt; ActiveRecord::Base\nend\n ...</code></pre>\n"],["ActiveModel::Lint","","classes/ActiveModel/Lint.html","",""],["ActiveModel::Lint::Tests","","classes/ActiveModel/Lint/Tests.html","","<p>Active Model Lint Tests\n<p>You can test whether an object is compliant with the Active Model API by\nincluding …\n"],["ActiveModel::MissingAttributeError","","classes/ActiveModel/MissingAttributeError.html","","<p>Raised when an attribute is not defined.\n\n<pre><code>class User &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nuser = ...</code></pre>\n"],["ActiveModel::Model","","classes/ActiveModel/Model.html","","<p>Active Model Basic Model\n<p>Includes the required interface for an object to interact with\n<code>ActionPack</code>, using …\n"],["ActiveModel::Name","","classes/ActiveModel/Name.html","",""],["ActiveModel::Naming","","classes/ActiveModel/Naming.html","","<p>Active Model Naming\n<p>Creates a <code>model_name</code> method on your object.\n<p>To implement, just extend ActiveModel::Naming …\n"],["ActiveModel::SecurePassword","","classes/ActiveModel/SecurePassword.html","",""],["ActiveModel::SecurePassword::ClassMethods","","classes/ActiveModel/SecurePassword/ClassMethods.html","",""],["ActiveModel::SecurePassword::InstanceMethodsOnActivation","","classes/ActiveModel/SecurePassword/InstanceMethodsOnActivation.html","",""],["ActiveModel::Serialization","","classes/ActiveModel/Serialization.html","","<p>Active Model Serialization\n<p>Provides a basic serialization to a serializable_hash for your object.\n<p>A minimal …\n"],["ActiveModel::Serializers","","classes/ActiveModel/Serializers.html","",""],["ActiveModel::Serializers::JSON","","classes/ActiveModel/Serializers/JSON.html","","<p>Active Model JSON Serializer\n"],["ActiveModel::Serializers::Xml","","classes/ActiveModel/Serializers/Xml.html","","<p>Active Model XML Serializer\n"],["ActiveModel::StrictValidationFailed","","classes/ActiveModel/StrictValidationFailed.html","","<p>Raised when a validation cannot be corrected by end users and are\nconsidered exceptional.\n\n<pre><code>class Person ...</code></pre>\n"],["ActiveModel::Translation","","classes/ActiveModel/Translation.html","","<p>Active Model Translation\n<p>Provides integration between your object and the Rails internationalization\n(i18n) …\n"],["ActiveModel::Validations","","classes/ActiveModel/Validations.html","","<p>Active Model Validations\n<p>Provides a full validation framework to your objects.\n<p>A minimal implementation …\n"],["ActiveModel::Validations::Callbacks","","classes/ActiveModel/Validations/Callbacks.html","","<p>Active Model Validation Callbacks\n<p>Provides an interface for any class to have <code>before_validation</code>\nand <code>after_validation</code> …\n"],["ActiveModel::Validations::Callbacks::ClassMethods","","classes/ActiveModel/Validations/Callbacks/ClassMethods.html","",""],["ActiveModel::Validations::ClassMethods","","classes/ActiveModel/Validations/ClassMethods.html","",""],["ActiveModel::Validations::HelperMethods","","classes/ActiveModel/Validations/HelperMethods.html","",""],["ActiveModel::Validator","","classes/ActiveModel/Validator.html","","<p>Active Model Validator\n<p>A simple base class that can be used along with\nActiveModel::Validations::ClassMethods.validates_with …\n"],["ActiveRecord","","classes/ActiveRecord.html","",""],["ActiveRecord::ActiveRecordError","","classes/ActiveRecord/ActiveRecordError.html","","<p>Active Record Errors\n<p>Generic Active Record exception class.\n"],["ActiveRecord::AdapterNotFound","","classes/ActiveRecord/AdapterNotFound.html","","<p>Raised when Active Record cannot find database adapter specified in\n<code>config/database.yml</code> or programmatically. …\n"],["ActiveRecord::AdapterNotSpecified","","classes/ActiveRecord/AdapterNotSpecified.html","","<p>Raised when adapter not specified on connection (or configuration file\n<code>config/database.yml</code> misses adapter …\n"],["ActiveRecord::Aggregations","","classes/ActiveRecord/Aggregations.html","",""],["ActiveRecord::Aggregations::ClassMethods","","classes/ActiveRecord/Aggregations/ClassMethods.html","","<p>Active Record implements aggregation through a macro-like class method\ncalled <code>composed_of</code> for representing …\n"],["ActiveRecord::AssociationRelation","","classes/ActiveRecord/AssociationRelation.html","",""],["ActiveRecord::AssociationTypeMismatch","","classes/ActiveRecord/AssociationTypeMismatch.html","","<p>Raised when an object assigned to an association has an incorrect type.\n\n<pre><code>class Ticket &lt; ActiveRecord::Base ...</code></pre>\n"],["ActiveRecord::Associations","","classes/ActiveRecord/Associations.html","","<p>Active Record Belongs To Association\n<p>Active Record Belongs To Polymorphic Association\n<p>Active Record Has …\n"],["ActiveRecord::Associations::ClassMethods","","classes/ActiveRecord/Associations/ClassMethods.html","","<p>Associations are a set of macro-like class methods for tying objects\ntogether through foreign keys.  …\n"],["ActiveRecord::Associations::CollectionProxy","","classes/ActiveRecord/Associations/CollectionProxy.html","","<p>Association proxies in Active Record are middlemen between the object that\nholds the association, known …\n"],["ActiveRecord::AttributeAssignment","","classes/ActiveRecord/AttributeAssignment.html","",""],["ActiveRecord::AttributeAssignmentError","","classes/ActiveRecord/AttributeAssignmentError.html","","<p>Raised when an error occurred while doing a mass assignment to an attribute\nthrough the <code>attributes=</code> method. …\n"],["ActiveRecord::AttributeMethods","","classes/ActiveRecord/AttributeMethods.html","","<p>Active Record Attribute Methods\n"],["ActiveRecord::AttributeMethods::BeforeTypeCast","","classes/ActiveRecord/AttributeMethods/BeforeTypeCast.html","","<p>Active Record Attribute Methods Before Type Cast\n<p><code>ActiveRecord::AttributeMethods::BeforeTypeCast</code> provides ...\n"],["ActiveRecord::AttributeMethods::ClassMethods","","classes/ActiveRecord/AttributeMethods/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Dirty","","classes/ActiveRecord/AttributeMethods/Dirty.html","",""],["ActiveRecord::AttributeMethods::Dirty::ActiveSupport","","classes/ActiveRecord/AttributeMethods/Dirty/ActiveSupport.html","",""],["ActiveRecord::AttributeMethods::PrimaryKey","","classes/ActiveRecord/AttributeMethods/PrimaryKey.html","",""],["ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Query","","classes/ActiveRecord/AttributeMethods/Query.html","",""],["ActiveRecord::AttributeMethods::Read","","classes/ActiveRecord/AttributeMethods/Read.html","",""],["ActiveRecord::AttributeMethods::Read::ClassMethods","","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Serialization","","classes/ActiveRecord/AttributeMethods/Serialization.html","",""],["ActiveRecord::AttributeMethods::Serialization::ClassMethods","","classes/ActiveRecord/AttributeMethods/Serialization/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::TimeZoneConversion","","classes/ActiveRecord/AttributeMethods/TimeZoneConversion.html","",""],["ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods","","classes/ActiveRecord/AttributeMethods/TimeZoneConversion/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Write","","classes/ActiveRecord/AttributeMethods/Write.html","",""],["ActiveRecord::AttributeMethods::Write::ClassMethods","","classes/ActiveRecord/AttributeMethods/Write/ClassMethods.html","",""],["ActiveRecord::AutosaveAssociation","","classes/ActiveRecord/AutosaveAssociation.html","","<p>Active Record Autosave Association\n<p><code>AutosaveAssociation</code> is a module that takes care of\nautomatically saving ...\n"],["ActiveRecord::AutosaveAssociation::ClassMethods","","classes/ActiveRecord/AutosaveAssociation/ClassMethods.html","",""],["ActiveRecord::Base","","classes/ActiveRecord/Base.html","","<p>Active Record\n<p>Active Record objects don’t specify their attributes directly, but rather\ninfer them from …\n"],["ActiveRecord::Batches","","classes/ActiveRecord/Batches.html","",""],["ActiveRecord::Calculations","","classes/ActiveRecord/Calculations.html","",""],["ActiveRecord::Callbacks","","classes/ActiveRecord/Callbacks.html","","<p>Active Record Callbacks\n<p>Callbacks are hooks into the life cycle of an Active Record object that\nallow …\n"],["ActiveRecord::Callbacks::ClassMethods","","classes/ActiveRecord/Callbacks/ClassMethods.html","",""],["ActiveRecord::ConfigurationError","","classes/ActiveRecord/ConfigurationError.html","","<p>Raised when association is being configured improperly or user tries to use\noffset and limit together …\n"],["ActiveRecord::ConnectionAdapters","","classes/ActiveRecord/ConnectionAdapters.html","",""],["ActiveRecord::ConnectionAdapters::AbstractAdapter","","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html","","<p>Active Record supports multiple database systems. AbstractAdapter and\nrelated classes form the abstraction …\n"],["ActiveRecord::ConnectionAdapters::AbstractAdapter::SchemaCreation","","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter/SchemaCreation.html","",""],["ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html","",""],["ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::SchemaCreation","","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter/SchemaCreation.html","",""],["ActiveRecord::ConnectionAdapters::Column","","classes/ActiveRecord/ConnectionAdapters/Column.html","",""],["ActiveRecord::ConnectionAdapters::Column::Format","","classes/ActiveRecord/ConnectionAdapters/Column/Format.html","",""],["ActiveRecord::ConnectionAdapters::ColumnDumper","","classes/ActiveRecord/ConnectionAdapters/ColumnDumper.html","","<p>The goal of this module is to move Adapter specific column definitions to\nthe Adapter instead of having …\n"],["ActiveRecord::ConnectionAdapters::ConnectionHandler","","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html","","<p>ConnectionHandler is a collection of ConnectionPool objects. It is used for\nkeeping separate connection …\n"],["ActiveRecord::ConnectionAdapters::ConnectionManagement","","classes/ActiveRecord/ConnectionAdapters/ConnectionManagement.html","",""],["ActiveRecord::ConnectionAdapters::ConnectionPool","","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html","","<p>Connection pool base class for managing Active Record database connections.\n<p>Introduction\n<p>A connection pool …\n"],["ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html","","<p>Threadsafe, fair, FIFO queue.  Meant to be used by ConnectionPool with\nwhich it shares a Monitor.  But …\n"],["ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper","","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Reaper.html","","<p>Every <code>frequency</code> seconds, the reaper will call\n<code>reap</code> on <code>pool</code>. A reaper instantiated with a nil\nfrequency …\n"],["ActiveRecord::ConnectionAdapters::DatabaseLimits","","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html","",""],["ActiveRecord::ConnectionAdapters::DatabaseStatements","","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html","",""],["ActiveRecord::ConnectionAdapters::Mysql2Adapter","","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html","","<p>The MySQL adapter will work with both Ruby/MySQL, which is a Ruby-based\nMySQL adapter that comes bundled …\n"],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Boolean","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Boolean.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Date","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Date.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::DateTime","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/DateTime.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Decimal","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Decimal.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Float","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Float.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Identity","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Identity.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Integer","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Integer.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Time","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Time.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Type","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Type.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html","","<p>The PostgreSQL adapter works with the native C (bitbucket.org/ged/ruby-pg)\ndriver.\n<p>Options:\n<p><code>:host</code> - Defaults ...\n"],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnDefinition","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnDefinition.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Array","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Array.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Bit","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Bit.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Boolean","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Boolean.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Bytea","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Bytea.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Cidr","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Cidr.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Date","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Date.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Decimal","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Decimal.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Float","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Float.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Hstore","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Hstore.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Identity","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Identity.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Integer","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Integer.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Json","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Json.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Money","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Money.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Point","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Point.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Range","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Range.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Time","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Time.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Timestamp","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Timestamp.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Type.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::TypeMap","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/TypeMap.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Vector","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Vector.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Quoting","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Quoting.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ReferentialIntegrity","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ReferentialIntegrity.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaCreation","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaCreation.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Table","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Table.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::TableDefinition","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/TableDefinition.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Utils","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Utils.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLColumn","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLColumn::ArrayParser","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/ArrayParser.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html","",""],["ActiveRecord::ConnectionAdapters::QueryCache","","classes/ActiveRecord/ConnectionAdapters/QueryCache.html","",""],["ActiveRecord::ConnectionAdapters::Quoting","","classes/ActiveRecord/ConnectionAdapters/Quoting.html","",""],["ActiveRecord::ConnectionAdapters::SQLite3Adapter","","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html","","<p>The SQLite3 adapter works SQLite 3.6.16 or newer with the sqlite3-ruby\ndrivers (available as gem from …\n"],["ActiveRecord::ConnectionAdapters::SQLite3Adapter::ExplainPrettyPrinter","","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/ExplainPrettyPrinter.html","",""],["ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::SQLite3Adapter::Version","","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/Version.html","",""],["ActiveRecord::ConnectionAdapters::SchemaCache","","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html","",""],["ActiveRecord::ConnectionAdapters::SchemaStatements","","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html","",""],["ActiveRecord::ConnectionAdapters::StatementPool","","classes/ActiveRecord/ConnectionAdapters/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::Table","","classes/ActiveRecord/ConnectionAdapters/Table.html","","<p>Represents an SQL table in an abstract way for updating a table. Also see\nTableDefinition and SchemaStatements#create_table …\n"],["ActiveRecord::ConnectionAdapters::TableDefinition","","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html","","<p>Represents the schema of an SQL table in an abstract way. This class\nprovides methods for manipulating …\n"],["ActiveRecord::ConnectionAdapters::TransactionState","","classes/ActiveRecord/ConnectionAdapters/TransactionState.html","",""],["ActiveRecord::ConnectionHandling","","classes/ActiveRecord/ConnectionHandling.html","",""],["ActiveRecord::ConnectionNotEstablished","","classes/ActiveRecord/ConnectionNotEstablished.html","","<p>Raised when connection to the database could not been established (for\nexample when <code>connection=</code> is given …\n"],["ActiveRecord::ConnectionTimeoutError","","classes/ActiveRecord/ConnectionTimeoutError.html","","<p>Raised when a connection could not be obtained within the connection\nacquisition timeout period: because …\n"],["ActiveRecord::Core","","classes/ActiveRecord/Core.html","",""],["ActiveRecord::Core::ClassMethods","","classes/ActiveRecord/Core/ClassMethods.html","",""],["ActiveRecord::CounterCache","","classes/ActiveRecord/CounterCache.html","","<p>Active Record Counter Cache\n"],["ActiveRecord::CounterCache::ClassMethods","","classes/ActiveRecord/CounterCache/ClassMethods.html","",""],["ActiveRecord::DangerousAttributeError","","classes/ActiveRecord/DangerousAttributeError.html","","<p>Raised when attribute has a name reserved by Active Record (when attribute\nhas name of one of Active …\n"],["ActiveRecord::Delegation","","classes/ActiveRecord/Delegation.html","",""],["ActiveRecord::Delegation::ClassMethods","","classes/ActiveRecord/Delegation/ClassMethods.html","",""],["ActiveRecord::Delegation::ClassMethods::ThreadSafe","","classes/ActiveRecord/Delegation/ClassMethods/ThreadSafe.html","",""],["ActiveRecord::DynamicMatchers","","classes/ActiveRecord/DynamicMatchers.html","",""],["ActiveRecord::DynamicMatchers::FindBy","","classes/ActiveRecord/DynamicMatchers/FindBy.html","",""],["ActiveRecord::DynamicMatchers::FindByBang","","classes/ActiveRecord/DynamicMatchers/FindByBang.html","",""],["ActiveRecord::DynamicMatchers::Finder","","classes/ActiveRecord/DynamicMatchers/Finder.html","",""],["ActiveRecord::DynamicMatchers::Method","","classes/ActiveRecord/DynamicMatchers/Method.html","",""],["ActiveRecord::Explain","","classes/ActiveRecord/Explain.html","",""],["ActiveRecord::ExplainSubscriber","","classes/ActiveRecord/ExplainSubscriber.html","",""],["ActiveRecord::ExplainSubscriber::ActiveSupport","","classes/ActiveRecord/ExplainSubscriber/ActiveSupport.html","",""],["ActiveRecord::FinderMethods","","classes/ActiveRecord/FinderMethods.html","",""],["ActiveRecord::FixtureSet","","classes/ActiveRecord/FixtureSet.html","","<p>Fixtures are a way of organizing data that you want to test against; in\nshort, sample data.\n<p>They are stored …\n"],["ActiveRecord::ImmutableRelation","","classes/ActiveRecord/ImmutableRelation.html","","<p>Raised when a relation cannot be mutated because it’s already loaded.\n\n<pre><code>class Task &lt; ActiveRecord::Base ...</code></pre>\n"],["ActiveRecord::Inheritance","","classes/ActiveRecord/Inheritance.html","",""],["ActiveRecord::Inheritance::ClassMethods","","classes/ActiveRecord/Inheritance/ClassMethods.html","",""],["ActiveRecord::Integration","","classes/ActiveRecord/Integration.html","",""],["ActiveRecord::InvalidForeignKey","","classes/ActiveRecord/InvalidForeignKey.html","","<p>Raised when a record cannot be inserted or updated because it references a\nnon-existent record.\n"],["ActiveRecord::IrreversibleMigration","","classes/ActiveRecord/IrreversibleMigration.html","","<p>Exception that can be raised to stop migrations from going backwards.\n"],["ActiveRecord::Locking","","classes/ActiveRecord/Locking.html","",""],["ActiveRecord::Locking::Optimistic","","classes/ActiveRecord/Locking/Optimistic.html","","<p>What is Optimistic Locking\n<p>Optimistic locking allows multiple users to access the same record for\nedits, …\n"],["ActiveRecord::Locking::Optimistic::ClassMethods","","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html","",""],["ActiveRecord::Locking::Pessimistic","","classes/ActiveRecord/Locking/Pessimistic.html","","<p>Locking::Pessimistic provides support for row-level locking using SELECT …\nFOR UPDATE and other lock …\n"],["ActiveRecord::LogSubscriber","","classes/ActiveRecord/LogSubscriber.html","",""],["ActiveRecord::Migration","","classes/ActiveRecord/Migration.html","","<p>Active Record Migrations\n<p>Migrations can manage the evolution of a schema used by several physical\ndatabases. …\n"],["ActiveRecord::Migration::CheckPending","","classes/ActiveRecord/Migration/CheckPending.html","","<p>This class is used to verify that all migrations have been run before\nloading a web page if config.active_record.migration_error …\n"],["ActiveRecord::Migration::CommandRecorder","","classes/ActiveRecord/Migration/CommandRecorder.html","","<p><code>ActiveRecord::Migration::CommandRecorder</code> records commands done\nduring a migration and knows how to reverse ...\n"],["ActiveRecord::Migration::CommandRecorder::StraightReversions","","classes/ActiveRecord/Migration/CommandRecorder/StraightReversions.html","",""],["ActiveRecord::MigrationProxy","","classes/ActiveRecord/MigrationProxy.html","","<p>MigrationProxy is used to defer loading of the actual migration classes\nuntil they are needed\n"],["ActiveRecord::ModelSchema","","classes/ActiveRecord/ModelSchema.html","",""],["ActiveRecord::ModelSchema::ClassMethods","","classes/ActiveRecord/ModelSchema/ClassMethods.html","",""],["ActiveRecord::MultiparameterAssignmentErrors","","classes/ActiveRecord/MultiparameterAssignmentErrors.html","","<p>Raised when there are multiple errors while doing a mass assignment through\nthe <code>attributes</code> method. The …\n"],["ActiveRecord::NestedAttributes","","classes/ActiveRecord/NestedAttributes.html","",""],["ActiveRecord::NestedAttributes::ClassMethods","","classes/ActiveRecord/NestedAttributes/ClassMethods.html","","<p>Active Record Nested Attributes\n<p>Nested attributes allow you to save attributes on associated records\nthrough …\n"],["ActiveRecord::NestedAttributes::TooManyRecords","","classes/ActiveRecord/NestedAttributes/TooManyRecords.html","",""],["ActiveRecord::Persistence","","classes/ActiveRecord/Persistence.html","","<p>Active Record Persistence\n"],["ActiveRecord::Persistence::ClassMethods","","classes/ActiveRecord/Persistence/ClassMethods.html","",""],["ActiveRecord::PreparedStatementInvalid","","classes/ActiveRecord/PreparedStatementInvalid.html","","<p>Raised when number of bind variables in statement given to\n<code>:condition</code> key (for example, when using <code>find</code> …\n"],["ActiveRecord::QueryCache","","classes/ActiveRecord/QueryCache.html","","<p>Active Record Query Cache\n"],["ActiveRecord::QueryCache::ClassMethods","","classes/ActiveRecord/QueryCache/ClassMethods.html","",""],["ActiveRecord::QueryMethods","","classes/ActiveRecord/QueryMethods.html","",""],["ActiveRecord::QueryMethods::WhereChain","","classes/ActiveRecord/QueryMethods/WhereChain.html","","<p>WhereChain objects act as placeholder for queries in which #where does not\nhave any parameter. In this …\n"],["ActiveRecord::Querying","","classes/ActiveRecord/Querying.html","",""],["ActiveRecord::Railtie","","classes/ActiveRecord/Railtie.html","",""],["ActiveRecord::Railtie::ActionDispatch","","classes/ActiveRecord/Railtie/ActionDispatch.html","",""],["ActiveRecord::Railtie::ActiveSupport","","classes/ActiveRecord/Railtie/ActiveSupport.html","",""],["ActiveRecord::Railtie::Rails","","classes/ActiveRecord/Railtie/Rails.html","",""],["ActiveRecord::ReadOnlyRecord","","classes/ActiveRecord/ReadOnlyRecord.html","","<p>Raised on attempt to update record that is instantiated as read only.\n"],["ActiveRecord::ReadonlyAttributes","","classes/ActiveRecord/ReadonlyAttributes.html","",""],["ActiveRecord::ReadonlyAttributes::ClassMethods","","classes/ActiveRecord/ReadonlyAttributes/ClassMethods.html","",""],["ActiveRecord::RecordInvalid","","classes/ActiveRecord/RecordInvalid.html","","<p>Active Record RecordInvalid\n<p>Raised by <code>save!</code> and <code>create!</code> when the record is\ninvalid. Use the <code>record</code> method …\n"],["ActiveRecord::RecordNotDestroyed","","classes/ActiveRecord/RecordNotDestroyed.html","","<p>Raised by ActiveRecord::Base.destroy! when a call to destroy would return\nfalse.\n"],["ActiveRecord::RecordNotFound","","classes/ActiveRecord/RecordNotFound.html","","<p>Raised when Active Record cannot find record by given id or set of ids.\n"],["ActiveRecord::RecordNotSaved","","classes/ActiveRecord/RecordNotSaved.html","","<p>Raised by ActiveRecord::Base.save! and ActiveRecord::Base.create! methods\nwhen record cannot be saved …\n"],["ActiveRecord::RecordNotUnique","","classes/ActiveRecord/RecordNotUnique.html","","<p>Raised when a record cannot be inserted because it would violate a\nuniqueness constraint.\n"],["ActiveRecord::Reflection","","classes/ActiveRecord/Reflection.html","",""],["ActiveRecord::Reflection::ClassMethods","","classes/ActiveRecord/Reflection/ClassMethods.html","","<p>Reflection enables to interrogate Active Record classes and objects about\ntheir associations and aggregations. …\n"],["ActiveRecord::Reflection::MacroReflection","","classes/ActiveRecord/Reflection/MacroReflection.html","","<p>Base class for AggregateReflection and AssociationReflection. Objects of\nAggregateReflection and AssociationReflection …\n"],["ActiveRecord::Relation","","classes/ActiveRecord/Relation.html","","<p>Active Record Relation\n"],["ActiveRecord::Result","","classes/ActiveRecord/Result.html","","<p>This class encapsulates a Result returned from calling\n<code>exec_query</code> on any database connection adapter. …\n"],["ActiveRecord::Rollback","","classes/ActiveRecord/Rollback.html","","<p>ActiveRecord::Transactions::ClassMethods.transaction uses this exception to\ndistinguish a deliberate …\n"],["ActiveRecord::SQLCounter","","classes/ActiveRecord/SQLCounter.html","",""],["ActiveRecord::Sanitization","","classes/ActiveRecord/Sanitization.html","",""],["ActiveRecord::Sanitization::ClassMethods","","classes/ActiveRecord/Sanitization/ClassMethods.html","",""],["ActiveRecord::Schema","","classes/ActiveRecord/Schema.html","","<p>Active Record Schema\n<p>Allows programmers to programmatically define a schema in a portable DSL.\nThis means …\n"],["ActiveRecord::SchemaMigration","","classes/ActiveRecord/SchemaMigration.html","",""],["ActiveRecord::Scoping","","classes/ActiveRecord/Scoping.html","","<p>Active Record Named Scopes\n"],["ActiveRecord::Scoping::ClassMethods","","classes/ActiveRecord/Scoping/ClassMethods.html","",""],["ActiveRecord::Scoping::Default","","classes/ActiveRecord/Scoping/Default.html","",""],["ActiveRecord::Scoping::Default::ClassMethods","","classes/ActiveRecord/Scoping/Default/ClassMethods.html","",""],["ActiveRecord::Scoping::Named","","classes/ActiveRecord/Scoping/Named.html","",""],["ActiveRecord::Scoping::Named::ClassMethods","","classes/ActiveRecord/Scoping/Named/ClassMethods.html","",""],["ActiveRecord::Serialization","","classes/ActiveRecord/Serialization.html","","<p>Active Record Serialization\n"],["ActiveRecord::SerializationTypeMismatch","","classes/ActiveRecord/SerializationTypeMismatch.html","","<p>Raised when unserialized object’s type mismatches one specified for\nserializable field.\n"],["ActiveRecord::SpawnMethods","","classes/ActiveRecord/SpawnMethods.html","",""],["ActiveRecord::StaleObjectError","","classes/ActiveRecord/StaleObjectError.html","","<p>Raised on attempt to save stale record. Record is stale when it’s being\nsaved in another query after …\n"],["ActiveRecord::StatementCache","","classes/ActiveRecord/StatementCache.html","","<p>Statement cache is used to cache a single statement in order to avoid\ncreating the AST again. Initializing …\n"],["ActiveRecord::StatementInvalid","","classes/ActiveRecord/StatementInvalid.html","","<p>Superclass for all database execution errors.\n<p>Wraps the underlying database error as <code>original_exception</code> …\n"],["ActiveRecord::Store","","classes/ActiveRecord/Store.html","","<p>Store gives you a thin wrapper around serialize for the purpose of storing\nhashes in a single column. …\n"],["ActiveRecord::Store::ClassMethods","","classes/ActiveRecord/Store/ClassMethods.html","",""],["ActiveRecord::Tasks","","classes/ActiveRecord/Tasks.html","",""],["ActiveRecord::Tasks::DatabaseTasks","","classes/ActiveRecord/Tasks/DatabaseTasks.html","","<p><code>ActiveRecord::Tasks::DatabaseTasks</code> is a utility class, which\nencapsulates logic behind common tasks used ...\n"],["ActiveRecord::TestFixtures","","classes/ActiveRecord/TestFixtures.html","",""],["ActiveRecord::TestFixtures::ClassMethods","","classes/ActiveRecord/TestFixtures/ClassMethods.html","",""],["ActiveRecord::ThrowResult","","classes/ActiveRecord/ThrowResult.html","","<p>Raised when SQL statement is invalid and the application gets a blank\nresult.\n"],["ActiveRecord::Timestamp","","classes/ActiveRecord/Timestamp.html","","<p>Active Record Timestamp\n<p>Active Record automatically timestamps create and update operations if the\ntable …\n"],["ActiveRecord::TransactionIsolationError","","classes/ActiveRecord/TransactionIsolationError.html","",""],["ActiveRecord::Transactions","","classes/ActiveRecord/Transactions.html","","<p>See ActiveRecord::Transactions::ClassMethods for documentation.\n"],["ActiveRecord::Transactions::ClassMethods","","classes/ActiveRecord/Transactions/ClassMethods.html","","<p>Active Record Transactions\n<p>Transactions are protective blocks where SQL statements are only permanent\n…\n"],["ActiveRecord::Translation","","classes/ActiveRecord/Translation.html","",""],["ActiveRecord::UnknownAttributeError","","classes/ActiveRecord/UnknownAttributeError.html","","<p>Raised when unknown attributes are supplied via mass assignment.\n"],["ActiveRecord::UnknownPrimaryKey","","classes/ActiveRecord/UnknownPrimaryKey.html","","<p>Raised when a primary key is needed, but there is not one specified in the\nschema or model.\n"],["ActiveRecord::Validations","","classes/ActiveRecord/Validations.html","","<p>Active Record Validations\n<p>Active Record includes the majority of its validations from\n<code>ActiveModel::Validations</code> …\n"],["ActiveRecord::Validations::ClassMethods","","classes/ActiveRecord/Validations/ClassMethods.html","",""],["ActiveRecord::WrappedDatabaseException","","classes/ActiveRecord/WrappedDatabaseException.html","","<p>Defunct wrapper class kept for compatibility. <code>StatementInvalid</code>\nwraps the original exception now.\n"],["ActiveSupport","","classes/ActiveSupport.html","",""],["Mysql","","classes/Mysql.html","",""],["Mysql::Field","","classes/Mysql/Field.html","",""],["Mysql::Result","","classes/Mysql/Result.html","",""],["Mysql::Stmt","","classes/Mysql/Stmt.html","",""],["Mysql::Time","","classes/Mysql/Time.html","",""],["!~","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-21-7E","","<p>Equivalent to <code>String#!~</code>. Match the class name against the\ngiven regexp. Returns <code>true</code> if there is no match, …\n"],["<=>","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-3C-3D-3E","","<p>Equivalent to <code>String#&lt;=&gt;</code>.\n\n<pre><code>class BlogPost\n  extend ActiveModel::Naming\nend\n\nBlogPost.model_name &lt;=&gt; ...</code></pre>\n"],["<=>","ActiveRecord::ConnectionAdapters::SQLite3Adapter::Version","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/Version.html#method-i-3C-3D-3E","(version_string)",""],["<=>","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-3C-3D-3E","(other_object)","<p>Allows sort on objects\n"],["==","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-3D-3D","","<p>Equivalent to <code>String#==</code>. Returns <code>true</code> if the\nclass name and <code>other</code> are equal, otherwise <code>false</code>.\n\n<pre><code>class BlogPost ...</code></pre>\n"],["==","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-3D-3D","(comparison_object)","<p>Returns true if <code>comparison_object</code> is the same exact object, or\n<code>comparison_object</code> is of the same type …\n"],["==","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-3D-3D","(other_aggregation)","<p>Returns <code>true</code> if <code>self</code> and\n<code>other_aggregation</code> have the same <code>name</code> attribute,\n<code>active_record</code> attribute, and …\n"],["==","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-3D-3D","(other)","<p>Compares two relations for equality.\n"],["===","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-3D-3D-3D","","<p>Equivalent to <code>#==</code>.\n\n<pre><code>class BlogPost\n  extend ActiveModel::Naming\nend\n\nBlogPost.model_name === 'BlogPost' ...</code></pre>\n"],["===","ActiveRecord::Core::ClassMethods","classes/ActiveRecord/Core/ClassMethods.html#method-i-3D-3D-3D","(object)","<p>Overwrite the default class equality method to provide support for\nassociation proxies.\n"],["=~","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-3D-7E","","<p>Equivalent to <code>String#=~</code>. Match the class name against the\ngiven regexp. Returns the position where the …\n"],["[]","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-5B-5D","(attribute)","<p>When passed a symbol or a name of a method, returns an array of errors for\nthe method.\n\n<pre><code>person.errors[:name] ...</code></pre>\n"],["[]","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-5B-5D","(attr_name)","<p>Returns the value of the attribute identified by <code>attr_name</code>\nafter it has been typecast (for example, “2004-12-12” …\n"],["[]","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-5B-5D","(key)",""],["[]","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::TypeMap","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/TypeMap.html#method-i-5B-5D","(oid)",""],["[]","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-5B-5D","(key)",""],["[]","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-5B-5D","(key)",""],["[]","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-5B-5D","(key)",""],["[]","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-5B-5D","(name)","<p>Returns a ColumnDefinition for the column with name <code>name</code>.\n"],["[]","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-i-5B-5D","(x)",""],["[]","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-5B-5D","(idx)",""],["[]=","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-5B-5D-3D","(attribute, error)","<p>Adds to the supplied attribute the supplied error message.\n\n<pre><code>person.errors[:name] = &quot;must be set&quot;\nperson.errors[:name] ...</code></pre>\n"],["[]=","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-5B-5D-3D","(attr_name, value)","<p>Updates the attribute identified by <code>attr_name</code> with the\nspecified <code>value</code>. (Alias for the protected\n<code>write_attribute</code> …\n"],["[]=","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-5B-5D-3D","(sql, key)",""],["[]=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::TypeMap","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/TypeMap.html#method-i-5B-5D-3D","(oid, type)",""],["[]=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-5B-5D-3D","(sql, key)",""],["[]=","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-5B-5D-3D","(sql, key)",""],["[]=","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-5B-5D-3D","(sql, key)",""],["[]=","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-i-5B-5D-3D","(k,v)",""],["_attr_readonly","ActiveRecord::ReadonlyAttributes","classes/ActiveRecord/ReadonlyAttributes.html#method-i-_attr_readonly","()",""],["_store_accessors_module","ActiveRecord::Store::ClassMethods","classes/ActiveRecord/Store/ClassMethods.html#method-i-_store_accessors_module","()",""],["abstract_class?","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-abstract_class-3F","()","<p>Returns whether this class is an abstract class or not.\n"],["accept","ActiveRecord::ConnectionAdapters::AbstractAdapter::SchemaCreation","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter/SchemaCreation.html#method-i-accept","(o)",""],["accepts_nested_attributes_for","ActiveRecord::NestedAttributes::ClassMethods","classes/ActiveRecord/NestedAttributes/ClassMethods.html#method-i-accepts_nested_attributes_for","(*attr_names)","<p>Defines an attributes writer for the specified association(s).\n<p>Supported options:\n<p>:allow_destroy &mdash; If true, …\n"],["active?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-active-3F","()","<p>Checks whether the connection to the database is still active. This\nincludes checking whether the database …\n"],["active?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-active-3F","()","<p>CONNECTION MANAGEMENT ====================================\n"],["active?","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-active-3F","()","<p>CONNECTION MANAGEMENT ====================================\n"],["active?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-active-3F","()","<p>Is this connection alive and ready for queries?\n"],["active?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-active-3F","()",""],["active_connection?","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-active_connection-3F","()","<p>Is there an open connection that is being used for the current thread?\n"],["active_connections?","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-active_connections-3F","()","<p>Returns true if there are any active connections among the connection pools\nthat the ConnectionHandler …\n"],["adapter_name","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-adapter_name","()","<p>Returns the human-readable name of the adapter. Use mixed case - one can\nalways use downcase if needed. …\n"],["adapter_name","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-adapter_name","()","<p>Returns ‘PostgreSQL’ as adapter name for identification purposes.\n"],["add","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-add","(attribute, message = nil, options = {})","<p>Adds <code>message</code> to the error messages on <code>attribute</code>.\nMore than one error can be added to the same <code>attribute</code> …\n"],["add","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-add","(element)","<p>Add <code>element</code> to the queue.  Never blocks.\n"],["add","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-add","(table_name)","<p>Add internal cache for table with <code>table_name</code>.\n"],["add_belongs_to","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_belongs_to","(table_name, ref_name, options = {})",""],["add_column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-add_column","(table_name, column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["add_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_column","(table_name, column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["add_column_position!","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_column_position-21","(sql, options)",""],["add_column_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_column_sql","(table_name, column_name, type, options = {})",""],["add_delivery_method","ActionMailer::DeliveryMethods::ClassMethods","classes/ActionMailer/DeliveryMethods/ClassMethods.html#method-i-add_delivery_method","(symbol, klass, default_options={})","<p>Adds a new delivery method through the given class using the given symbol\nas alias and the default options …\n"],["add_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index","(table_name, column_name, options = {})","<p>Adds a new index to the table. <code>column_name</code> can be a single\nSymbol, or an Array of Symbols.\n<p>The index will …\n"],["add_index_length","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_index_length","(option_strings, column_names, options = {})",""],["add_index_options","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index_options","(table_name, column_name, options = {})",""],["add_index_sort_order","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index_sort_order","(option_strings, column_names, options = {})",""],["add_index_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_index_sql","(table_name, column_name, options = {})",""],["add_on_blank","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-add_on_blank","(attributes, options = {})","<p>Will add an error message to each of the attributes in\n<code>attributes</code> that is blank (using Object#blank? …\n"],["add_on_empty","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-add_on_empty","(attributes, options = {})","<p>Will add an error message to each of the attributes in\n<code>attributes</code> that is empty.\n\n<pre><code>person.errors.add_on_empty(:name) ...</code></pre>\n"],["add_reference","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_reference","(table_name, ref_name, options = {})","<p>Adds a reference. Optionally adds a <code>type</code> column, if\n<code>:polymorphic</code> option is provided. <code>add_reference</code>\nand …\n"],["add_timestamps","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_timestamps","(table_name)","<p>Adds timestamps (<code>created_at</code> and <code>updated_at</code>)\ncolumns to the named table.\n\n<pre><code>add_timestamps(:suppliers)\n</code></pre>\n"],["add_timestamps_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_timestamps_sql","(table_name)",""],["add_to_transaction","ActiveRecord::Transactions","classes/ActiveRecord/Transactions.html#method-i-add_to_transaction","()","<p>Add the record to the current transaction so that the\n<code>after_rollback</code> and <code>after_commit</code> callbacks can be\n…\n"],["add_transaction_record","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-add_transaction_record","(record)","<p>Register a record with the current transaction so that its after_commit and\nafter_rollback callbacks …\n"],["added?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-added-3F","(attribute, message = nil, options = {})","<p>Returns <code>true</code> if an error on the attribute with the given\nmessage is present, <code>false</code> otherwise. <code>message</code> …\n"],["after_commit","ActiveRecord::Transactions::ClassMethods","classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_commit","(*args, &block)","<p>This callback is called after a record has been created, updated, or\ndestroyed.\n<p>You can specify that the …\n"],["after_rollback","ActiveRecord::Transactions::ClassMethods","classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_rollback","(*args, &block)","<p>This callback is called after a create, update, or destroy are rolled back.\n<p>Please check the documentation …\n"],["after_teardown","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-after_teardown","()",""],["after_validation","ActiveModel::Validations::Callbacks::ClassMethods","classes/ActiveModel/Validations/Callbacks/ClassMethods.html#method-i-after_validation","(*args, &block)","<p>Defines a callback that will get called right after validation happens.\n\n<pre><code>class Person\n  include ActiveModel::Validations ...</code></pre>\n"],["alias_attribute","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-alias_attribute","(new_name, old_name)","<p>Allows you to make aliases for attributes.\n\n<pre><code>class Person\n  include ActiveModel::AttributeMethods\n\n  attr_accessor ...</code></pre>\n"],["alias_type","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields.html#method-c-alias_type","(new, old)",""],["alias_type","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID.html#method-c-alias_type","(new, old)","<p>Alias the <code>old</code> type to the <code>new</code> type.\n"],["all","ActionMailer::Collector","classes/ActionMailer/Collector.html#method-i-all","(*args, &block)",""],["all","ActiveRecord::Scoping::Named::ClassMethods","classes/ActiveRecord/Scoping/Named/ClassMethods.html#method-i-all","()","<p>Returns an <code>ActiveRecord::Relation</code> scope object.\n\n<pre><code>posts = Post.all\nposts.size # Fires &quot;select count(*) from ...\n</code></pre>\n"],["allowed_index_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-allowed_index_name_length","()","<p>Returns the maximum allowed length for an index name. This limit is\nenforced by rails and Is less than …\n"],["allowed_index_name_length","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-allowed_index_name_length","()","<p>Returns 62. SQLite supports index names up to 64 characters. The rest is\nused by rails internally to …\n"],["announce","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-announce","(message)",""],["any","ActionMailer::Collector","classes/ActionMailer/Collector.html#method-i-any","(*args, &block)",""],["any?","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-any-3F","(&block)","<p>Returns <code>true</code> if the collection is not empty.\n\n<pre><code>class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets.count ...</code></pre>\n"],["any?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-any-3F","()","<p>Returns true if there are any records.\n"],["any_waiting?","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-any_waiting-3F","()","<p>Test if any threads are currently waiting on the queue.\n"],["apply_join_dependency","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-apply_join_dependency","(relation, join_dependency)",""],["arel","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-arel","()","<p>Returns the Arel object associated with the relation.\n"],["arel_engine","ActiveRecord::Core::ClassMethods","classes/ActiveRecord/Core/ClassMethods.html#method-i-arel_engine","()","<p>Returns the Arel engine.\n"],["arel_table","ActiveRecord::Core::ClassMethods","classes/ActiveRecord/Core/ClassMethods.html#method-i-arel_table","()","<p>Returns an instance of <code>Arel::Table</code> loaded with the current\ntable name.\n\n<pre><code>class Post &lt; ActiveRecord::Base ...</code></pre>\n"],["array_to_string","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-array_to_string","(value, column, adapter, should_be_quoted = false)",""],["as_json","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-as_json","(options=nil)","<p>Returns a Hash that can be used as the JSON representation for this object.\nYou can pass the <code>:full_messages</code> …\n"],["as_json","ActiveModel::Serializers::JSON","classes/ActiveModel/Serializers/JSON.html#method-i-as_json","(options = nil)","<p>Returns a hash representing the model. Some configuration can be passed\nthrough <code>options</code>.\n<p>The option <code>include_root_in_json</code> …\n"],["assert_emails","ActionMailer::TestHelper","classes/ActionMailer/TestHelper.html#method-i-assert_emails","(number)","<p>Asserts that the number of emails sent matches the given number.\n\n<pre><code>def test_emails\n  assert_emails 0\n  ContactMailer.welcome.deliver ...</code></pre>\n"],["assert_no_emails","ActionMailer::TestHelper","classes/ActionMailer/TestHelper.html#method-i-assert_no_emails","(&block)","<p>Assert that no emails have been sent.\n\n<pre><code>def test_emails\n  assert_no_emails\n  ContactMailer.welcome.deliver ...</code></pre>\n"],["assign_attributes","ActiveRecord::AttributeAssignment","classes/ActiveRecord/AttributeAssignment.html#method-i-assign_attributes","(new_attributes)","<p>Allows you to set all the attributes by passing in a hash of attributes\nwith keys matching the attribute …\n"],["assume_migrated_upto_version","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-assume_migrated_upto_version","(version, migrations_paths = ActiveRecord::Migrator.migrations_paths)",""],["attachments","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-attachments","()","<p>Allows you to add attachments to an email, like so:\n\n<pre><code>mail.attachments['filename.jpg'] = File.read('/path/to/filename.jpg')\n</code></pre>\n"],["attachments","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-attachments","()","<p>Access the message attachments list.\n"],["attr_readonly","ActiveRecord::ReadonlyAttributes::ClassMethods","classes/ActiveRecord/ReadonlyAttributes/ClassMethods.html#method-i-attr_readonly","(*attributes)","<p>Attributes listed as readonly will be used to create a new record but\nupdate operations will ignore these …\n"],["attribute_for_inspect","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-attribute_for_inspect","(attr_name)","<p>Returns an <code>#inspect</code>-like string for the value of the attribute\n<code>attr_name</code>. String attributes are truncated …\n"],["attribute_method?","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-attribute_method-3F","(attribute)","<p>Returns <code>true</code> if <code>attribute</code> is an attribute method,\n<code>false</code> otherwise.\n\n<pre><code>class Person\n  include ActiveModel::Validations ...</code></pre>\n"],["attribute_method?","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-attribute_method-3F","(attribute)","<p>Returns <code>true</code> if <code>attribute</code> is an attribute method\nand table exists, <code>false</code> otherwise.\n\n<pre><code>class Person &lt; ActiveRecord::Base ...</code></pre>\n"],["attribute_method?","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-attribute_method-3F","(attr_name)",""],["attribute_method_affix","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_affix","(*affixes)","<p>Declares a method available for all attributes with the given prefix and\nsuffix. Uses <code>method_missing</code> …\n"],["attribute_method_prefix","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_prefix","(*prefixes)","<p>Declares a method available for all attributes with the given prefix. Uses\n<code>method_missing</code> and <code>respond_to?</code> …\n"],["attribute_method_suffix","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_suffix","(*suffixes)","<p>Declares a method available for all attributes with the given suffix. Uses\n<code>method_missing</code> and <code>respond_to?</code> …\n"],["attribute_missing","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-attribute_missing","(match, *args, &block)","<p><code>attribute_missing</code> is like <code>method_missing</code>, but for\nattributes. When <code>method_missing</code> is called we check ...\n"],["attribute_names","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-attribute_names","()","<p>Returns an array of names for the attributes available on this object.\n\n<pre><code>class Person &lt; ActiveRecord::Base ...</code></pre>\n"],["attribute_names","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-attribute_names","()","<p>Returns an array of column names as strings if it’s not an abstract class\nand table exists. Otherwise …\n"],["attribute_present?","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-attribute_present-3F","(attribute)","<p>Returns <code>true</code> if the specified <code>attribute</code> has been\nset by the user or by a database load and is neither …\n"],["attributes","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-attributes","()","<p>Returns a hash of all the attributes with their names as keys and the\nvalues of the attributes as values. …\n"],["attributes=","ActiveRecord::AttributeAssignment","classes/ActiveRecord/AttributeAssignment.html#method-i-attributes-3D","(new_attributes)",""],["attributes_before_type_cast","ActiveRecord::AttributeMethods::BeforeTypeCast","classes/ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-attributes_before_type_cast","()","<p>Returns a hash of attributes before typecasting and deserialization.\n\n<pre><code>class Task &lt; ActiveRecord::Base\nend ...</code></pre>\n"],["attributes_hash","ActiveRecord::DynamicMatchers::Finder","classes/ActiveRecord/DynamicMatchers/Finder.html#method-i-attributes_hash","()",""],["authenticate","ActiveModel::SecurePassword::InstanceMethodsOnActivation","classes/ActiveModel/SecurePassword/InstanceMethodsOnActivation.html#method-i-authenticate","(unencrypted_password)","<p>Returns <code>self</code> if the password is correct, otherwise\n<code>false</code>.\n\n<pre><code>class User &lt; ActiveRecord::Base\n  has_secure_password ...</code></pre>\n"],["average","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-average","(column_name, options = {})","<p>Calculates the average value on a given column. Returns <code>nil</code> if\nthere’s no row. See <code>calculate</code> for examples …\n"],["base_class","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-base_class","()","<p>Returns the class descending directly from ActiveRecord::Base, or an\nabstract class, if any, in the inheritance …\n"],["basename","ActiveRecord::MigrationProxy","classes/ActiveRecord/MigrationProxy.html#method-i-basename","()",""],["becomes","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-becomes","(klass)","<p>Returns an instance of the specified <code>klass</code> with the attributes\nof the current record. This is mostly …\n"],["becomes!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-becomes-21","(klass)","<p>Wrapper around <code>becomes</code> that also changes the instance’s sti\ncolumn value. This is especially useful if …\n"],["before_setup","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-before_setup","()",""],["before_validation","ActiveModel::Validations::Callbacks::ClassMethods","classes/ActiveModel/Validations/Callbacks/ClassMethods.html#method-i-before_validation","(*args, &block)","<p>Defines a callback that will get called right before validation happens.\n\n<pre><code>class Person\n  include ActiveModel::Validations ...</code></pre>\n"],["begin_db_transaction","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-begin_db_transaction","()",""],["begin_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-begin_db_transaction","()","<p>Begins the transaction (and turns off auto-committing).\n"],["begin_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-begin_db_transaction","()","<p>Begins a transaction.\n"],["begin_isolated_db_transaction","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-begin_isolated_db_transaction","(isolation)",""],["begin_isolated_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-begin_isolated_db_transaction","(isolation)","<p>Begins the transaction with the isolation level set. Raises an error by\ndefault; adapters that support …\n"],["begin_isolated_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-begin_isolated_db_transaction","(isolation)",""],["belongs_to","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-belongs_to","(name, scope = nil, options = {})","<p>Specifies a one-to-one association with another class. This method should\nonly be used if this class …\n"],["belongs_to","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-belongs_to","(*args)",""],["belongs_to","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-belongs_to","(*args)",""],["bind","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-bind","(value)",""],["blank?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-blank-3F","()","<p>aliases empty?\n"],["blank?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-blank-3F","()","<p>Returns true if relation is blank.\n"],["block_format","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-block_format","(text)","<p>Take the text and format it, indented two spaces for each line, and wrapped\nat 72 columns.\n"],["body","ActiveRecord::DynamicMatchers::Finder","classes/ActiveRecord/DynamicMatchers/Finder.html#method-i-body","()","<p>Extended in activerecord-deprecated_finders\n"],["body","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-i-body","()",""],["build","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-build","(attributes = {}, &block)","<p>Returns a new object of the collection type that has been instantiated with\n<code>attributes</code> and linked to …\n"],["build","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-build","(*args, &block)",""],["build_arel","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-build_arel","()","<p>Like #arel, but ignores the default scope of the model.\n"],["cache","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-cache","()","<p>Enable the query cache within the block.\n"],["cache","ActiveRecord::QueryCache::ClassMethods","classes/ActiveRecord/QueryCache/ClassMethods.html#method-i-cache","(&block)","<p>Enable the query cache within the block if Active Record is configured. If\nit’s not, it will execute …\n"],["cache_attribute?","ActiveRecord::AttributeMethods::Read::ClassMethods","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-cache_attribute-3F","(attr_name)","<p>Returns <code>true</code> if the provided attribute is being cached.\n"],["cache_attributes","ActiveRecord::AttributeMethods::Read::ClassMethods","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-cache_attributes","(*attribute_names)","<p><code>cache_attributes</code> allows you to declare which converted\nattribute values should be cached. Usually caching ...\n"],["cache_fixtures","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-cache_fixtures","(connection, fixtures_map)",""],["cache_for_connection","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-cache_for_connection","(connection)",""],["cache_key","ActiveRecord::Integration","classes/ActiveRecord/Integration.html#method-i-cache_key","()","<p>Returns a cache key that can be used to identify this record.\n\n<pre><code>Product.new.cache_key     # =&gt; &quot;products/new&quot; ...\n</code></pre>\n"],["cached_attributes","ActiveRecord::AttributeMethods::Read::ClassMethods","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-cached_attributes","()","<p>Returns the attributes which are cached. By default time related columns\nwith datatype <code>:datetime, :timestamp,</code> …\n"],["cached_fixtures","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-cached_fixtures","(connection, keys_to_fetch = nil)",""],["calculate","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-calculate","(operation, column_name, options = {})","<p>This calculates aggregate values in the given column. Methods for count,\nsum, average, minimum, and maximum …\n"],["call","ActiveRecord::ConnectionAdapters::ConnectionManagement","classes/ActiveRecord/ConnectionAdapters/ConnectionManagement.html#method-i-call","(env)",""],["call","ActiveRecord::Migration::CheckPending","classes/ActiveRecord/Migration/CheckPending.html#method-i-call","(env)",""],["call","ActiveRecord::QueryCache","classes/ActiveRecord/QueryCache.html#method-i-call","(env)",""],["call","ActiveRecord::SQLCounter","classes/ActiveRecord/SQLCounter.html#method-i-call","(name, start, finish, message_id, values)",""],["case_insensitive_comparison","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-case_insensitive_comparison","(table, attribute, column, value)",""],["case_insensitive_comparison","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-case_insensitive_comparison","(table, attribute, column, value)",""],["case_sensitive_equality_operator","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-case_sensitive_equality_operator","()",""],["case_sensitive_modifier","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-case_sensitive_modifier","(node)",""],["case_sensitive_modifier","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-case_sensitive_modifier","(node)",""],["change","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-change","(column_name, type, options = {})","<p>Changes the column’s definition according to the new options. See\nTableDefinition#column for details …\n"],["change_column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-change_column","(table_name, column_name, type, options = {})","<p>Changes the column of a table.\n"],["change_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column","(table_name, column_name, type, options = {})","<p>Changes the column’s definition according to the new options. See\nTableDefinition#column for details …\n"],["change_column_default","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-change_column_default","(table_name, column_name, default)",""],["change_column_default","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-change_column_default","(table_name, column_name, default)","<p>Changes the default value of a table column.\n"],["change_column_default","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column_default","(table_name, column_name, default)","<p>Sets a new default value for a column:\n\n<pre><code>change_column_default(:suppliers, :qualification, 'new')\nchange_column_default(:accounts, ...</code></pre>\n"],["change_column_null","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_null","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_null","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_null","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column_null","(table_name, column_name, null, default = nil)","<p>Sets or removes a +NOT NULL+ constraint on a column. The <code>null</code>\nflag indicates whether the value can be …\n"],["change_column_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-change_column_sql","(table_name, column_name, type, options = {})",""],["change_default","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-change_default","(column_name, default)","<p>Sets a new default value for a column. See\nSchemaStatements#change_column_default\n\n<pre><code>t.change_default(:qualification, ...</code></pre>\n"],["change_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_table","(table_name, options = {})","<p>A block for changing columns in <code>table</code>.\n\n<pre><code># change_table() yields a Table instance\nchange_table(:suppliers) ...</code></pre>\n"],["change_table","ActiveRecord::Migration::CommandRecorder","classes/ActiveRecord/Migration/CommandRecorder.html#method-i-change_table","(table_name, options = {})",""],["changed","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changed","()","<p>Returns an array with the name of the attributes with unsaved changes.\n\n<pre><code>person.changed # =&gt; []\nperson.name ...</code></pre>\n"],["changed?","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changed-3F","()","<p>Returns <code>true</code> if any attribute have unsaved changes,\n<code>false</code> otherwise.\n\n<pre><code>person.changed? # =&gt; false\nperson.name ...</code></pre>\n"],["changed_attributes","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changed_attributes","()","<p>Returns a hash of the attributes with unsaved changes indicating their\noriginal values like <code>attr =&gt;</code> …\n"],["changed_for_autosave?","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-changed_for_autosave-3F","()","<p>Returns whether or not this record has been changed in any way (including\nwhether any of its nested autosave …\n"],["changes","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changes","()","<p>Returns a hash of changed attributes indicating their original and new\nvalues like <code>attr =&gt; [original</code> …\n"],["charset","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-charset","()","<p>Returns the database character set.\n"],["charset","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-charset","(*arguments)",""],["charset_current","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-charset_current","(environment = env)",""],["check_pending!","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-check_pending-21","()",""],["checkin","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkin","(conn)","<p>Check-in a database connection back into the pool, indicating that you no\nlonger need this connection. …\n"],["checkout","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkout","()","<p>Check-out a database connection from the pool, indicating that you want to\nuse it. You should call #checkin …\n"],["cidr","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-cidr","(name, options = {})",""],["cidr_to_string","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-cidr_to_string","(object)",""],["class_name","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-class_name","()","<p>Returns the class name for the macro.\n<p><code>composed_of :balance, class_name: 'Money'</code> returns\n<code>'Money'</code> <code>has_many</code> ...\n"],["clear","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-clear","()","<p>Clear the error messages.\n\n<pre><code>person.errors.full_messages # =&gt; [&quot;name can not be nil&quot;]\nperson.errors.clear ...</code></pre>\n"],["clear","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-clear","()","<p>Remove all elements from the queue.\n"],["clear","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-clear","()",""],["clear","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::TypeMap","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/TypeMap.html#method-i-clear","()",""],["clear","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-clear","()",""],["clear","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-clear","()",""],["clear","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-clear","()",""],["clear!","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-clear-21","()","<p>Clears out internal caches\n"],["clear_active_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_active_connections-21","()","<p>Returns any connections in use by the current thread back to the pool, and\nalso returns connections to …\n"],["clear_all_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_all_connections-21","()",""],["clear_cache!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-clear_cache-21","()","<p>Clear any caching the database adapter may be doing, for example clearing\nthe prepared statement cache. …\n"],["clear_cache!","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-clear_cache-21","()","<p>Clears the prepared statements cache.\n"],["clear_cache!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-clear_cache-21","()","<p>Clears the prepared statements cache.\n"],["clear_cache!","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-clear_cache-21","()","<p>Clears the prepared statements cache.\n"],["clear_log","ActiveRecord::SQLCounter","classes/ActiveRecord/SQLCounter.html#method-c-clear_log","()",""],["clear_query_cache","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-clear_query_cache","()","<p>Clears the query cache.\n<p>One reason you may wish to call this method explicitly is between queries\nthat …\n"],["clear_reloadable_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_reloadable_connections-21","()","<p>Clears the cache which maps classes.\n"],["clear_reloadable_connections!","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-clear_reloadable_connections-21","()","<p>Clears the cache which maps classes.\n"],["clear_table_cache!","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-clear_table_cache-21","(table_name)","<p>Clear out internal caches for table with <code>table_name</code>.\n"],["clear_validators!","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-clear_validators-21","()","<p>Clears all of the validators and validations.\n<p>Note that this will clear anything that is being used to …\n"],["client_encoding","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-client_encoding","()","<p>Get the client encoding for this database\n"],["client_min_messages","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-client_min_messages","()","<p>Returns the current client message level.\n"],["client_min_messages=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-client_min_messages-3D","(level)","<p>Set the client message level.\n"],["clone","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-clone","","<p>Identical to Ruby’s clone method.  This is a “shallow” copy.  Be warned\nthat your attributes …\n"],["close","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-close","()","<p>Check the connection back in to the connection pool\n"],["collation","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-collation","()","<p>Returns the database collation strategy.\n"],["collation","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-collation","()","<p>Returns the current database collation.\n"],["collation","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-collation","(*arguments)",""],["collation_current","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-collation_current","(environment = env)",""],["column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::TableDefinition","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/TableDefinition.html#method-i-column","(name, type = nil, options = {})",""],["column","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-column","(column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["column","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-column","(name, type, options = {})","<p>Instantiates a new column for the table. The <code>type</code> parameter is\nnormally one of the migrations native …\n"],["column_defaults","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-column_defaults","()",""],["column_defaults","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-column_defaults","()","<p>Returns a hash where the keys are column names and the values are default\nvalues when instantiating the …\n"],["column_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-column_exists-3F","(table_name, column_name, type = nil, options = {})","<p>Checks to see if a column exists in a given table.\n\n<pre><code># Check a column exists\ncolumn_exists?(:suppliers, ...</code></pre>\n"],["column_exists?","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-column_exists-3F","(column_name, type = nil, options = {})","<p>Checks to see if a column exists. See SchemaStatements#column_exists?\n"],["column_for_attribute","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-column_for_attribute","(name)","<p>Returns the column object for the named attribute. Returns <code>nil</code>\nif the named attribute not exists.\n\n<pre><code>class ...</code></pre>\n"],["column_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-column_name_length","()","<p>Returns the maximum length of a column name.\n"],["column_names","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-column_names","()","<p>Returns an array of column names as strings.\n"],["column_spec","ActiveRecord::ConnectionAdapters::ColumnDumper","classes/ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-column_spec","(column, types)",""],["columns","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-columns","(table_name)","<p>Returns the list of all column definitions for a table.\n"],["columns","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-columns","(table = nil)","<p>Get the columns for a table\n"],["columns","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-columns","(table_name)","<p>Returns an array of Column objects for the table specified by\n<code>table_name</code>. See the concrete implementation …\n"],["columns","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-columns","()",""],["columns","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-columns","()","<p>Returns an array of column objects for the table associated with this\nclass.\n"],["columns_for_remove","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-columns_for_remove","(table_name, *column_names)",""],["columns_hash","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-columns_hash","(table = nil)","<p>Get the columns for a table as a hash, key is the column name value is the\ncolumn object.\n"],["columns_hash","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-columns_hash","()","<p>Returns a hash of column objects for the table associated with this class.\n"],["columns_per_multicolumn_index","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-columns_per_multicolumn_index","()","<p>Returns the maximum number of columns in a multicolumn index.\n"],["columns_per_table","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-columns_per_table","()","<p>Returns the maximum number of columns per table.\n"],["commit_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-commit_db_transaction","()","<p>Commits the transaction (and turns on auto-committing).\n"],["commit_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-commit_db_transaction","()","<p>Commits a transaction.\n"],["committed?","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-committed-3F","()",""],["composed_of","ActiveRecord::Aggregations::ClassMethods","classes/ActiveRecord/Aggregations/ClassMethods.html#method-i-composed_of","(part_id, options = {})","<p>Adds reader and writer methods for manipulating a value object:\n<code>composed_of :address</code> adds <code>address</code> and …\n"],["compute_type","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-compute_type","(type_name)","<p>Returns the class type of the record using the current module as a prefix.\nSo descendants of MyApp::Business::Account …\n"],["concat","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-concat","(*records)","<p>Add one or more records to the collection by setting their foreign keys to\nthe association’s primary …\n"],["connected?","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connected-3F","(klass)","<p>Returns true if a connection that’s accessible to this class has already\nbeen opened.\n"],["connected?","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connected-3F","()","<p>Returns true if a connection has already been opened.\n"],["connected?","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connected-3F","()","<p>Returns <code>true</code> if Active Record is connected.\n"],["connection","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connection","()","<p>Retrieve the connection associated with the current thread, or call\n#checkout to obtain one if necessary. …\n"],["connection","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connection","()","<p>Returns the connection currently associated with the class. This can also\nbe used to “borrow” …\n"],["connection","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-connection","()","<p>Returns the connection currently associated with the class. This can also\nbe used to “borrow” …\n"],["connection","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-connection","()",""],["connection_config","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connection_config","()","<p>Returns the configuration of the associated connection as a hash:\n\n<pre><code>ActiveRecord::Base.connection_config ...</code></pre>\n"],["connection_handler","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-connection_handler","()",""],["connection_handler","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-c-connection_handler","()",""],["connection_handler=","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-c-connection_handler-3D","(handler)",""],["connection_id","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connection_id","()",""],["connection_id=","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connection_id-3D","(connection_id)",""],["connection_pool","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connection_pool","()",""],["connection_pool_list","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connection_pool_list","()",""],["connection_pools","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connection_pools","()",""],["construct_join_dependency_for_association_find","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-construct_join_dependency_for_association_find","()",""],["construct_limited_ids_condition","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-construct_limited_ids_condition","(relation)",""],["construct_relation_for_association_calculations","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-construct_relation_for_association_calculations","()",""],["construct_relation_for_association_find","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-construct_relation_for_association_find","(join_dependency)",""],["content_columns","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-content_columns","()","<p>Returns an array of column objects where the primary id, all columns ending\nin “_id” or “_count”, …\n"],["controller_path","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-controller_path","()",""],["copy","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-copy","(destination, sources, options = {})",""],["count","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-count","()","<p>Returns the number of error messages.\n\n<pre><code>person.errors.add(:name, &quot;can't be blank&quot;)\nperson.errors.count # ...\n</code></pre>\n"],["count","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-count","(column_name = nil, options = {})","<p>Count all records using SQL.\n\n<pre><code>class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets.count ...</code></pre>\n"],["count","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-count","(column_name = nil, options = {})","<p>Count the records.\n\n<pre><code>Person.count\n# =&gt; the total count of all people\n\nPerson.count(:age)\n# =&gt; returns the ...\n</code></pre>\n"],["count_by_sql","ActiveRecord::Querying","classes/ActiveRecord/Querying.html#method-i-count_by_sql","(sql)","<p>Returns the result of an SQL statement that should only include a COUNT(*)\nin the SELECT part. The use …\n"],["create","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-create","(attributes = {}, &block)","<p>Returns a new object of the collection type that has been instantiated with\nattributes, linked to this …\n"],["create","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-create","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)",""],["create","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-create","()",""],["create","ActiveRecord::Persistence::ClassMethods","classes/ActiveRecord/Persistence/ClassMethods.html#method-i-create","(attributes = nil, &block)","<p>Creates an object (or multiple objects) and saves it to the database, if\nvalidations pass. The resulting …\n"],["create","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-create","(*args, &block)","<p>Tries to create a new record with the same scoped attributes defined in the\nrelation. Returns the initialized …\n"],["create","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-create","(*arguments)",""],["create!","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-create-21","(attributes = {}, &block)","<p>Like <code>create</code>, except that if the record is invalid, raises an\nexception.\n\n<pre><code>class Person\n  has_many :pets ...</code></pre>\n"],["create!","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-create-21","(*args, &block)","<p>Similar to #create, but calls <code>create!</code> on the base class.\nRaises an exception if a validation error occurs. …\n"],["create!","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-create-21","(attributes = nil, &block)","<p>Creates an object just like Base.create but calls <code>save!</code>\ninstead of <code>save</code> so an exception is raised if …\n"],["create_all","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-create_all","()",""],["create_current","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-create_current","(environment = env)",""],["create_database","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-create_database","(name, options = {})","<p>Create a new MySQL database with optional <code>:charset</code> and\n<code>:collation</code>. Charset defaults to utf8.\n<p>Example: …\n"],["create_database","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-create_database","(name, options = {})","<p>Create a new PostgreSQL database. Options include <code>:owner</code>,\n<code>:template</code>, <code>:encoding</code>, <code>:collation</code>,\n<code>:ctype</code>,  …\n"],["create_database_url","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-create_database_url","()",""],["create_fixtures","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-create_fixtures","(fixtures_directory, fixture_set_names, class_names = {})",""],["create_join_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_join_table","(table_1, table_2, options = {})","<p>Creates a new join table with the name created using the lexical order of\nthe first two arguments. These …\n"],["create_reflection","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-create_reflection","(macro, name, scope, options, active_record)",""],["create_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-create_savepoint","()",""],["create_savepoint","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-create_savepoint","()",""],["create_savepoint","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-create_savepoint","()",""],["create_savepoint","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-create_savepoint","()",""],["create_schema","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-create_schema","(schema_name)","<p>Creates a schema for the given schema name.\n"],["create_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_table","(table_name, options = {})","<p>Creates a new table with the name <code>table_name</code>.\n<code>table_name</code> may either be a String or a Symbol.\n<p>There are …\n"],["create_table","ActiveRecord::SchemaMigration","classes/ActiveRecord/SchemaMigration.html#method-c-create_table","(limit=nil)",""],["create_with","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-create_with","(value)","<p>Sets attributes to be used when creating new records from a relation\nobject.\n\n<pre><code>users = User.where(name: ...</code></pre>\n"],["ctype","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-ctype","()","<p>Returns the current database ctype.\n"],["current_config","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-current_config","(options = {})",""],["current_database","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-current_database","()",""],["current_database","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-current_database","()","<p>Returns the current database name.\n"],["current_savepoint_name","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-current_savepoint_name","()",""],["current_schema","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-current_schema","()","<p>Returns the current schema name.\n"],["custom","ActionMailer::Collector","classes/ActionMailer/Collector.html#method-i-custom","(mime, options = {})",""],["dangerous_attribute_method?","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-dangerous_attribute_method-3F","(method_name)",""],["daterange","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-daterange","(name, options = {})",""],["decrement","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-decrement","(attribute, by = 1)","<p>Initializes <code>attribute</code> to zero if <code>nil</code> and\nsubtracts the value passed as <code>by</code> (default is 1). The decrement\n…\n"],["decrement!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-decrement-21","(attribute, by = 1)","<p>Wrapper around <code>decrement</code> that saves the record. This method\ndiffers from its non-bang version in that …\n"],["decrement_counter","ActiveRecord::CounterCache::ClassMethods","classes/ActiveRecord/CounterCache/ClassMethods.html#method-i-decrement_counter","(counter_name, id)","<p>Decrement a numeric field by one, via a direct SQL update.\n<p>This works the same as increment_counter but …\n"],["decrement_open_transactions","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-decrement_open_transactions","()",""],["default","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-default","(value = nil)",""],["default_i18n_subject","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-default_i18n_subject","(interpolations = {})","<p>Translates the <code>subject</code> using Rails I18n class under\n<code>[mailer_scope, action_name]</code> scope. If it does not …\n"],["default_options=","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-default_options-3D","(value = nil)","<p>Allows to set defaults through app configuration:\n\n<pre><code>config.action_mailer.default_options = { from: &quot;no-reply@example.org&quot; ...</code></pre>\n"],["default_primary_key_type","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-default_primary_key_type","()",""],["default_scope","ActiveRecord::Scoping::Default::ClassMethods","classes/ActiveRecord/Scoping/Default/ClassMethods.html#method-i-default_scope","(scope = nil)","<p>Use this macro in your model to set a default scope for all operations on\nthe model.\n\n<pre><code>class Article &lt; ActiveRecord::Base ...</code></pre>\n"],["default_scopes?","ActiveRecord::Scoping::Default","classes/ActiveRecord/Scoping/Default.html#method-c-default_scopes-3F","()",""],["default_sequence_name","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-default_sequence_name","(table, column)",""],["define","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-i-define","()",""],["define","ActiveRecord::Schema","classes/ActiveRecord/Schema.html#method-c-define","(info={}, &block)","<p>Eval the given block. All methods available to the current connection\nadapter are available within the …\n"],["define_attribute_method","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-define_attribute_method","(attr_name)","<p>Declares an attribute that should be prefixed and suffixed by\nActiveModel::AttributeMethods.\n<p>To use, pass …\n"],["define_attribute_methods","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-define_attribute_methods","(*attr_names)","<p>Declares the attributes that should be prefixed and suffixed by\nActiveModel::AttributeMethods.\n<p>To use, …\n"],["define_method_attribute","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-define_method_attribute","(attr_name)",""],["define_method_attribute","ActiveRecord::AttributeMethods::Read::ClassMethods","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-define_method_attribute","(name)","<p>We want to generate the methods via module_eval rather than define_method,\nbecause define_method is slower …\n"],["define_method_attribute=","ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods","classes/ActiveRecord/AttributeMethods/TimeZoneConversion/ClassMethods.html#method-i-define_method_attribute-3D","(attr_name)","<p>Defined for all <code>datetime</code> and <code>timestamp</code> attributes\nwhen <code>time_zone_aware_attributes</code> are enabled. This enhanced …\n"],["define_method_attribute=","ActiveRecord::AttributeMethods::Write::ClassMethods","classes/ActiveRecord/AttributeMethods/Write/ClassMethods.html#method-i-define_method_attribute-3D","(name)","<p>See define_method_attribute in read.rb for an explanation of this code.\n"],["define_model_callbacks","ActiveModel::Callbacks","classes/ActiveModel/Callbacks.html#method-i-define_model_callbacks","(*callbacks)","<p>define_model_callbacks accepts the same options\n<code>define_callbacks</code> does, in case you want to overwrite …\n"],["delete","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-delete","(key)","<p>Delete messages for <code>key</code>. Returns the deleted messages.\n\n<pre><code>person.errors.get(:name)    # =&gt; [&quot;can not be nil&quot;] ...\n</code></pre>\n"],["delete","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-delete","(*records)","<p>Deletes the <code>records</code> supplied and removes them from the\ncollection. For <code>has_many</code> associations, the deletion …\n"],["delete","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-delete","(element)","<p>If <code>element</code> is in the queue, remove and return it, or nil.\n"],["delete","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-delete","(arel, name = nil, binds = [])","<p>Executes the delete statement and returns the number of rows affected.\n"],["delete","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-delete","(key)",""],["delete","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-delete","(sql_key)",""],["delete","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-delete","(key)",""],["delete","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-delete","()","<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],["delete","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-delete","(id_or_array)","<p>Deletes the row with a primary key matching the <code>id</code> argument,\nusing a SQL <code>DELETE</code> statement, and returns …\n"],["delete_all","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-delete_all","()","<p>Deletes all the records from the collection. For <code>has_many</code>\nassociations, the deletion is done according …\n"],["delete_all","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-delete_all","(conditions = nil)","<p>Deletes the records matching <code>conditions</code> without instantiating\nthe records first, and hence not calling …\n"],["delete_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-delete_sql","(sql, name = nil)","<p>Executes the delete statement and returns the number of rows affected.\n"],["deliver","ActionMailer::LogSubscriber","classes/ActionMailer/LogSubscriber.html#method-i-deliver","(event)",""],["descends_from_active_record?","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-descends_from_active_record-3F","()","<p>True if this isn’t a concrete subclass needing a STI type condition.\n"],["destroy","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-destroy","(*records)","<p>Destroys the <code>records</code> supplied and removes them from the\ncollection. This method will <em>always</em> remove record …\n"],["destroy","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-destroy","()","<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],["destroy","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-destroy","(id)","<p>Destroy an object (or multiple objects) that has the given id. The object\nis instantiated first, therefore …\n"],["destroy!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-destroy-21","()","<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],["destroy_all","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-destroy_all","()","<p>Deletes the records of the collection directly from the database. This will\n<em>always</em> remove the records …\n"],["destroy_all","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-destroy_all","(conditions = nil)","<p>Destroys the records matching <code>conditions</code> by instantiating each\nrecord and calling its <code>destroy</code> method. …\n"],["destroyed?","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-destroyed-3F","()","<p>Returns true if this object has been destroyed, otherwise returns false.\n"],["destroyed_by_association","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-destroyed_by_association","()","<p>Returns the association for the parent being destroyed.\n<p>Used to avoid updating the counter cache unnecessarily. …\n"],["destroyed_by_association=","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-destroyed_by_association-3D","(reflection)","<p>Records the association that is being destroyed and destroying this record\nin the process.\n"],["determine_default_mailer","ActionMailer::TestCase::Behavior::ClassMethods","classes/ActionMailer/TestCase/Behavior/ClassMethods.html#method-i-determine_default_mailer","(name)",""],["dirties_query_cache","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-c-dirties_query_cache","(base, *method_names)",""],["disable_ddl_transaction!","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-disable_ddl_transaction-21","()","<p>Disable DDL transactions for this migration.\n"],["disable_extension","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disable_extension","(name)","<p>This is meant to be implemented by the adapters that support extensions\n"],["disable_extension","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-disable_extension","(name)",""],["disable_query_cache!","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-disable_query_cache-21","()",""],["disable_referential_integrity","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disable_referential_integrity","()","<p>Override to turn off referential integrity while executing\n<code>&amp;block</code>.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-disconnect-21","()","<p>Disconnects all connections in the pool, and clears the pool.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["distinct","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-distinct","()","<p>Specifies whether the records should be unique or not.\n\n<pre><code>class Person &lt; ActiveRecord::Base\n  has_many :pets ...</code></pre>\n"],["distinct","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-distinct","(columns, order_by)","<p>SELECT DISTINCT clause for a given set of columns and a given ORDER BY\nclause.\n\n<pre><code>distinct(&quot;posts.id&quot;, [&quot;posts.created_at ...</code></pre>\n"],["distinct","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-distinct","(value = true)","<p>Specifies whether the records should be unique or not. For example:\n\n<pre><code>User.select(:name)\n# =&gt; Might return ...\n</code></pre>\n"],["down","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-down","()",""],["drop","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-drop","(*arguments)",""],["drop_all","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-drop_all","()",""],["drop_current","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-drop_current","(environment = env)",""],["drop_database_url","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-drop_database_url","()",""],["drop_join_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-drop_join_table","(table_1, table_2, options = {})","<p>Drops the join table specified by the given arguments. See\n<code>create_join_table</code> for details.\n<p>Although this …\n"],["drop_schema","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-drop_schema","(schema_name)","<p>Drops the schema for the given schema name.\n"],["drop_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-drop_table","(table_name, options = {})","<p>Drops a table from the database.\n<p>Although this command ignores <code>options</code> and the block if one is\ngiven, …\n"],["drop_table","ActiveRecord::SchemaMigration","classes/ActiveRecord/SchemaMigration.html#method-c-drop_table","()",""],["dup","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-dup","","<p>Duped objects have no id assigned and are treated as new records. Note that\nthis is a “shallow” …\n"],["each","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-each","()","<p>Iterates through each error key, value pair in the error messages hash.\nYields the attribute and the …\n"],["each","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-each","(&block)",""],["each","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-each","(&block)",""],["each","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-each","(&block)",""],["each","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-each","()",""],["each","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-i-each","(&block)",""],["each","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-each","()",""],["eager_load","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-eager_load","(*args)","<p>Forces eager loading by performing a LEFT OUTER JOIN on <code>args</code>:\n\n<pre><code>User.eager_load(:posts)\n=&gt; SELECT &quot;users&quot;.&quot;id&quot; ...</code></pre>\n"],["eager_loading?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-eager_loading-3F","()","<p>Returns true if relation needs eager loading.\n"],["empty?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-empty-3F","()","<p>Returns <code>true</code> if no errors are found, <code>false</code>\notherwise. If the error message is a string it can be empty. …\n"],["empty?","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-empty-3F","()","<p>Returns <code>true</code> if the collection is empty. If the collection has\nbeen loaded or the <code>:counter_sql</code> option …\n"],["empty?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-empty-3F","()","<p>Returns true if there are no records.\n"],["empty?","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-empty-3F","()","<p>Returns true if there are no records.\n"],["empty_insert_statement_value","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-empty_insert_statement_value","()",""],["empty_insert_statement_value","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-empty_insert_statement_value","()",""],["emulate_booleans","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-c-emulate_booleans","","<p>By default, the MysqlAdapter will consider all columns of type\n<code>tinyint(1)</code> as boolean. If you wish to …\n"],["enable_extension","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-enable_extension","(name)","<p>This is meant to be implemented by the adapters that support extensions\n"],["enable_extension","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-enable_extension","(name)",""],["enable_query_cache!","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-enable_query_cache-21","()",""],["encode_with","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-encode_with","(coder)","<p>Populate <code>coder</code> with attributes about this record that should\nbe serialized. The structure of <code>coder</code> defined …\n"],["encoding","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-encoding","()","<p>Returns the current database encoding format.\n"],["encoding","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-encoding","()","<p>Returns the current database encoding format as a string, eg: ‘UTF-8’\n"],["enlist_fixture_connections","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-enlist_fixture_connections","()",""],["eql?","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-eql-3F","","<p>Equivalent to <code>String#eql?</code>. Returns <code>true</code> if the\nclass name and <code>other</code> have the same length and content, …\n"],["eql?","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-eql-3F","(comparison_object)",""],["error_number","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-error_number","(exception)",""],["errors","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-errors","()","<p>Returns the <code>Errors</code> object that holds all information about\nattribute error messages.\n\n<pre><code>class Person\n  include ...</code></pre>\n"],["escape_bytea","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Quoting","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Quoting.html#method-i-escape_bytea","(value)","<p>Escapes binary strings for bytea input to the database.\n"],["establish_connection","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-establish_connection","(owner, spec)",""],["establish_connection","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-establish_connection","(spec = ENV[\"DATABASE_URL\"])","<p>Establishes the connection to the database. Accepts a hash as input where\nthe <code>:adapter</code> key must be specified …\n"],["except","ActiveRecord::SpawnMethods","classes/ActiveRecord/SpawnMethods.html#method-i-except","(*skips)","<p>Removes from the query the condition(s) specified in <code>skips</code>.\n\n<pre><code>Post.order('id asc').except(:order)       ...</code></pre>\n"],["exec_delete","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_delete","(sql, name, binds)","<p>Executes delete <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],["exec_delete","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_delete","(sql, name, binds)",""],["exec_delete","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-exec_delete","(sql, name, binds)",""],["exec_delete","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-exec_delete","(sql, name = 'SQL', binds = [])",""],["exec_delete","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-exec_delete","(sql, name = 'SQL', binds = [])",""],["exec_insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_insert","(sql, name, binds, pk = nil, sequence_name = nil)","<p>Executes insert <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],["exec_insert","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_insert","(sql, name, binds, pk = nil, sequence_name = nil)",""],["exec_insert","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-exec_insert","(sql, name, binds, pk = nil, sequence_name = nil)",""],["exec_migration","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-exec_migration","(conn, direction)",""],["exec_query","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_query","(sql, name = 'SQL', binds = [])","<p>Executes <code>sql</code> statement in the context of this connection using\n<code>binds</code> as the bind substitutes. <code>name</code> is …\n"],["exec_query","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_query","(sql, name = 'SQL', binds = [])",""],["exec_query","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-exec_query","(sql, name = 'SQL', binds = [])",""],["exec_query","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-exec_query","(sql, name = 'SQL', binds = [])",""],["exec_query","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-exec_query","(sql, name = nil, binds = [])",""],["exec_update","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_update","(sql, name, binds)","<p>Executes update <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],["exec_update","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_update","(sql, name, binds)",""],["exec_update","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-exec_update","(sql, name, binds)",""],["exec_update","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-exec_update","(sql, name = 'SQL', binds = [])",""],["exec_update","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-exec_update","(sql, name = 'SQL', binds = [])",""],["exec_without_stmt","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_without_stmt","(sql, name = 'SQL', binds = [])",""],["execute","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-execute","(sql, name = nil)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-execute","(sql, name = nil)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-execute","(sql, name = nil)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-execute","(sql, name = nil)","<p>Executes an SQL statement, returning a PGresult object on success or\nraising a PGError exception otherwise. …\n"],["execute","ActiveRecord::StatementCache","classes/ActiveRecord/StatementCache.html#method-i-execute","()",""],["execute_and_free","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-execute_and_free","(sql, name = nil)",""],["exists?","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-exists-3F","(conditions = :none)","<p>Returns <code>true</code> if a record exists in the table that matches the\n<code>id</code> or conditions given, or <code>false</code> otherwise. …\n"],["expand_hash_conditions_for_aggregates","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-expand_hash_conditions_for_aggregates","(attrs)","<p>Accepts a hash of SQL conditions and replaces those attributes that\ncorrespond to a <code>composed_of</code> relationship …\n"],["expire","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-expire","()",""],["explain","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-explain","(arel, binds = [])","<p>DATABASE STATEMENTS ======================================\n"],["explain","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-explain","(arel, binds = [])",""],["explain","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-explain","(arel, binds = [])","<p>DATABASE STATEMENTS ======================================\n"],["explain","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-explain","()","<p>Runs EXPLAIN on the query or queries triggered by this relation and returns\nthe result as a string.  …\n"],["extending","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-extending","(*modules, &block)","<p>Used to extend a scope with additional methods, either through a module or\nthrough a block provided. …\n"],["extension_enabled?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-extension_enabled-3F","(name)",""],["extensions","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-extensions","()","<p>A list of extensions, to be filled in by adapters that support them. At the\nmoment only postgresql does. …\n"],["extensions","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-extensions","()",""],["extract_bounds","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Range","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Range.html#method-i-extract_bounds","(value)",""],["extract_schema_and_table","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Utils","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Utils.html#method-i-extract_schema_and_table","(name)","<p>Returns an array of <code>[schema_name, table_name]</code> extracted from\n<code>name</code>. <code>schema_name</code> is nil if not specified …\n"],["extract_value_from_default","ActiveRecord::ConnectionAdapters::PostgreSQLColumn","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html#method-c-extract_value_from_default","(default)","<p>Extracts the value from a PostgreSQL column default definition.\n"],["fetch","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::TypeMap","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/TypeMap.html#method-i-fetch","(ftype, fmod)",""],["find","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-find","(*args, &block)","<p>Finds an object in the collection responding to the <code>id</code>. Uses\nthe same rules as <code>ActiveRecord::Base.find</code> …\n"],["find","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find","(*args)","<p>Find by id - This can either be a specific id (1), a list of ids (1, 5, 6),\nor an array of ids ([5, 6, …\n"],["find_by","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_by","(*args)","<p>Finds the first record matching the specified conditions. There is no\nimplied ordering so if order matters, …\n"],["find_by!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_by-21","(*args)","<p>Like <code>find_by</code>, except that if no record is found, raises an\n<code>ActiveRecord::RecordNotFound</code> error.\n"],["find_by_sql","ActiveRecord::Querying","classes/ActiveRecord/Querying.html#method-i-find_by_sql","(sql, binds = [])","<p>Executes a custom SQL query against your database and returns all the\nresults. The results will be returned …\n"],["find_each","ActiveRecord::Batches","classes/ActiveRecord/Batches.html#method-i-find_each","(options = {})","<p>Looping through a collection of records from the database (using the\n<code>all</code> method, for example) is very …\n"],["find_first","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_first","()",""],["find_in_batches","ActiveRecord::Batches","classes/ActiveRecord/Batches.html#method-i-find_in_batches","(options = {})","<p>Yields each batch of records that was found by the find\n<code>options</code> as an array. The size of each batch is …\n"],["find_last","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_last","()",""],["find_one","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_one","(id)",""],["find_or_create_by","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-find_or_create_by","(attributes, &block)","<p>Finds the first record with the given attributes, or creates a record with\nthe attributes if one is not …\n"],["find_or_create_by!","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-find_or_create_by-21","(attributes, &block)","<p>Like <code>find_or_create_by</code>, but calls <code>create!</code> so an\nexception is raised if the created record is invalid. …\n"],["find_or_initialize_by","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-find_or_initialize_by","(attributes, &block)","<p>Like <code>find_or_create_by</code>, but calls <code>new</code> instead of\n<code>create</code>.\n"],["find_some","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_some","(ids)",""],["find_take","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_take","()",""],["find_type","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields.html#method-c-find_type","(field)",""],["find_with_associations","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_with_associations","()",""],["find_with_ids","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_with_ids","(*ids)",""],["finder","ActiveRecord::DynamicMatchers::FindBy","classes/ActiveRecord/DynamicMatchers/FindBy.html#method-i-finder","()",""],["finder","ActiveRecord::DynamicMatchers::FindByBang","classes/ActiveRecord/DynamicMatchers/FindByBang.html#method-i-finder","()",""],["finder","ActiveRecord::DynamicMatchers::Finder","classes/ActiveRecord/DynamicMatchers/Finder.html#method-i-finder","()",""],["first","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-first","(*args)","<p>Returns the first record, or the first <code>n</code> records, from the\ncollection. If the collection is empty, the …\n"],["first","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-first","(limit = nil)","<p>Find the first record (or first N records if a parameter is supplied). If\nno order is defined it will …\n"],["first!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-first-21","()","<p>Same as <code>first</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found. Note that\n<code>first!</code> accepts …\n"],["fixture_is_cached?","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-fixture_is_cached-3F","(connection, table_name)",""],["fixtures","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-fixtures","(*fixture_set_names)",""],["format_paragraph","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-format_paragraph","(text, len = 72, indent = 2)","<p>Returns <code>text</code> wrapped at <code>len</code> columns and indented\n<code>indent</code> spaces.\n\n<pre><code>my_text = 'Here is a sample text with ...</code></pre>\n"],["freeze","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-freeze","()","<p>Clone and freeze the attributes hash such that associations are still\naccessible, even on destroyed records, …\n"],["from","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-from","(value, subquery_name = nil)","<p>Specifies table from which the records will be fetched. For example:\n\n<pre><code>Topic.select('title').from('posts') ...</code></pre>\n"],["from_json","ActiveModel::Serializers::JSON","classes/ActiveModel/Serializers/JSON.html#method-i-from_json","(json, include_root=include_root_in_json)","<p>Sets the model <code>attributes</code> from a JSON string. Returns\n<code>self</code>.\n\n<pre><code>class Person\n  include ActiveModel::Serializers::JSON ...</code></pre>\n"],["from_xml","ActiveModel::Serializers::Xml","classes/ActiveModel/Serializers/Xml.html#method-i-from_xml","(xml)","<p>Sets the model <code>attributes</code> from a JSON string. Returns\n<code>self</code>.\n\n<pre><code>class Person\n  include ActiveModel::Serializers::Xml ...</code></pre>\n"],["frozen?","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-frozen-3F","()","<p>Returns <code>true</code> if the attributes hash has been frozen.\n"],["full_message","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-full_message","(attribute, message)","<p>Returns a full message for a given attribute.\n\n<pre><code>person.errors.full_message(:name, 'is invalid') # =&gt; &quot;Name ...\n</code></pre>\n"],["full_messages","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-full_messages","()","<p>Returns all the full error messages in an array.\n\n<pre><code>class Person\n  validates_presence_of :name, :address, ...</code></pre>\n"],["full_messages_for","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-full_messages_for","(attribute)","<p>Returns all the full error messages for a given attribute in an array.\n\n<pre><code>class Person\n  validates_presence_of ...</code></pre>\n"],["generate_message","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-generate_message","(attribute, type = :invalid, options = {})","<p>Translates an error message in its default scope\n(<code>activemodel.errors.messages</code>).\n<p>Error messages are first …\n"],["generated_feature_methods","ActiveRecord::Core::ClassMethods","classes/ActiveRecord/Core/ClassMethods.html#method-i-generated_feature_methods","()",""],["get","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-get","(key)","<p>Get messages for <code>key</code>.\n\n<pre><code>person.errors.messages   # =&gt; {:name=&gt;[&quot;can not be nil&quot;]}\nperson.errors.get(:name) ...</code></pre>\n"],["group","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-group","(*args)","<p>Allows to specify a group attribute:\n\n<pre><code>User.group(:name)\n=&gt; SELECT &quot;users&quot;.* FROM &quot;users&quot; GROUP BY name</code></pre>\n"],["has_and_belongs_to_many","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_and_belongs_to_many","(name, scope = nil, options = {}, &extension)","<p>Specifies a many-to-many relationship with another class. This associates\ntwo classes via an intermediate …\n"],["has_attribute?","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-has_attribute-3F","(attr_name)","<p>Returns <code>true</code> if the given attribute is in the attributes hash,\notherwise <code>false</code>.\n\n<pre><code>class Person &lt; ActiveRecord::Base ...</code></pre>\n"],["has_key?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-has_key-3F","(attribute)","<p>aliases include?\n"],["has_many","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_many","(name, scope = nil, options = {}, &extension)","<p>Specifies a one-to-many association. The following methods for retrieval\nand query of collections of …\n"],["has_one","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_one","(name, scope = nil, options = {})","<p>Specifies a one-to-one association with another class. This method should\nonly be used if the other class …\n"],["has_secure_password","ActiveModel::SecurePassword::ClassMethods","classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password","(options = {})","<p>Adds methods to set and authenticate against a BCrypt password. This\nmechanism requires you to have a …\n"],["hash","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-hash","()","<p>Delegates to id in order to allow two records of the same type and id to\nwork with something like:\n\n<pre><code>[ Person.find(1), ...</code></pre>\n"],["having","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-having","(opts, *rest)","<p>Allows to specify a HAVING clause. Note that you can’t use HAVING without\nalso specifying a GROUP clause. …\n"],["headers","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-headers","(args = nil)","<p>Allows you to pass random and unusual headers to the new\n<code>Mail::Message</code> object which will add them to …\n"],["hstore","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-hstore","(name, options = {})",""],["hstore_to_string","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-hstore_to_string","(object)",""],["human","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-human","(options={})","<p>Transform the model name into a more humane format, using I18n. By default,\nit will underscore then humanize …\n"],["human_attribute_name","ActiveModel::Translation","classes/ActiveModel/Translation.html#method-i-human_attribute_name","(attribute, options = {})","<p>Transforms attribute names into a more human format, such as “First name”\ninstead of “first_name”. …\n"],["i18n_scope","ActiveModel::Translation","classes/ActiveModel/Translation.html#method-i-i18n_scope","()","<p>Returns the <code>i18n_scope</code> for the class. Overwrite if you want\ncustom lookup.\n"],["id","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id","()","<p>Returns the primary key value.\n"],["id=","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id-3D","(value)","<p>Sets the primary key value.\n"],["id?","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id-3F","()","<p>Queries the primary key value.\n"],["id_before_type_cast","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id_before_type_cast","()","<p>Returns the primary key value before type cast.\n"],["identify","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-identify","(label)","<p>Returns a consistent, platform-independent identifier for\n<code>label</code>. Identifiers are positive integers less …\n"],["identity","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-i-identity","(event)",""],["ids","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-ids","()","<p>Pluck all the ID’s for the relation using the table’s primary key\n\n<pre><code>Person.ids # SELECT people.id FROM people ...\n</code></pre>\n"],["in_clause_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-in_clause_length","()","<p>Returns the maximum number of elements in an IN (x,y,z) clause. nil means\nno limit.\n"],["include?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-include-3F","(attribute)","<p>Returns <code>true</code> if the error messages include an error for the\ngiven key <code>attribute</code>, <code>false</code> otherwise.\n\n<pre><code>person.errors.messages ...</code></pre>\n"],["include?","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-include-3F","(record)","<p>Returns <code>true</code> if the given object is present in the collection.\n\n<pre><code>class Person &lt; ActiveRecord::Base\n  has_many ...</code></pre>\n"],["includes","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-includes","(*args)","<p>Specify relationships to be included in the result set. For example:\n\n<pre><code>users = User.includes(:address)\nusers.each ...</code></pre>\n"],["increment","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-increment","(attribute, by = 1)","<p>Initializes <code>attribute</code> to zero if <code>nil</code> and adds the\nvalue passed as <code>by</code> (default is 1). The increment is …\n"],["increment!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-increment-21","(attribute, by = 1)","<p>Wrapper around <code>increment</code> that saves the record. This method\ndiffers from its non-bang version in that …\n"],["increment_counter","ActiveRecord::CounterCache::ClassMethods","classes/ActiveRecord/CounterCache/ClassMethods.html#method-i-increment_counter","(counter_name, id)","<p>Increment a numeric field by one, via a direct SQL update.\n<p>This method is used primarily for maintaining …\n"],["increment_open_transactions","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-increment_open_transactions","()",""],["index","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-index","(column_name, options = {})","<p>Adds a new index to the table. <code>column_name</code> can be a single\nSymbol, or an Array of Symbols. See SchemaStatements#add_index …\n"],["index","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-index","(column_name, options = {})","<p>Adds index options to the indexes hash, keyed by column name This is\nprimarily used to track indexes …\n"],["index_algorithms","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-index_algorithms","()","<p>A list of index algorithms, to be filled by adapters that support them.\nMySQL and PostgreSQL have support …\n"],["index_algorithms","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-index_algorithms","()",""],["index_algorithms","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-index_algorithms","()",""],["index_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_exists-3F","(table_name, column_name, options = {})","<p>Checks to see if an index exists on a table for a given index definition.\n\n<pre><code># Check an index exists\nindex_exists?(:suppliers, ...</code></pre>\n"],["index_exists?","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-index_exists-3F","(column_name, options = {})","<p>Checks to see if an index exists. See SchemaStatements#index_exists?\n"],["index_name","ActiveRecord::SchemaMigration","classes/ActiveRecord/SchemaMigration.html#method-c-index_name","()",""],["index_name_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_name_exists-3F","(table_name, index_name, default)","<p>Verifies the existence of an index with a given name.\n<p>The default argument is returned if the underlying …\n"],["index_name_for_remove","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_name_for_remove","(table_name, options = {})",""],["index_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-index_name_length","()","<p>Returns the maximum length of an index name.\n"],["index_name_length","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-index_name_length","()",""],["indexes","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-indexes","(table_name, name = nil)","<p>Returns an array of indexes for the given table.\n"],["indexes_per_table","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-indexes_per_table","()","<p>Returns the maximum number of indexes per table.\n"],["inet","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-inet","(name, options = {})",""],["infinity","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Range","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Range.html#method-i-infinity","(options = {})",""],["infinity?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Range","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Range.html#method-i-infinity-3F","(value)",""],["inheritance_column","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-inheritance_column","()","<p>Defines the name of the table column which will store the class name on\nsingle-table inheritance situations. …\n"],["inheritance_column=","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-inheritance_column-3D","(value)","<p>Sets the value of inheritance_column\n"],["init_with","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-init_with","(coder)","<p>Initialize an empty model object from <code>coder</code>.\n<code>coder</code> must contain the attributes necessary for initializing …\n"],["initialize_copy","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-initialize_copy","(other)",""],["initialize_copy","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-initialize_copy","(other)",""],["initialize_generated_modules","ActiveRecord::Core::ClassMethods","classes/ActiveRecord/Core/ClassMethods.html#method-i-initialize_generated_modules","()",""],["initialize_schema_migrations_table","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-initialize_schema_migrations_table","()",""],["initialize_schema_migrations_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-initialize_schema_migrations_table","()","<p>Should not be called normally, but this operation is non-destructive. The\nmigrations module handles this …\n"],["initialize_test_deliveries","ActionMailer::TestCase::Behavior","classes/ActionMailer/TestCase/Behavior.html#method-i-initialize_test_deliveries","()",""],["insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert","(arel, name = nil, pk = nil, id_value = nil, sequence_name = nil, binds = [])","<p>Returns the last auto-generated ID from the affected table.\n<p><code>id_value</code> will be returned unless the value ...\n"],["insert","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-insert","(values)",""],["insert_fixture","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert_fixture","(fixture, table_name)","<p>Inserts the given fixture into the table. Overridden in adapters that\nrequire something beyond a simple …\n"],["insert_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert_sql","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)","<p>Returns the last auto-generated ID from the affected table.\n"],["insert_sql","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-insert_sql","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)",""],["insert_sql","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-insert_sql","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)","<p>Executes an INSERT query and returns the new record’s ID\n"],["inspect","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-inspect","()","<p>Returns the contents of the record as a nicely formatted string.\n"],["inspect","ActiveRecord::Core::ClassMethods","classes/ActiveRecord/Core/ClassMethods.html#method-i-inspect","()","<p>Returns a string like ‘Post(id:integer, title:string, body:text)’\n"],["inspect","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-inspect","()",""],["instance_method_already_implemented?","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-instance_method_already_implemented-3F","(method_name)","<p>Raises a <code>ActiveRecord::DangerousAttributeError</code> exception when\nan Active Record method is defined in the …\n"],["instantiate","ActiveRecord::Persistence::ClassMethods","classes/ActiveRecord/Persistence/ClassMethods.html#method-i-instantiate","(record, column_types = {})","<p>Given an attributes hash, <code>instantiate</code> returns a new instance\nof the appropriate class.\n<p>For example, <code>Post.all</code> …\n"],["instantiate_all_loaded_fixtures","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-instantiate_all_loaded_fixtures","(object, load_instances = true)",""],["instantiate_fixtures","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-instantiate_fixtures","(object, fixture_set, load_instances = true)",""],["int4range","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-int4range","(name, options = {})",""],["int8range","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-int8range","(name, options = {})",""],["invalid?","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-invalid-3F","(context = nil)","<p>Performs the opposite of <code>valid?</code>. Returns <code>true</code> if\nerrors were added, <code>false</code> otherwise.\n\n<pre><code>class Person\n  include ...</code></pre>\n"],["inverse_of","ActiveRecord::Migration::CommandRecorder","classes/ActiveRecord/Migration/CommandRecorder.html#method-i-inverse_of","(command, args, &block)","<p>Returns the inverse of the given command. For example:\n\n<pre><code>recorder.inverse_of(:rename_table, [:old, :new]) ...</code></pre>\n"],["joined_includes_values","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-joined_includes_values","()","<p>Joins that are also marked for preloading. In which case we should just\neager load them. Note that this …\n"],["joins","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-joins","(*args)","<p>Performs a joins on <code>args</code>:\n\n<pre><code>User.joins(:posts)\n=&gt; SELECT &quot;users&quot;.* FROM &quot;users&quot; INNER JOIN &quot;posts&quot; ON &quot;posts&quot;.&quot;user_id&quot; ...</code></pre>\n"],["joins_per_query","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-joins_per_query","()","<p>Returns maximum number of joins in a single query.\n"],["json","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-json","(name, options = {})",""],["json_to_string","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-json_to_string","(object)",""],["key?","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-key-3F","(key)",""],["key?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::TypeMap","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/TypeMap.html#method-i-key-3F","(oid)",""],["key?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-key-3F","(key)",""],["key?","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-key-3F","(key)",""],["key?","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-key-3F","(key)",""],["keys","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-keys","()","<p>Returns all message keys.\n\n<pre><code>person.errors.messages # =&gt; {:name=&gt;[&quot;can not be nil&quot;, &quot;must be specified&quot;]} ...\n</code></pre>\n"],["kind","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-c-kind","()","<p>Returns the kind of the validator.\n\n<pre><code>PresenceValidator.kind   # =&gt; :presence\nUniquenessValidator.kind # ...\n</code></pre>\n"],["kind","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-i-kind","()","<p>Return the kind for this validator.\n\n<pre><code>PresenceValidator.new.kind   # =&gt; :presence\nUniquenessValidator.new.kind ...</code></pre>\n"],["klass","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-klass","()","<p>Returns the class for the macro.\n<p><code>composed_of :balance, class_name: 'Money'</code> returns the Money\nclass <code>has_many</code> ...\n"],["last","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-last","(*args)","<p>Returns the last record, or the last <code>n</code> records, from the\ncollection. If the collection is empty, the …\n"],["last","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-last","(limit = nil)","<p>Find the last record (or last N records if a parameter is supplied). If no\norder is defined it will order …\n"],["last","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-last","()",""],["last!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-last-21","()","<p>Same as <code>last</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found. Note that\n<code>last!</code> accepts no …\n"],["last_inserted_id","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-last_inserted_id","(result)",""],["last_inserted_id","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-last_inserted_id","(result)",""],["last_inserted_id","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-last_inserted_id","(result)",""],["last_inserted_id","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-last_inserted_id","(result)",""],["lease","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-lease","()",""],["length","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-length","()","<p>Returns the size of the collection calling <code>size</code> on the target.\nIf the collection has been already loaded, …\n"],["length","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-length","()",""],["length","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-length","()",""],["length","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-length","()",""],["length","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-length","()",""],["limit","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-limit","(value)","<p>Specifies a limit for the number of records to retrieve.\n\n<pre><code>User.limit(10) # generated SQL has 'LIMIT 10' ...\n</code></pre>\n"],["limited_update_conditions","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-limited_update_conditions","(where_sql, quoted_table_name, quoted_primary_key)",""],["limited_update_conditions","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-limited_update_conditions","(where_sql, quoted_table_name, quoted_primary_key)",""],["load","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-load","()","<p>Causes the records to be loaded from the database if they have not been\nloaded already. You can use this …\n"],["load_seed","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-load_seed","()",""],["load_target","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-load_target","()",""],["loaded?","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-loaded-3F","()","<p>Returns <code>true</code> if the association has been loaded, otherwise\n<code>false</code>.\n\n<pre><code>person.pets.loaded? # =&gt; false\nperson.pets ...</code></pre>\n"],["lock","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-lock","(locks = true)","<p>Specifies locking settings (default to <code>true</code>). For more\ninformation on locking, please see <code>ActiveRecord::Locking</code> …\n"],["lock!","ActiveRecord::Locking::Pessimistic","classes/ActiveRecord/Locking/Pessimistic.html#method-i-lock-21","(lock = true)","<p>Obtain a row lock on this record. Reloads the record to obtain the\nrequested lock. Pass an SQL locking …\n"],["locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_column","()","<p>The version column used for optimistic locking. Defaults to\n<code>lock_version</code>.\n"],["locking_column=","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_column-3D","(value)","<p>Set the column to use for optimistic locking. Defaults to\n<code>lock_version</code>.\n"],["locking_enabled?","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_enabled-3F","()","<p>Returns true if the <code>lock_optimistically</code> flag is set to true\n(which it is, by default) and the table includes …\n"],["log","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-log","(sql, name = \"SQL\", binds = [])",""],["logger","ActionMailer::LogSubscriber","classes/ActionMailer/LogSubscriber.html#method-i-logger","()",""],["logger","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-i-logger","()",""],["lookup_ancestors","ActiveModel::Translation","classes/ActiveModel/Translation.html#method-i-lookup_ancestors","()","<p>When localizing a string, it goes through the lookup returned by this\nmethod, which is used in ActiveModel::Name#human …\n"],["ltree","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-ltree","(name, options = {})",""],["macaddr","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-macaddr","(name, options = {})",""],["mail","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-mail","(headers = {}, &block)","<p>The main method that creates the message and renders the email templates.\nThere are two ways to call …\n"],["mailer","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-mailer","()","<p>Access the mailer instance.\n"],["mailer_class","ActionMailer::TestCase::Behavior::ClassMethods","classes/ActionMailer/TestCase/Behavior/ClassMethods.html#method-i-mailer_class","()",""],["mailer_name","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-mailer_name","()",""],["mailer_name","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-mailer_name","()",""],["many?","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-many-3F","(&block)","<p>Returns true if the collection has more than one record. Equivalent to\n<code>collection.size &gt; 1</code>.\n\n<pre><code>class Person ...</code></pre>\n"],["many?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-many-3F","()","<p>Returns true if there is more than one record.\n"],["mark_for_destruction","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-mark_for_destruction","()","<p>Marks this record to be destroyed as part of the parents save transaction.\nThis does <em>not</em> actually destroy …\n"],["marked_for_destruction?","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-marked_for_destruction-3F","()","<p>Returns whether or not this record will be destroyed as part of the parents\nsave transaction.\n<p>Only useful …\n"],["marshal_dump","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-marshal_dump","()",""],["marshal_load","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-marshal_load","(array)",""],["match","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-c-match","(model, name)",""],["maximum","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-maximum","(column_name, options = {})","<p>Calculates the maximum value on a given column. The value is returned with\nthe same data type of the …\n"],["merge","ActiveRecord::SpawnMethods","classes/ActiveRecord/SpawnMethods.html#method-i-merge","(other)","<p>Merges in the conditions from <code>other</code>, if <code>other</code> is\nan <code>ActiveRecord::Relation</code>. Returns an array representing …\n"],["message","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-message","()","<p>Access the message instance.\n"],["method_missing","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-method_missing","(method_name, *args)",""],["method_missing","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-method_missing","(method, *args, &block)","<p>Allows access to the object attributes, which are held in the hash returned\nby <code>attributes</code>, as though …\n"],["method_missing","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-method_missing","(method, *arguments, &block)",""],["migrate","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-migrate","(direction)",""],["migrate","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-migrate","(direction)","<p>Execute this migration in the named direction\n"],["migration_keys","ActiveRecord::ConnectionAdapters::ColumnDumper","classes/ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-migration_keys","()","<p>Lists the valid migration options\n"],["migration_keys","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-migration_keys","()","<p>Adds `:array` as a valid migration key\n"],["migrations_paths","ActiveRecord::Schema","classes/ActiveRecord/Schema.html#method-i-migrations_paths","()","<p>Returns the migrations paths.\n\n<pre><code>ActiveRecord::Schema.new.migrations_paths\n# =&gt; [&quot;db/migrate&quot;] # Rails migration ...\n</code></pre>\n"],["minimum","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-minimum","(column_name, options = {})","<p>Calculates the minimum value on a given column. The value is returned with\nthe same data type of the …\n"],["model_name","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-i-model_name","()","<p>Returns an ActiveModel::Name object for module. It can be used to retrieve\nall kinds of naming-related …\n"],["mtime","ActiveRecord::MigrationProxy","classes/ActiveRecord/MigrationProxy.html#method-i-mtime","()",""],["native_database_types","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-native_database_types","()",""],["native_database_types","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-native_database_types","()","<p>Returns a hash of mappings from the abstract data types to the native\ndatabase types. See TableDefinition#column …\n"],["new","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-new","(method_name=nil, *args)","<p>Instantiate a new mailer object. If <code>method_name</code> is not\n<code>nil</code>, the mailer will be initialized according …\n"],["new","ActionMailer::Collector","classes/ActionMailer/Collector.html#method-c-new","(context, &block)",""],["new","ActionMailer::NonInferrableMailerError","classes/ActionMailer/NonInferrableMailerError.html#method-c-new","(name)",""],["new","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-c-new","(base)","<p>Pass in the instance of the object that is using the errors object.\n\n<pre><code>class Person\n  def initialize\n    ...</code></pre>\n"],["new","ActiveModel::Model","classes/ActiveModel/Model.html#method-c-new","(params={})","<p>Initializes a new model with the given <code>params</code>.\n\n<pre><code>class Person\n  include ActiveModel::Model\n  attr_accessor ...</code></pre>\n"],["new","ActiveModel::Name","classes/ActiveModel/Name.html#method-c-new","(klass, namespace = nil, name = nil)","<p>Returns a new ActiveModel::Name instance. By default, the\n<code>namespace</code> and <code>name</code> option will take the namespace\n…\n"],["new","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-c-new","(options = {})","<p>Accepts options that will be made available through the\n<code>options</code> reader.\n"],["new","ActiveRecord::AssociationRelation","classes/ActiveRecord/AssociationRelation.html#method-c-new","(klass, table, association)",""],["new","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-new","(attributes = {}, &block)",""],["new","ActiveRecord::AttributeAssignmentError","classes/ActiveRecord/AttributeAssignmentError.html#method-c-new","(message, exception, attribute)",""],["new","ActiveRecord::ConnectionAdapters::AbstractAdapter::SchemaCreation","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter/SchemaCreation.html#method-c-new","(conn)",""],["new","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-c-new","(connection, logger, connection_options, config)","<p>FIXME: Make the first parameter more similar for the two adapters\n"],["new","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-c-new","()",""],["new","ActiveRecord::ConnectionAdapters::ConnectionManagement","classes/ActiveRecord/ConnectionAdapters/ConnectionManagement.html#method-c-new","(app)",""],["new","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-c-new","(spec)","<p>Creates a new ConnectionPool object. <code>spec</code> is a\nConnectionSpecification object which describes database …\n"],["new","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-c-new","(lock = Monitor.new)",""],["new","ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Reaper.html#method-c-new","(pool, frequency)",""],["new","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-c-new","()",""],["new","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-c-new","(connection, logger, connection_options, config)",""],["new","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-c-new","(connection, logger, connection_options, config)",""],["new","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-c-new","(connection, max = 1000)",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-c-new","(connection, logger, connection_parameters, config)","<p>Initializes and connects a PostgreSQL adapter.\n"],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Array","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Array.html#method-c-new","(subtype)",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Range","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Range.html#method-c-new","(subtype)",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::TypeMap","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/TypeMap.html#method-c-new","()",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Vector","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Vector.html#method-c-new","(delim, subtype)","<p><code>delim</code> corresponds to the `typdelim` column in the pg_types\ntable.  <code>subtype</code> is derived from the `typelem` ...\n"],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-c-new","(connection, max)",""],["new","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-c-new","(connection, logger, config)",""],["new","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-c-new","(connection, max)",""],["new","ActiveRecord::ConnectionAdapters::SQLite3Adapter::Version","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/Version.html#method-c-new","(version_string)",""],["new","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-c-new","(conn)",""],["new","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-c-new","(connection, max = 1000)",""],["new","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-c-new","(table_name, base)",""],["new","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-c-new","(types, name, temporary, options)",""],["new","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-c-new","(state = nil)",""],["new","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-c-new","(attributes = nil, options = {})","<p>New objects can be instantiated as either empty (pass no construction\nparameter) or pre-set with attributes …\n"],["new","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-c-new","(model, name)",""],["new","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-new","(connection, name, class_name, path)",""],["new","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-new","(*args, &block)","<p>Determines if one of the attributes passed in is the inheritance column,\nand if the inheritance column …\n"],["new","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-c-new","()",""],["new","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-new","(name = self.class.name, version = nil)",""],["new","ActiveRecord::Migration::CheckPending","classes/ActiveRecord/Migration/CheckPending.html#method-c-new","(app)",""],["new","ActiveRecord::Migration::CommandRecorder","classes/ActiveRecord/Migration/CommandRecorder.html#method-c-new","(delegate = nil)",""],["new","ActiveRecord::MigrationProxy","classes/ActiveRecord/MigrationProxy.html#method-c-new","(name, version, filename, scope)",""],["new","ActiveRecord::MultiparameterAssignmentErrors","classes/ActiveRecord/MultiparameterAssignmentErrors.html#method-c-new","(errors)",""],["new","ActiveRecord::QueryCache","classes/ActiveRecord/QueryCache.html#method-c-new","(app)",""],["new","ActiveRecord::QueryMethods::WhereChain","classes/ActiveRecord/QueryMethods/WhereChain.html#method-c-new","(scope)",""],["new","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-c-new","(macro, name, scope, options, active_record)",""],["new","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-c-new","(klass, table, values = {})",""],["new","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-new","(*args, &block)","<p>Initializes new record from relation while maintaining the current scope.\n<p>Expects arguments in the same …\n"],["new","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-c-new","(columns, rows, column_types = {})",""],["new","ActiveRecord::SQLCounter","classes/ActiveRecord/SQLCounter.html#method-c-new","(ignore = Regexp.union(self.class.ignored_sql))",""],["new","ActiveRecord::StaleObjectError","classes/ActiveRecord/StaleObjectError.html#method-c-new","(record, attempted_action)",""],["new","ActiveRecord::StatementCache","classes/ActiveRecord/StatementCache.html#method-c-new","()",""],["new","ActiveRecord::StatementInvalid","classes/ActiveRecord/StatementInvalid.html#method-c-new","(message, original_exception = nil)",""],["new","ActiveRecord::UnknownPrimaryKey","classes/ActiveRecord/UnknownPrimaryKey.html#method-c-new","(model)",""],["new_record?","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-new_record-3F","()","<p>Returns true if this object hasn’t been saved yet – that is, a record for\nthe object doesn’t exist in …\n"],["next_key","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-next_key","()",""],["next_migration_number","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-next_migration_number","(number)",""],["none","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-none","()","<p>Returns a chainable relation with zero records, specifically an instance of\nthe <code>ActiveRecord::NullRelation</code> …\n"],["not","ActiveRecord::QueryMethods::WhereChain","classes/ActiveRecord/QueryMethods/WhereChain.html#method-i-not","(opts, *rest)","<p>Returns a new relation expressing WHERE + NOT condition according to the\nconditions in the arguments. …\n"],["num_waiting","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-num_waiting","()","<p>Return the number of threads currently waiting on this queue.\n"],["numrange","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-numrange","(name, options = {})",""],["odd?","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-i-odd-3F","()",""],["offset","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-offset","(value)","<p>Specifies the number of rows to skip before returning rows.\n\n<pre><code>User.offset(10) # generated SQL has &quot;OFFSET ...\n</code></pre>\n"],["only","ActiveRecord::SpawnMethods","classes/ActiveRecord/SpawnMethods.html#method-i-only","(*onlies)","<p>Removes any condition from the query other than the one(s) specified in\n<code>onlies</code>.\n\n<pre><code>Post.order('id asc').only(:where) ...</code></pre>\n"],["open_transactions","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-open_transactions","()",""],["options_include_default?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-options_include_default-3F","(options)",""],["order","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-order","(*args)","<p>Allows to specify an order attribute:\n\n<pre><code>User.order('name')\n=&gt; SELECT &quot;users&quot;.* FROM &quot;users&quot; ORDER BY name ...</code></pre>\n"],["outside_transaction?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-outside_transaction-3F","()",""],["param_key","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-param_key","(record_or_class)","<p>Returns string to use for params names. It differs for namespaced models\nregarding whether it’s inside …\n"],["password=","ActiveModel::SecurePassword::InstanceMethodsOnActivation","classes/ActiveModel/SecurePassword/InstanceMethodsOnActivation.html#method-i-password-3D","(unencrypted_password)","<p>Encrypts the password into the <code>password_digest</code> attribute, only\nif the new password is not blank.\n\n<pre><code>class ...</code></pre>\n"],["password_confirmation=","ActiveModel::SecurePassword::InstanceMethodsOnActivation","classes/ActiveModel/SecurePassword/InstanceMethodsOnActivation.html#method-i-password_confirmation-3D","(unencrypted_password)",""],["pattern","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-c-pattern","()",""],["persisted?","ActiveModel::Model","classes/ActiveModel/Model.html#method-i-persisted-3F","()","<p>Indicates if the model is persisted. Default is <code>false</code>.\n\n<pre><code>class Person\n  include ActiveModel::Model\n  attr_accessor ...</code></pre>\n"],["persisted?","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-persisted-3F","()","<p>Returns true if the record is persisted, i.e. it’s not a new record and it\nwas not destroyed, otherwise …\n"],["pk_and_sequence_for","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-pk_and_sequence_for","(table)","<p>Returns a table’s primary key and belonging sequence.\n"],["pluck","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-pluck","(*column_names)","<p>Use <code>pluck</code> as a shortcut to select one or more attributes\nwithout loading a bunch of records just to grab …\n"],["plural","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-plural","(record_or_class)","<p>Returns the plural class name of a record or class.\n\n<pre><code>ActiveModel::Naming.plural(post)             # =&gt; ...\n</code></pre>\n"],["point_to_string","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-point_to_string","(point)",""],["poll","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-poll","(timeout = nil)","<p>Remove the head of the queue.\n<p>If <code>timeout</code> is not given, remove and return the head the queue\nif the number …\n"],["populate_with_current_scope_attributes","ActiveRecord::Scoping","classes/ActiveRecord/Scoping.html#method-i-populate_with_current_scope_attributes","()",""],["postgresql_version","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-postgresql_version","()","<p>Returns the version of the connected PostgreSQL server.\n"],["prefetch_primary_key?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-prefetch_primary_key-3F","(table_name = nil)","<p>Should primary key values be selected from their corresponding sequence\nbefore the insert statement? …\n"],["prefix","ActiveRecord::DynamicMatchers::FindBy","classes/ActiveRecord/DynamicMatchers/FindBy.html#method-c-prefix","()",""],["prefix","ActiveRecord::DynamicMatchers::FindByBang","classes/ActiveRecord/DynamicMatchers/FindByBang.html#method-c-prefix","()",""],["prefix","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-c-prefix","()",""],["preload","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-preload","(*args)","<p>Allows preloading of <code>args</code>, in the same way that\n<code>includes</code> does:\n\n<pre><code>User.preload(:posts)\n=&gt; SELECT &quot;posts&quot;.* ...</code></pre>\n"],["prepare_column_options","ActiveRecord::ConnectionAdapters::ColumnDumper","classes/ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-prepare_column_options","(column, types)","<p>This can be overridden on a Adapter level basis to support other extended\ndatatypes (Example: Adding …\n"],["prepare_column_options","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-prepare_column_options","(column, types)","<p>Adds `:array` option to the default set provided by the AbstractAdapter\n"],["pretty_print","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-pretty_print","(q)",""],["previous_changes","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-previous_changes","()","<p>Returns a hash of attributes that were changed before the model was saved.\n\n<pre><code>person.name # =&gt; &quot;bob&quot;\nperson.name ...</code></pre>\n"],["primary_key","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-primary_key","()","<p>Defines the primary key field – can be overridden in subclasses.\nOverwriting will negate any effect …\n"],["primary_key","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-primary_key","(table)","<p>Returns just a table’s primary key\n"],["primary_key","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-primary_key","(table)","<p>Returns just a table’s primary key\n"],["primary_key","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::TableDefinition","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/TableDefinition.html#method-i-primary_key","(name, type = :primary_key, options = {})","<p>Defines the primary key field. Use of the native PostgreSQL UUID type is\nsupported, and can be used by …\n"],["primary_key","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-primary_key","(name, type = :primary_key, options = {})","<p>Appends a primary key definition to the table definition. Can be called\nmultiple times, but this is probably …\n"],["primary_key=","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-primary_key-3D","(value)","<p>Sets the name of the primary key column.\n\n<pre><code>class Project &lt; ActiveRecord::Base\n  self.primary_key = 'sysid' ...</code></pre>\n"],["primary_keys","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-primary_keys","(table_name = nil)",""],["proxy_association","ActiveRecord::AssociationRelation","classes/ActiveRecord/AssociationRelation.html#method-i-proxy_association","()",""],["proxy_association","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-proxy_association","()",""],["purge","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-purge","(configuration)",""],["query_attribute","ActiveRecord::AttributeMethods::Query","classes/ActiveRecord/AttributeMethods/Query.html#method-i-query_attribute","(attr_name)",""],["quote","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-quote","(value, column = nil)","<p>QUOTING ==================================================\n"],["quote","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote","(value, column = nil)","<p>Quotes the column value to help prevent SQL injection attacks.\n"],["quote","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-quote","(value, column = nil)","<p>QUOTING ==================================================\n"],["quote_column_name","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_column_name","(column_name)","<p>Quotes the column name. Defaults to no quoting.\n"],["quote_string","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-quote_string","(string)","<p>QUOTING ==================================================\n"],["quote_string","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_string","(s)","<p>Quotes a string, escaping any ‘ (single quote) and \\ (backslash)\ncharacters.\n"],["quote_table_name","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Quoting","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Quoting.html#method-i-quote_table_name","(name)","<p>Checks the following cases:\n<p>table_name\n<p>“table.name”\n"],["quote_table_name","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_table_name","(table_name)","<p>Quotes the table name. Defaults to column name quoting.\n"],["quote_table_name_for_assignment","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Quoting","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Quoting.html#method-i-quote_table_name_for_assignment","(table, attr)",""],["quote_table_name_for_assignment","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_table_name_for_assignment","(table, attr)","<p>Override to return the quoted table name for assignment. Defaults to table\nquoting.\n<p>This works for mysql …\n"],["quote_table_name_for_assignment","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-quote_table_name_for_assignment","(table, attr)",""],["quoted_columns_for_index","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-quoted_columns_for_index","(column_names, options = {})",""],["quoted_columns_for_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-quoted_columns_for_index","(column_names, options = {})","<p>Overridden by the mysql adapter for supporting index lengths\n"],["quoted_date","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_date","(value)",""],["quoted_false","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-quoted_false","()",""],["quoted_false","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_false","()",""],["quoted_id","ActiveRecord::Sanitization","classes/ActiveRecord/Sanitization.html#method-i-quoted_id","()","<p>TODO: Deprecate this\n"],["quoted_locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-quoted_locking_column","()","<p>Quote the column name used for optimistic locking.\n"],["quoted_primary_key","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-quoted_primary_key","()","<p>Returns a quoted version of the primary key name, used to construct SQL\nstatements.\n"],["quoted_table_name","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-quoted_table_name","()","<p>Returns a quoted version of the table name, used to construct SQL\nstatements.\n"],["quoted_true","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-quoted_true","()",""],["quoted_true","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_true","()",""],["range_to_string","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-range_to_string","(object)",""],["raw_connection","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-raw_connection","()","<p>Provides access to the underlying database driver for this adapter. For\nexample, this method returns …\n"],["raw_write_attribute","ActiveRecord::AttributeMethods::Write","classes/ActiveRecord/AttributeMethods/Write.html#method-i-raw_write_attribute","(attr_name, value)",""],["read_attribute","ActiveRecord::AttributeMethods::Read","classes/ActiveRecord/AttributeMethods/Read.html#method-i-read_attribute","(attr_name)","<p>Returns the value of the attribute identified by <code>attr_name</code>\nafter it has been typecast (for example, “2004-12-12” …\n"],["read_attribute_before_type_cast","ActiveRecord::AttributeMethods::BeforeTypeCast","classes/ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-read_attribute_before_type_cast","(attr_name)","<p>Returns the value of the attribute identified by <code>attr_name</code>\nbefore typecasting and deserialization.\n\n<pre><code>class ...</code></pre>\n"],["read_store_attribute","ActiveRecord::Store","classes/ActiveRecord/Store.html#method-i-read_store_attribute","(store_attribute, key)",""],["readonly","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-readonly","(value = true)","<p>Sets readonly attributes for the returned relation. If value is true\n(default), attempting to update …\n"],["readonly!","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-readonly-21","()","<p>Marks this record as read only.\n"],["readonly?","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-readonly-3F","()","<p>Returns <code>true</code> if the record is read only. Records loaded\nthrough joins with piggy-back attributes will …\n"],["readonly_attributes","ActiveRecord::ReadonlyAttributes::ClassMethods","classes/ActiveRecord/ReadonlyAttributes/ClassMethods.html#method-i-readonly_attributes","()","<p>Returns an array of all the attributes that have been specified as\nreadonly.\n"],["reap","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-reap","()","<p>Removes dead connections from the pool.  A dead connection can occur if a\nprogrammer forgets to close …\n"],["receive","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-receive","(raw_mail)","<p>Receives a raw email, parses it into an email object, decodes it,\ninstantiates a new mailer, and passes …\n"],["receive","ActionMailer::LogSubscriber","classes/ActionMailer/LogSubscriber.html#method-i-receive","(event)",""],["reconnect!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-reconnect-21","()","<p>Disconnects from the database if already connected, and establishes a new\nconnection with the database. …\n"],["reconnect!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-reconnect-21","()",""],["reconnect!","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-reconnect-21","()",""],["reconnect!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-reconnect-21","()","<p>Close then reopen the connection.\n"],["record","ActiveRecord::Migration::CommandRecorder","classes/ActiveRecord/Migration/CommandRecorder.html#method-i-record","(*command, &block)","<p>record <code>command</code>. <code>command</code> should be a method name\nand arguments. For example:\n\n<pre><code>recorder.record(:method_name, ...</code></pre>\n"],["recreate_database","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-recreate_database","(name, options = {})","<p>Drops the database specified on the <code>name</code> attribute and creates\nit again using the provided <code>options</code>.\n"],["references","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-references","(*args)","<p>Adds a reference. Optionally adds a <code>type</code> column, if\n<code>:polymorphic</code> option is provided. <code>references</code> and \n…\n"],["references","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-references","(*args)",""],["references","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-references","(*args)","<p>Used to indicate that an association is referenced by an SQL string, and\nshould therefore be JOINed in …\n"],["reflect_on_aggregation","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_aggregation","(aggregation)","<p>Returns the AggregateReflection object for the named\n<code>aggregation</code> (use the symbol).\n\n<pre><code>Account.reflect_on_aggregation(:balance) ...</code></pre>\n"],["reflect_on_all_aggregations","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_aggregations","()","<p>Returns an array of AggregateReflection objects for all the aggregations in\nthe class.\n"],["reflect_on_all_associations","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_associations","(macro = nil)","<p>Returns an array of AssociationReflection objects for all the associations\nin the class. If you only …\n"],["reflect_on_all_autosave_associations","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_autosave_associations","()","<p>Returns an array of AssociationReflection objects for all associations\nwhich have <code>:autosave</code> enabled. …\n"],["reflect_on_association","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_association","(association)","<p>Returns the AssociationReflection object for the <code>association</code>\n(use the symbol).\n\n<pre><code>Account.reflect_on_association(:owner) ...</code></pre>\n"],["register_interceptor","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-register_interceptor","(interceptor)","<p>Register an Interceptor which will be called before mail is sent. Either a\nclass or a string can be passed …\n"],["register_interceptors","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-register_interceptors","(*interceptors)","<p>Register one or more Interceptors which will be called before mail is sent.\n"],["register_observer","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-register_observer","(observer)","<p>Register an Observer which will be notified when mail is delivered. Either\na class or a string can be …\n"],["register_observers","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-register_observers","(*observers)","<p>Register one or more Observers which will be notified when mail is\ndelivered.\n"],["register_task","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-register_task","(pattern, task)",""],["register_type","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields.html#method-c-register_type","(type_id, type)","<p>Register an MySQL <code>type_id</code> with a typecasting object in\n<code>type</code>.\n"],["register_type","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID.html#method-c-register_type","(name, type)","<p>Register an OID type named <code>name</code> with a typcasting object in\n<code>type</code>.  <code>name</code> should correspond to the `typname` …\n"],["registered_type?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID.html#method-c-registered_type-3F","(name)","<p>Is <code>name</code> a registered type?\n"],["release_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-release_connection","(with_id = current_connection_id)","<p>Signal that the thread is finished with the current connection.\n#release_connection releases the connection-thread …\n"],["release_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-release_savepoint","()",""],["release_savepoint","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-release_savepoint","()",""],["release_savepoint","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-release_savepoint","()",""],["release_savepoint","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-release_savepoint","()",""],["reload","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-reload","(options = nil)","<p>Reloads the attributes of the object as usual and clears\n<code>marked_for_destruction</code> flag.\n"],["reload","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-reload","(options = nil)","<p>Reloads the record from the database.\n<p>This method finds record by its primary key (which could be assigned …\n"],["reload","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-reload","()","<p>Forces reloading of relation.\n"],["remove","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-remove","(conn)","<p>Remove a connection from the connection pool.  The connection will remain\nopen and active but will no …\n"],["remove","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove","(*column_names)","<p>Removes the column(s) from the table definition.\n\n<pre><code>t.remove(:qualification)\nt.remove(:qualification, :experience)\n</code></pre>\n"],["remove_belongs_to","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_belongs_to","(table_name, ref_name, options = {})",""],["remove_belongs_to","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_belongs_to","(*args)",""],["remove_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_column","(table_name, column_name, type = nil, options = {})","<p>Removes the column from the table definition.\n\n<pre><code>remove_column(:suppliers, :qualification)\n</code></pre>\n<p>The <code>type</code> and <code>options</code> …\n"],["remove_column","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-remove_column","(name)",""],["remove_column_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-remove_column_sql","(table_name, column_name, type = nil, options = {})",""],["remove_columns","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_columns","(table_name, *column_names)","<p>Removes the given columns from the table definition.\n\n<pre><code>remove_columns(:suppliers, :qualification, :experience)\n</code></pre>\n"],["remove_columns_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-remove_columns_sql","(table_name, *column_names)",""],["remove_connection","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-remove_connection","(owner)","<p>Remove the connection for this class. This will close the active connection\nand the defined connection …\n"],["remove_connection","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-remove_connection","(klass = self)",""],["remove_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_index","(table_name, options = {})","<p>Removes the given index from the table.\n<p>Removes the <code>index_accounts_on_column</code> in the\n<code>accounts</code> table.\n\n<pre><code>remove_index ...</code></pre>\n"],["remove_index","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_index","(options = {})","<p>Removes the given index from the table.\n<p>Remove the index_table_name_on_column in the table_name table …\n"],["remove_index_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-remove_index_sql","(table_name, options = {})",""],["remove_reference","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_reference","(table_name, ref_name, options = {})","<p>Removes the reference(s). Also removes a <code>type</code> column if one\nexists. <code>remove_reference</code>, <code>remove_references</code> …\n"],["remove_references","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_references","(*args)","<p>Removes a reference. Optionally removes a <code>type</code> column.\n<code>remove_references</code> and <code>remove_belongs_to</code> are\nacceptable. …\n"],["remove_timestamps","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_timestamps","(table_name)","<p>Removes the timestamp columns (<code>created_at</code> and\n<code>updated_at</code>) from the table definition.\n\n<pre><code>remove_timestamps(:suppliers)\n</code></pre>\n"],["remove_timestamps","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_timestamps","()","<p>Removes the timestamp columns (<code>created_at</code> and\n<code>updated_at</code>) from the table.\n\n<pre><code>t.remove_timestamps\n</code></pre>\n"],["remove_timestamps_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-remove_timestamps_sql","(table_name)",""],["rename","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-rename","(column_name, new_column_name)","<p>Renames a column.\n\n<pre><code>t.rename(:description, :name)\n</code></pre>\n"],["rename_column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-rename_column","(table_name, column_name, new_column_name)","<p>Renames a column in a table.\n"],["rename_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_column","(table_name, column_name, new_column_name)","<p>Renames a column.\n\n<pre><code>rename_column(:suppliers, :description, :name)\n</code></pre>\n"],["rename_column_indexes","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_column_indexes","(table_name, column_name, new_column_name)",""],["rename_column_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-rename_column_sql","(table_name, column_name, new_column_name)",""],["rename_index","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-rename_index","(table_name, old_name, new_name)",""],["rename_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_index","(table_name, old_name, new_name)","<p>Renames an index.\n<p>Rename the <code>index_people_on_last_name</code> index to\n<code>index_users_on_last_name</code>:\n\n<pre><code>rename_index ...</code></pre>\n"],["rename_index","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-rename_index","(index_name, new_index_name)","<p>Renames the given index on the table.\n\n<pre><code>t.rename_index(:user_id, :account_id)\n</code></pre>\n"],["rename_table","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n<p>Example:\n\n<pre><code>rename_table('octopuses', 'octopi')\n</code></pre>\n"],["rename_table","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table. Also renames a table’s primary key sequence if the\nsequence name matches the Active …\n"],["rename_table","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n<p>Example:\n\n<pre><code>rename_table('octopuses', 'octopi')\n</code></pre>\n"],["rename_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n\n<pre><code>rename_table('octopuses', 'octopi')\n</code></pre>\n"],["rename_table_indexes","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_table_indexes","(table_name, new_name)",""],["render_bind","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-i-render_bind","(column, value)",""],["reorder","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-reorder","(*args)","<p>Replaces any existing order defined on the relation with the specified\norder.\n\n<pre><code>User.order('email DESC').reorder('id ...</code></pre>\n"],["replace","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-replace","(other_array)","<p>Replaces this collection with <code>other_array</code>. This will perform a\ndiff and delete/add only records that …\n"],["require_fixture_classes","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-require_fixture_classes","(fixture_set_names = nil)",""],["requires_reloading?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-requires_reloading-3F","()","<p>Returns true if its required to reload the connection between requests for\ndevelopment mode. This is …\n"],["requires_reloading?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-requires_reloading-3F","()",""],["reset","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-reset","()",""],["reset!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-reset-21","()","<p>Reset the state of this connection, directing the DBMS to clear\ntransactions and other connection-related …\n"],["reset!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-reset-21","()",""],["reset!","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-reset-21","()",""],["reset!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-reset-21","()",""],["reset_cache","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-reset_cache","()",""],["reset_column_information","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-reset_column_information","()","<p>Resets all the cached information about columns, which will cause them to\nbe reloaded on the next request. …\n"],["reset_counters","ActiveRecord::CounterCache::ClassMethods","classes/ActiveRecord/CounterCache/ClassMethods.html#method-i-reset_counters","(id, *counters)","<p>Resets one or more counter caches to their correct value using an SQL count\nquery. This is useful when …\n"],["reset_locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-reset_locking_column","()","<p>Reset the column used for optimistic locking back to the\n<code>lock_version</code> default.\n"],["reset_runtime","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-c-reset_runtime","()",""],["reset_sequence!","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-reset_sequence-21","(table, column, sequence = nil)","<p>Set the sequence to the max value of the table’s column.\n"],["respond_to?","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-respond_to-3F","(method, include_private_methods = false)",""],["respond_to?","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-respond_to-3F","(name, include_private = false)","<p>A Person object with a name attribute can ask\n<code>person.respond_to?(:name)</code>,\n<code>person.respond_to?(:name=)</code>, …\n"],["respond_to_without_attributes?","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-respond_to_without_attributes-3F","(method, include_private_methods = false)","<p>A <code>Person</code> instance with a <code>name</code> attribute can ask\n<code>person.respond_to?(:name)</code>,\n<code>person.respond_to?(:name=)</code> …\n"],["result","ActiveRecord::DynamicMatchers::Finder","classes/ActiveRecord/DynamicMatchers/Finder.html#method-i-result","()","<p>Extended in activerecord-deprecated_finders\n"],["retrieve_connection","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-retrieve_connection","()",""],["retrieve_connection_pool","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-retrieve_connection_pool","(klass)","<p>Retrieving the connection pool happens a lot so we cache it in\n@class_to_pool. This makes retrieving …\n"],["reverse_order","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-reverse_order","()","<p>Reverse the existing order clause on the relation.\n\n<pre><code>User.order('name ASC').reverse_order # generated SQL ...\n</code></pre>\n"],["reversible","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-reversible","()","<p>Used to specify an operation that can be run in one direction or another.\nCall the methods <code>up</code> and <code>down</code> …\n"],["revert","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-revert","(*migration_classes)","<p>Reverses the migration commands for the given block and the given\nmigrations.\n<p>The following migration …\n"],["revert","ActiveRecord::Migration::CommandRecorder","classes/ActiveRecord/Migration/CommandRecorder.html#method-i-revert","()","<p>While executing the given block, the recorded will be in reverting mode.\nAll commands recorded will end …\n"],["reverting?","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-reverting-3F","()",""],["rollback_active_record_state!","ActiveRecord::Transactions","classes/ActiveRecord/Transactions.html#method-i-rollback_active_record_state-21","()","<p>Reset id and @new_record if the transaction rolls back.\n"],["rollback_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-rollback_db_transaction","()","<p>Rolls back the transaction (and turns on auto-committing). Must be done if\nthe transaction block raises …\n"],["rollback_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-rollback_db_transaction","()","<p>Aborts a transaction.\n"],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-rollback_to_savepoint","()",""],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-rollback_to_savepoint","()",""],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-rollback_to_savepoint","()",""],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-rollback_to_savepoint","()",""],["rolledback?","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-rolledback-3F","()",""],["route_key","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-route_key","(record_or_class)","<p>Returns string to use while generating route names. It differs for\nnamespaced models regarding whether …\n"],["run","ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Reaper.html#method-i-run","()",""],["run","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-run","(*migration_classes)","<p>Runs the given migration classes. Last argument can specify options:\n<p>:direction (default is :up)\n<p>:revert …\n"],["run_in_transaction?","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-run_in_transaction-3F","()",""],["runtime","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-c-runtime","()",""],["runtime=","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-c-runtime-3D","(value)",""],["sanitize_conditions","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_conditions","(condition, table_name = self.table_name)",""],["sanitize_limit","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-sanitize_limit","(limit)","<p>Sanitizes the given LIMIT parameter in order to prevent SQL injection.\n<p>The <code>limit</code> may be anything that …\n"],["sanitize_sql","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql","(condition, table_name = self.table_name)",""],["sanitize_sql_array","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_array","(ary)","<p>Accepts an array of conditions. The array has each value sanitized and\ninterpolated into the SQL statement. …\n"],["sanitize_sql_for_assignment","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_for_assignment","(assignments, default_table_name = self.table_name)","<p>Accepts an array, hash, or string of SQL conditions and sanitizes them into\na valid SQL fragment for …\n"],["sanitize_sql_for_conditions","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_for_conditions","(condition, table_name = self.table_name)","<p>Accepts an array, hash, or string of SQL conditions and sanitizes them into\na valid SQL fragment for …\n"],["sanitize_sql_hash","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_hash","(attrs, default_table_name = self.table_name)",""],["sanitize_sql_hash_for_assignment","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_hash_for_assignment","(attrs, table)","<p>Sanitizes a hash of attribute/value pairs into SQL conditions for a SET\nclause.\n\n<pre><code>{ status: nil, group_id: ...</code></pre>\n"],["sanitize_sql_hash_for_conditions","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_hash_for_conditions","(attrs, default_table_name = self.table_name)","<p>Sanitizes a hash of attribute/value pairs into SQL conditions for a WHERE\nclause.\n\n<pre><code>{ name: &quot;foo'bar&quot;, group_id: ...</code></pre>\n"],["save","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-save","(*)","<p>Saves the model.\n<p>If the model is new a record gets created in the database, otherwise the\nexisting record …\n"],["save","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-save","(options={})","<p>The validation process on save can be skipped by passing <code>validate:\nfalse</code>. The regular Base#save method …\n"],["save!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-save-21","(*)","<p>Saves the model.\n<p>If the model is new a record gets created in the database, otherwise the\nexisting record …\n"],["save!","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-save-21","(options={})","<p>Attempts to save the record just like Base#save but will raise a\n<code>RecordInvalid</code> exception instead of returning …\n"],["say","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-say","(message, subitem=false)",""],["say_with_time","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-say_with_time","(message)",""],["schema_cache=","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-schema_cache-3D","(cache)",""],["schema_creation","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-schema_creation","()",""],["schema_creation","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-schema_creation","()",""],["schema_creation","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-schema_creation","()",""],["schema_exists?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-schema_exists-3F","(name)","<p>Returns true if schema exists.\n"],["schema_names","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-schema_names","()","<p>Returns an array of schema names.\n"],["schema_search_path","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-schema_search_path","()","<p>Returns the active schema search path.\n"],["schema_search_path=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-schema_search_path-3D","(schema_csv)","<p>Sets the schema search path to a string of comma-separated schema names.\nNames beginning with $ have …\n"],["scope","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-scope","()","<p>Returns a <code>Relation</code> object for the records in this association\n"],["scope","ActiveRecord::Scoping::Named::ClassMethods","classes/ActiveRecord/Scoping/Named/ClassMethods.html#method-i-scope","(name, body, &block)","<p>Adds a class method for retrieving and querying objects. A scope represents\na narrowing of a database …\n"],["scope_for_create","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-scope_for_create","()",""],["scoping","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-scoping","()","<p>We don’t want this object to be put on the scoping stack, because that\ncould create an infinite loop …\n"],["scoping","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-scoping","()","<p>Scope all queries to the current scope.\n\n<pre><code>Comment.where(post_id: 1).scoping do\n  Comment.first\nend\n# =&gt; ...\n</code></pre>\n"],["select","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-select","(select = nil, &block)","<p>Works in two ways.\n<p><strong>First:</strong> Specify a subset of fields to be selected from the\nresult set.\n\n<pre><code>class Person &lt; ...</code></pre>\n"],["select","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select","(sql, name = nil, binds = [])","<p>Returns an array of record hashes with the column names as keys and column\nvalues as values.\n"],["select","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-select","(sql, name = nil, binds = [])","<p>Returns an array of record hashes with the column names as keys and column\nvalues as values.\n"],["select","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-select","(*fields)","<p>Works in two unique ways.\n<p>First: takes a block so it can be used just like Array#select.\n\n<pre><code>Model.all.select ...</code></pre>\n"],["select_all","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_all","(arel, name = nil, binds = [])","<p>Returns an array of record hashes with the column names as keys and column\nvalues as values.\n"],["select_all","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-select_all","(arel, name = nil, binds = [])",""],["select_one","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_one","(arel, name = nil, binds = [])","<p>Returns a record hash with the column names as keys and column values as\nvalues.\n"],["select_rows","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_rows","(sql, name = nil)","<p>Returns an array of arrays containing the field values. Order is the same\nas that returned by <code>columns</code> …\n"],["select_rows","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-select_rows","(sql, name = nil)","<p>Returns an array of arrays containing the field values. Order is the same\nas that returned by <code>columns</code> …\n"],["select_rows","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-select_rows","(sql, name = nil)","<p>DATABASE STATEMENTS ======================================\n"],["select_rows","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-select_rows","(sql, name = nil)","<p>Executes a SELECT query and returns an array of rows. Each row is an array\nof field values.\n"],["select_rows","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-select_rows","(sql, name = nil)",""],["select_value","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_value","(arel, name = nil, binds = [])","<p>Returns a single value from a record\n"],["select_values","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_values","(arel, name = nil)","<p>Returns an array of the values of the first column in a select:\n\n<pre><code>select_values(&quot;SELECT id FROM companies ...</code></pre>\n"],["sequence_name","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-sequence_name","()",""],["sequence_name=","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-sequence_name-3D","(value)","<p>Sets the name of the sequence to use when generating ids to the given\nvalue, or (if the value is nil …\n"],["serial_sequence","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-serial_sequence","(table, column)",""],["serializable_hash","ActiveModel::Serialization","classes/ActiveModel/Serialization.html#method-i-serializable_hash","(options = nil)","<p>Returns a serialized hash of your object.\n\n<pre><code>class Person\n  include ActiveModel::Serialization\n\n  attr_accessor ...</code></pre>\n"],["serializable_hash","ActiveRecord::Serialization","classes/ActiveRecord/Serialization.html#method-i-serializable_hash","(options = nil)",""],["serialize","ActiveRecord::AttributeMethods::Serialization::ClassMethods","classes/ActiveRecord/AttributeMethods/Serialization/ClassMethods.html#method-i-serialize","(attr_name, class_name = Object)","<p>If you have an attribute that needs to be saved to the database as an\nobject, and retrieved as the same …\n"],["serialized_attributes","ActiveRecord::AttributeMethods::Serialization","classes/ActiveRecord/AttributeMethods/Serialization.html#method-i-serialized_attributes","()","<p><strong>DEPRECATED</strong>: Use\nActiveRecord::AttributeMethods::Serialization::ClassMethods#serialized_attributes\nclass ...\n"],["serialized_attributes","ActiveRecord::AttributeMethods::Serialization::ClassMethods","classes/ActiveRecord/AttributeMethods/Serialization/ClassMethods.html#method-i-serialized_attributes","","<p>Returns a hash of all the attributes that have been specified for\nserialization as keys and their class …\n"],["session_auth=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-session_auth-3D","(user)","<p>Set the authorized user for this session\n"],["set","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-set","(key, value)","<p>Set messages for <code>key</code> to <code>value</code>.\n\n<pre><code>person.errors.get(:name) # =&gt; [&quot;can not be nil&quot;]\nperson.errors.set(:name, ...</code></pre>\n"],["set_content_type","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-set_content_type","(m, user_content_type, class_default)",""],["set_expected_mail","ActionMailer::TestCase::Behavior","classes/ActionMailer/TestCase/Behavior.html#method-i-set_expected_mail","()",""],["set_fixture_class","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-set_fixture_class","(class_names = {})","<p>Sets the model class for a fixture when the class name cannot be inferred\nfrom the fixture name.\n<p>Examples: …\n"],["set_name_cache","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-c-set_name_cache","(name, value)",""],["set_standard_conforming_strings","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-set_standard_conforming_strings","()","<p>Enable standard-conforming strings if available.\n"],["set_state","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-set_state","(state)",""],["setup_fixture_accessors","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-setup_fixture_accessors","(fixture_set_names = nil)",""],["setup_fixtures","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-setup_fixtures","()",""],["show_variable","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-show_variable","(name)","<p>SHOW VARIABLES LIKE ‘name’\n"],["signature","ActiveRecord::DynamicMatchers::Finder","classes/ActiveRecord/DynamicMatchers/Finder.html#method-i-signature","()","<p>Extended in activerecord-deprecated_finders\n"],["singular","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-singular","(record_or_class)","<p>Returns the singular class name of a record or class.\n\n<pre><code>ActiveModel::Naming.singular(post)             # ...\n</code></pre>\n"],["singular_route_key","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-singular_route_key","(record_or_class)","<p>Returns string to use while generating route names. It differs for\nnamespaced models regarding whether …\n"],["size","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-size","()","<p>Returns the number of error messages.\n\n<pre><code>person.errors.add(:name, &quot;can't be blank&quot;)\nperson.errors.size # ...\n</code></pre>\n"],["size","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-size","()","<p>Returns the size of the collection. If the collection hasn’t been loaded,\nit executes a <code>SELECT COUNT(*)</code> …\n"],["size","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-size","()",""],["size","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-i-size","()",""],["size","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-size","()","<p>Returns size of the records.\n"],["slice","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-slice","(*methods)","<p>Returns a hash of the given methods with their names as keys and returned\nvalues as values.\n"],["sql","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-i-sql","(event)",""],["sql_for_insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-sql_for_insert","(sql, pk, id_value, sequence_name, binds)",""],["sql_for_insert","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-sql_for_insert","(sql, pk, id_value, sequence_name, binds)",""],["sql_query_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-sql_query_length","()","<p>Returns the maximum length of an SQL query.\n"],["sqlite_version","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-sqlite_version","()",""],["sti_name","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-sti_name","()",""],["store","ActiveRecord::Store::ClassMethods","classes/ActiveRecord/Store/ClassMethods.html#method-i-store","(store_attribute, options = {})",""],["store_accessor","ActiveRecord::Store::ClassMethods","classes/ActiveRecord/Store/ClassMethods.html#method-i-store_accessor","(store_attribute, *keys)",""],["strict_mode?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-strict_mode-3F","()",""],["string_to_array","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-string_to_array","(string, oid)",""],["string_to_bit","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-string_to_bit","(value)",""],["string_to_cidr","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-string_to_cidr","(string)",""],["string_to_hstore","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-string_to_hstore","(string)",""],["string_to_json","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-string_to_json","(string)",""],["string_to_point","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-string_to_point","(string)",""],["string_to_time","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-string_to_time","(string)",""],["structure_dump","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-structure_dump","(*arguments)",""],["structure_load","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-structure_load","(*arguments)",""],["subquery_for","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-subquery_for","(key, select)","<p>MySQL is too stupid to create a temporary table for use subquery, so we\nhave to give it some prompting …\n"],["subquery_for","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-subquery_for","(key, select)","<p>Return a subquery for the given key using the join information.\n"],["substitute_at","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-substitute_at","(column, index)","<p>Returns a bind substitution value given a <code>column</code> and list of\ncurrent <code>binds</code>.\n"],["substitute_at","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-substitute_at","(column, index)",""],["suffix","ActiveRecord::DynamicMatchers::FindByBang","classes/ActiveRecord/DynamicMatchers/FindByBang.html#method-c-suffix","()",""],["suffix","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-c-suffix","()",""],["sum","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-sum","(*args)","<p>Calculates the sum of values on a given column. The value is returned with\nthe same data type of the …\n"],["supports_add_column?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_add_column-3F","()","<p>Returns true\n"],["supports_bulk_alter?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_bulk_alter-3F","()",""],["supports_count_distinct?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_count_distinct-3F","()","<p>Does this adapter support using DISTINCT within COUNT? This is\n<code>true</code> for all adapters except sqlite.\n"],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_ddl_transactions-3F","()","<p>Does this adapter support DDL rollbacks in transactions? That is, would\nCREATE TABLE or ALTER TABLE get …\n"],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_ddl_transactions-3F","()",""],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_ddl_transactions-3F","()","<p>Returns true\n"],["supports_explain?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_explain-3F","()","<p>Does this adapter support explain? As of this writing sqlite3, mysql2, and\npostgresql are the only ones …\n"],["supports_explain?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-supports_explain-3F","()",""],["supports_explain?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_explain-3F","()","<p>Returns true.\n"],["supports_explain?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_explain-3F","()","<p>Returns true.\n"],["supports_extensions?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_extensions-3F","()","<p>Does this adapter support database extensions? As of this writing only\npostgresql does.\n"],["supports_extensions?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_extensions-3F","()","<p>Returns true if pg &gt; 9.1\n"],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_index_sort_order-3F","()","<p>Does this adapter support index sort order?\n"],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_index_sort_order-3F","()","<p>Technically MySQL allows to create indexes with the sort order syntax but\nat the moment (5.5) it doesn’t …\n"],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_index_sort_order-3F","()",""],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_index_sort_order-3F","()",""],["supports_insert_with_returning?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_insert_with_returning-3F","()",""],["supports_migrations?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_migrations-3F","()","<p>Does this adapter support migrations? Backend specific, as the abstract\nadapter always returns <code>false</code> …\n"],["supports_migrations?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_migrations-3F","()","<p>Returns true, since this connection adapter supports migrations.\n"],["supports_migrations?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_migrations-3F","()","<p>Returns true, since this connection adapter supports migrations.\n"],["supports_partial_index?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_partial_index-3F","()","<p>Does this adapter support partial indices?\n"],["supports_partial_index?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_partial_index-3F","()",""],["supports_primary_key?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_primary_key-3F","()","<p>Can this adapter determine the primary key for tables not attached to an\nActive Record class, such as …\n"],["supports_primary_key?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_primary_key-3F","()",""],["supports_ranges?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_ranges-3F","()","<p>Range datatypes weren’t introduced until PostgreSQL 9.2\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_savepoints-3F","()","<p>Does this adapter support savepoints? PostgreSQL and MySQL do, SQLite &lt;\n3.6.8 does not.\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_savepoints-3F","()","<p>Returns true, since this connection adapter supports savepoints.\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_savepoints-3F","()","<p>Returns true, since this connection adapter supports savepoints.\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_savepoints-3F","()","<p>Returns true if SQLite version is ‘3.6.8’ or greater, false otherwise.\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-supports_statement_cache-3F","()","<p>Returns <code>true</code> when the connection adapter supports prepared\nstatement caching, otherwise returns <code>false</code> …\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-supports_statement_cache-3F","()","<p>Returns true, since this connection adapter supports prepared statement\ncaching.\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_statement_cache-3F","()","<p>Returns <code>true</code>, since this connection adapter supports prepared\nstatement caching.\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_statement_cache-3F","()","<p>Returns true, since this connection adapter supports prepared statement\ncaching.\n"],["supports_transaction_isolation?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_transaction_isolation-3F","()","<p>Does this adapter support setting the isolation level for a transaction?\n"],["supports_transaction_isolation?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_transaction_isolation-3F","()","<p>MySQL 4 technically support transaction isolation, but it is affected by a\nbug where the transaction …\n"],["supports_transaction_isolation?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_transaction_isolation-3F","()",""],["suppress_messages","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-suppress_messages","()",""],["symbolized_base_class","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-symbolized_base_class","()",""],["symbolized_sti_name","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-symbolized_sti_name","()",""],["table_alias_for","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_alias_for","(table_name)","<p>Truncates a table alias according to the limits of the current adapter.\n"],["table_alias_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-table_alias_length","()","<p>Returns the maximum length of a table alias.\n"],["table_alias_length","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-table_alias_length","()","<p>Returns the configured supported identifier length supported by PostgreSQL\n"],["table_exists?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-table_exists-3F","(name)",""],["table_exists?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-table_exists-3F","(name)","<p>Returns true if table exists. If the schema is not specified as part of\n<code>name</code> then it will only find tables …\n"],["table_exists?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-table_exists-3F","(table_name)",""],["table_exists?","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-table_exists-3F","(name)","<p>A cached lookup for table existence.\n"],["table_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_exists-3F","(table_name)","<p>Checks to see if the table <code>table_name</code> exists on the database.\n\n<pre><code>table_exists?(:developers)\n</code></pre>\n"],["table_exists?","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_exists-3F","()","<p>Indicates whether the table associated with this class exists\n"],["table_name","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_name","()","<p>Guesses the table name (in forced lower-case) based on the name of the\nclass in the inheritance hierarchy …\n"],["table_name","ActiveRecord::SchemaMigration","classes/ActiveRecord/SchemaMigration.html#method-c-table_name","()",""],["table_name=","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_name-3D","(value)","<p>Sets the table name explicitly. Example:\n\n<pre><code>class Project &lt; ActiveRecord::Base\n  self.table_name = &quot;project&quot; ...</code></pre>\n"],["table_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-table_name_length","()","<p>Returns the maximum length of a table name.\n"],["table_rows","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-i-table_rows","()","<p>Return a hash of rows to be inserted. The key is the table, the value is a\nlist of rows to insert to …\n"],["table_structure","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-table_structure","(table_name)",""],["tables","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-tables","(name = nil)","<p>Returns the list of all tables in the schema search path or a specified\nschema.\n"],["tables","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-tables","(name = nil)",""],["take","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-take","(limit = nil)","<p>Gives a record (or N records if a parameter is supplied) without any\nimplied order. The order will depend …\n"],["take!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-take-21","()","<p>Same as <code>take</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found. Note that\n<code>take!</code> accepts no …\n"],["target","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-target","()",""],["teardown_fixtures","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-teardown_fixtures","()",""],["test_errors_aref","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_errors_aref","()","<p>Errors Testing\n<p>Returns an object that implements [](attribute) defined which returns an\nArray of Strings …\n"],["test_model_naming","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_model_naming","()","<p>Naming\n<p>Model.model_name must return a string with some convenience methods:\n<code>:human</code>, <code>:singular</code> and <code>:plural</code> …\n"],["test_persisted?","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_persisted-3F","()","<p>Responds to <code>persisted?</code>\n<p>Returns a boolean that specifies whether the object has been persisted yet.\nThis …\n"],["test_to_key","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_to_key","()","<p>Responds to <code>to_key</code>\n<p>Returns an Enumerable of all (primary) key attributes or nil if\n<code>model.persisted?</code> is …\n"],["test_to_param","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_to_param","()","<p>Responds to <code>to_param</code>\n<p>Returns a string representing the object’s key suitable for use in URLs or\n<code>nil</code> if …\n"],["test_to_partial_path","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_to_partial_path","()","<p>Responds to <code>to_partial_path</code>\n<p>Returns a string giving a relative path. This is used for looking up\npartials. …\n"],["tests","ActionMailer::TestCase::Behavior::ClassMethods","classes/ActionMailer/TestCase/Behavior/ClassMethods.html#method-i-tests","(mailer)",""],["timestamps","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-timestamps","()","<p>Adds timestamps (<code>created_at</code> and <code>updated_at</code>)\ncolumns to the table. See SchemaStatements#add_timestamps …\n"],["timestamps","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-timestamps","(*args)","<p>Appends <code>:datetime</code> columns <code>:created_at</code> and\n<code>:updated_at</code> to the table.\n"],["to_a","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-to_a","()","<p>Returns an array of error messages, with the attribute name included.\n\n<pre><code>person.errors.add(:name, &quot;can't ...</code></pre>\n"],["to_a","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-to_a","()","<p>Converts relation objects to Array.\n"],["to_ary","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-to_ary","()",""],["to_date","Mysql::Time","classes/Mysql/Time.html#method-i-to_date","()",""],["to_hash","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-to_hash","(full_messages = false)","<p>Returns a Hash of attributes with their error messages. If\n<code>full_messages</code> is <code>true</code>, it will contain full …\n"],["to_hash","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-to_hash","()",""],["to_integer","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Range","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Range.html#method-i-to_integer","(value)",""],["to_key","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_key","()","<p>Returns an Enumerable of all key attributes if any is set, regardless if\nthe object is persisted or not. …\n"],["to_key","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-to_key","()","<p>Returns this record’s primary key value wrapped in an Array if one is\navailable.\n"],["to_model","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_model","()","<p>If your object is already designed to implement all of the Active Model you\ncan use the default <code>:to_model</code> …\n"],["to_param","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_param","()","<p>Returns a <code>string</code> representing the object’s key suitable for\nuse in URLs, or <code>nil</code> if <code>persisted?</code> is\n<code>false</code> …\n"],["to_param","ActiveRecord::Integration","classes/ActiveRecord/Integration.html#method-i-to_param","()","<p>Returns a String, which Action Pack uses for constructing an URL to this\nobject. The default implementation …\n"],["to_partial_path","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_partial_path","()","<p>Returns a <code>string</code> identifying the path associated with the\nobject. ActionPack uses this to find a suitable …\n"],["to_s","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-to_s","","<p>Returns the class name.\n\n<pre><code>class BlogPost\n  extend ActiveModel::Naming\nend\n\nBlogPost.model_name.to_s # =&gt; ...\n</code></pre>\n"],["to_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-to_sql","(arel, binds = [])","<p>Converts an arel AST to SQL\n"],["to_sql","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-to_sql","()","<p>Returns sql statement for the relation.\n\n<pre><code>User.where(name: 'Oscar').to_sql\n# =&gt; SELECT &quot;users&quot;.* FROM &quot;users&quot; ...\n</code></pre>\n"],["to_str","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-to_str","","<p>Equivalent to <code>to_s</code>.\n"],["to_xml","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-to_xml","(options={})","<p>Returns an xml formatted representation of the Errors hash.\n\n<pre><code>person.errors.add(:name, &quot;can't be blank&quot;) ...</code></pre>\n"],["to_xml","ActiveModel::Serializers::Xml","classes/ActiveModel/Serializers/Xml.html#method-i-to_xml","(options = {}, &block)","<p>Returns XML representing the model. Configuration can be passed through\n<code>options</code>.\n<p>Without any <code>options</code>, …\n"],["to_xml","ActiveRecord::Serialization","classes/ActiveRecord/Serialization.html#method-i-to_xml","(options = {}, &block)","<p>Builds an XML document to represent the model. Some configuration is\navailable through <code>options</code>. However …\n"],["toggle","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-toggle","(attribute)","<p>Assigns to <code>attribute</code> the boolean opposite of\n<code>attribute?</code>. So if the predicate returns <code>true</code> the\nattribute …\n"],["toggle!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-toggle-21","(attribute)","<p>Wrapper around <code>toggle</code> that saves the record. This method\ndiffers from its non-bang version in that it …\n"],["touch","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-touch","(name = nil)","<p>Saves the record with the updated_at/on attributes set to the current time.\nPlease note that no validation …\n"],["transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction","(options = {})","<p>Runs the given block in a database transaction, and returns the result of\nthe block.\n<p>Nested transactions …\n"],["transaction","ActiveRecord::Transactions","classes/ActiveRecord/Transactions.html#method-i-transaction","(options = {}, &block)","<p>See ActiveRecord::Transactions::ClassMethods for detailed documentation.\n"],["transaction","ActiveRecord::Transactions::ClassMethods","classes/ActiveRecord/Transactions/ClassMethods.html#method-i-transaction","(options = {}, &block)","<p>See ActiveRecord::Transactions::ClassMethods for detailed documentation.\n"],["transaction_isolation_levels","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction_isolation_levels","()",""],["transaction_joinable=","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-transaction_joinable-3D","(joinable)",""],["transaction_open?","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction_open-3F","()",""],["translate_exception","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-translate_exception","(exception, message)",""],["try_to_load_dependency","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-try_to_load_dependency","(file_name)",""],["tsrange","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-tsrange","(name, options = {})",""],["tstzrange","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-tstzrange","(name, options = {})",""],["tsvector","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-tsvector","(*args)",""],["type","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Date","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Date.html#method-i-type","()",""],["type","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::DateTime","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/DateTime.html#method-i-type","()",""],["type","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Float","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Float.html#method-i-type","()",""],["type","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Time","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Time.html#method-i-type","()",""],["type","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Type","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Type.html#method-i-type","()",""],["type","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Date","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Date.html#method-i-type","()",""],["type","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Timestamp","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Timestamp.html#method-i-type","()",""],["type","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Type.html#method-i-type","()",""],["type_cast","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-type_cast","(v)",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-type_cast","(value, column)","<p>QUOTING ==================================================\n"],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Boolean","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Boolean.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Date","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Date.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::DateTime","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/DateTime.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Decimal","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Decimal.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Float","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Float.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Identity","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Identity.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Integer","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Integer.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Time","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Time.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Array","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Array.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Bit","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Bit.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Boolean","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Boolean.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Bytea","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Bytea.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Cidr","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Cidr.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Date","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Date.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Decimal","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Decimal.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Float","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Float.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Hstore","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Hstore.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Identity","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Identity.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Integer","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Integer.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Json","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Json.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Money","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Money.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Point","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Point.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Range","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Range.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Time","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Time.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Timestamp","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Timestamp.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Vector","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Vector.html#method-i-type_cast","(value)","<p>FIXME: this should probably split on <code>delim</code> and use\n<code>subtype</code> to cast the values.  Unfortunately, the current …\n"],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Quoting","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Quoting.html#method-i-type_cast","(value, column, array_member = false)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLColumn","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-type_cast","(value, column)","<p>Cast a <code>value</code> to a type that the database understands. For\nexample, SQLite does not understand dates, …\n"],["type_cast_config_to_boolean","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-c-type_cast_config_to_boolean","(config)",""],["type_cast_config_to_integer","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-c-type_cast_config_to_integer","(config)",""],["type_cast_for_write","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Type","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Type.html#method-i-type_cast_for_write","(value)",""],["type_cast_for_write","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Type.html#method-i-type_cast_for_write","(value)",""],["type_to_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-type_to_sql","(type, limit = nil, precision = nil, scale = nil)","<p>Maps logical Rails types to MySQL-specific data types.\n"],["type_to_sql","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-type_to_sql","(type, limit = nil, precision = nil, scale = nil)","<p>Maps logical Rails types to PostgreSQL-specific data types.\n"],["uncached","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-uncached","()","<p>Disable the query cache within the block.\n"],["uncached","ActiveRecord::QueryCache::ClassMethods","classes/ActiveRecord/QueryCache/ClassMethods.html#method-i-uncached","(&block)","<p>Disable the query cache within the block if Active Record is configured. If\nit’s not, it will execute …\n"],["uncountable?","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-uncountable-3F","(record_or_class)","<p>Identifies whether the class name of a record or class is uncountable.\n\n<pre><code>ActiveModel::Naming.uncountable?(Sheep) ...</code></pre>\n"],["undefine_attribute_methods","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-undefine_attribute_methods","()","<p>Removes all the previously dynamically defined methods from the class.\n\n<pre><code>class Person\n  include ActiveModel::AttributeMethods ...</code></pre>\n"],["unescape_bytea","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Quoting","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Quoting.html#method-i-unescape_bytea","(value)","<p>Unescapes bytea output from a database to the binary string it represents.\nNOTE: This is NOT an inverse …\n"],["uniq","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-uniq","()",""],["uniq","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-uniq","(value = true)",""],["uniq_value","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-uniq_value","()","<p><code>uniq</code> and <code>uniq!</code> are silently deprecated.\n<code>uniq_value</code> delegates to <code>distinct_value</code> to\nmaintain backwards ...\n"],["unprepared_statement","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-unprepared_statement","()",""],["unprepared_visitor","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-unprepared_visitor","()",""],["unscope","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-unscope","(*args)","<p>Removes an unwanted relation that is already defined on a chain of\nrelations. This is useful when passing …\n"],["unscoped","ActiveRecord::Scoping::Default::ClassMethods","classes/ActiveRecord/Scoping/Default/ClassMethods.html#method-i-unscoped","()","<p>Returns a scope for the model without the <code>default_scope</code>.\n\n<pre><code>class Post &lt; ActiveRecord::Base\n  def self.default_scope ...</code></pre>\n"],["up","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-up","()",""],["update","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-update","(arel, name = nil, binds = [])","<p>Executes the update statement and returns the number of rows affected.\n"],["update","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update","(attributes)","<p>Updates the attributes of the model from the passed-in hash and saves the\nrecord, all wrapped in a transaction. …\n"],["update","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-update","(id, attributes)","<p>Updates an object (or multiple objects) and saves it to the database, if\nvalidations pass. The resulting …\n"],["update!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update-21","(attributes)","<p>Updates its receiver just like <code>update</code> but calls\n<code>save!</code> instead of <code>save</code>, so an exception is raised\nif the …\n"],["update_all","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-update_all","(updates)","<p>Updates all records with details given if they match a set of conditions\nsupplied, limits and order can …\n"],["update_attribute","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update_attribute","(name, value)","<p>Updates a single attribute and saves the record. This is especially useful\nfor boolean flags on existing …\n"],["update_attributes","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update_attributes","(attributes)",""],["update_attributes!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update_attributes-21","(attributes)",""],["update_column","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update_column","(name, value)","<p>Equivalent to <code>update_columns(name =&gt; value)</code>.\n"],["update_columns","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update_columns","(attributes)","<p>Updates the attributes directly in the database issuing an UPDATE SQL\nstatement and sets them in the …\n"],["update_counters","ActiveRecord::CounterCache::ClassMethods","classes/ActiveRecord/CounterCache/ClassMethods.html#method-i-update_counters","(id, counters)","<p>A generic “counter updater” implementation, intended primarily to be used\nby increment_counter …\n"],["update_counters","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-update_counters","(id, counters)","<p>Make sure the lock version column gets updated when counters are updated.\n"],["update_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-update_sql","(sql, name = nil)","<p>Executes the update statement and returns the number of rows affected.\n"],["update_sql","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-update_sql","(sql, name = nil)","<p>Executes an UPDATE query and returns the number of affected tuples.\n"],["use_insert_returning?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-use_insert_returning-3F","()",""],["uses_transaction","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-uses_transaction","(*methods)",""],["uses_transaction?","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-uses_transaction-3F","(method)",""],["using_limitable_reflections?","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-using_limitable_reflections-3F","(reflections)",""],["uuid","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-uuid","(name, options = {})",""],["valid?","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-valid-3F","(context = nil)","<p>Runs all the specified validations and returns <code>true</code> if no\nerrors were added otherwise <code>false</code>.\n\n<pre><code>class Person ...</code></pre>\n"],["valid?","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-i-valid-3F","()",""],["valid?","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-valid-3F","(context = nil)","<p>Runs all the validations within the specified context. Returns\n<code>true</code> if no errors are found, <code>false</code> otherwise. …\n"],["valid_alter_table_options","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-valid_alter_table_options","( type, options)","<p>See: www.sqlite.org/lang_altertable.html SQLite has an additional\nrestriction on the ALTER TABLE statement …\n"],["valid_type?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-valid_type-3F","(type)",""],["valid_type?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-valid_type-3F","(type)",""],["valid_type?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-valid_type-3F","(type)",""],["validate","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validate","(*args, &block)","<p>Adds a validation method or block to the class. This is useful when\noverriding the <code>validate</code> instance …\n"],["validate","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-i-validate","(record)","<p>Override this method in subclasses with validation logic, adding errors to\nthe records <code>errors</code> array where …\n"],["validates","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates","(*attributes)","<p>This method is a shortcut to all default validators and any custom\nvalidator classes ending in ‘Validator’. …\n"],["validates!","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates-21","(*attributes)","<p>This method is used to define validations that cannot be corrected by end\nusers and are considered exceptional. …\n"],["validates_absence_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_absence_of","(*attr_names)","<p>Validates that the specified attributes are blank (as defined by\nObject#blank?). Happens by default on …\n"],["validates_acceptance_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_acceptance_of","(*attr_names)","<p>Encapsulates the pattern of wanting to validate the acceptance of a terms\nof service check box (or similar …\n"],["validates_associated","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_associated","(*attr_names)","<p>Validates whether the associated object or objects are all valid. Works\nwith any kind of association. …\n"],["validates_confirmation_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_confirmation_of","(*attr_names)","<p>Encapsulates the pattern of wanting to validate a password or email address\nfield with a confirmation. …\n"],["validates_each","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates_each","(*attr_names, &block)","<p>Validates each attribute against a block.\n\n<pre><code>class Person\n  include ActiveModel::Validations\n\n  attr_accessor ...</code></pre>\n"],["validates_exclusion_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_exclusion_of","(*attr_names)","<p>Validates that the value of the specified attribute is not in a particular\nenumerable object.\n\n<pre><code>class Person ...</code></pre>\n"],["validates_format_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_format_of","(*attr_names)","<p>Validates whether the value of the specified attribute is of the correct\nform, going by the regular expression …\n"],["validates_inclusion_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_inclusion_of","(*attr_names)","<p>Validates whether the value of the specified attribute is available in a\nparticular enumerable object. …\n"],["validates_length_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_length_of","(*attr_names)","<p>Validates that the specified attribute matches the length restrictions\nsupplied. Only one option can …\n"],["validates_numericality_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_numericality_of","(*attr_names)","<p>Validates whether the value of the specified attribute is numeric by trying\nto convert it to a float …\n"],["validates_presence_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_presence_of","(*attr_names)","<p>Validates that the specified attributes are not blank (as defined by\nObject#blank?). Happens by default …\n"],["validates_presence_of","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_presence_of","(*attr_names)","<p>Validates that the specified attributes are not blank (as defined by\nObject#blank?), and, if the attribute …\n"],["validates_size_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_size_of","(*attr_names)",""],["validates_uniqueness_of","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_uniqueness_of","(*attr_names)","<p>Validates whether the value of the specified attributes are unique across\nthe system. Useful for making …\n"],["validates_with","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-validates_with","(*args, &block)","<p>Passes the record off to the class or classes specified and allows them to\nadd errors based on more complex …\n"],["validates_with","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates_with","(*args, &block)","<p>Passes the record off to the class or classes specified and allows them to\nadd errors based on more complex …\n"],["validators","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validators","()","<p>List all validators that are being used to validate the model using\n<code>validates_with</code> method.\n\n<pre><code>class Person ...</code></pre>\n"],["validators_on","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validators_on","(*attributes)","<p>List all validators that are being used to validate a specific attribute.\n\n<pre><code>class Person\n  include ActiveModel::Validations ...</code></pre>\n"],["values","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-values","()","<p>Returns all message values.\n\n<pre><code>person.errors.messages # =&gt; {:name=&gt;[&quot;can not be nil&quot;, &quot;must be specified&quot;]} ...\n</code></pre>\n"],["values","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-values","()",""],["verify!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-verify-21","(*ignored)","<p>Checks whether the connection to the database is still active (i.e. not\nstale). This is done under the …\n"],["version","ActionMailer","classes/ActionMailer.html#method-c-version","()","<p>Returns the version of the currently loaded ActionMailer as a Gem::Version\n"],["version","ActiveModel","classes/ActiveModel.html#method-c-version","()","<p>Returns the version of the currently loaded ActiveModel as a Gem::Version\n"],["version","ActiveRecord","classes/ActiveRecord.html#method-c-version","()","<p>Returns the version of the currently loaded ActiveRecord as a Gem::Version\n"],["version","ActiveRecord::SchemaMigration","classes/ActiveRecord/SchemaMigration.html#method-i-version","()",""],["where","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-where","(opts = :chain, *rest)","<p>Returns a new relation, which is the result of filtering the current\nrelation according to the conditions …\n"],["where_values_hash","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-where_values_hash","()","<p>Returns a hash of where conditions.\n\n<pre><code>User.where(name: 'Oscar').where_values_hash\n# =&gt; {name: &quot;Oscar&quot;}\n</code></pre>\n"],["with_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-with_connection","()","<p>If a connection already exists yield it to the block. If no connection\nexists checkout a connection, …\n"],["with_lock","ActiveRecord::Locking::Pessimistic","classes/ActiveRecord/Locking/Pessimistic.html#method-i-with_lock","(lock = true)","<p>Wraps the passed block in a transaction, locking the object before\nyielding. You pass can the SQL locking …\n"],["with_transaction_returning_status","ActiveRecord::Transactions","classes/ActiveRecord/Transactions.html#method-i-with_transaction_returning_status","()","<p>Executes <code>method</code> within a transaction and captures its return\nvalue as a status flag. If the status is …\n"],["without_prepared_statement?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-without_prepared_statement-3F","(binds)",""],["write","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-write","(text=\"\")",""],["write_attribute","ActiveRecord::AttributeMethods::Write","classes/ActiveRecord/AttributeMethods/Write.html#method-i-write_attribute","(attr_name, value)","<p>Updates the attribute identified by <code>attr_name</code> with the\nspecified <code>value</code>. Empty strings for fixnum and …\n"],["write_store_attribute","ActiveRecord::Store","classes/ActiveRecord/Store.html#method-i-write_store_attribute","(store_attribute, key, value)",""],["xml","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-xml","(*args)",""],["CHANGELOG","","files/__/__/__/__/__/var/lib/gems/1_9_1/gems/actionmailer-4_0_2/CHANGELOG_md.html","","<p>Rails 4.0.1 (November 01, 2013)\n<p>Invoke mailer defaults as procs only if they are procs, do not convert ...\n"],["README","","files/__/__/__/__/__/var/lib/gems/1_9_1/gems/actionmailer-4_0_2/README_rdoc.html","","<p>Action Mailer – Easy email delivery and testing\n<p>Action Mailer is a framework for designing email service …\n"],["CHANGELOG","","files/__/__/__/__/__/var/lib/gems/1_9_1/gems/activemodel-4_0_2/CHANGELOG_md.html","","<p>Rails 4.0.1 (November 01, 2013)\n<p>Fix <code>has_secure_password</code> to honor bcrypt-ruby's cost attribute.\n<em>T.J. Schuck</em> ...\n"],["README","","files/__/__/__/__/__/var/lib/gems/1_9_1/gems/activemodel-4_0_2/README_rdoc.html","","<p>Active Model – model interfaces for Rails\n<p>Active Model provides a known set of interfaces for usage in …\n"],["CHANGELOG","","files/__/__/__/__/__/var/lib/gems/1_9_1/gems/activerecord-4_0_2/CHANGELOG_md.html","","<p>Rails 4.0.1 (November 01, 2013)\n<p><code>NullRelation#pluck</code> takes a list of columns\nThe method signature in <code>NullRelation</code> ...\n"],["README","","files/__/__/__/__/__/var/lib/gems/1_9_1/gems/activerecord-4_0_2/README_rdoc.html","","<p>Active Record – Object-relational mapping put on rails\n<p>Active Record connects classes to relational database …\n"]]}}